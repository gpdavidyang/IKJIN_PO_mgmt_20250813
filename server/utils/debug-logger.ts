/**
 * ÌëúÏ§ÄÌôîÎêú ÎîîÎ≤ÑÍ∑∏ Î°úÍπÖ Ïú†Ìã∏Î¶¨Ìã∞
 */

export class DebugLogger {
  private static isDebugMode = process.env.NODE_ENV === 'development';
  private context: string;
  
  constructor(context: string = '') {
    this.context = context;
  }
  
  log(message: string) {
    if (!DebugLogger.isDebugMode) return;
    const prefix = this.context ? `[${this.context}]` : '';
    console.log(`üîç ${prefix} ${message}`);
  }
  
  error(message: string) {
    const prefix = this.context ? `[${this.context}]` : '';
    console.error(`‚ùå ${prefix} ${message}`);
  }
  
  static logFunctionEntry(functionName: string, params: any = {}) {
    if (!this.isDebugMode) return;
    
    console.log(`üîß [ENTRY] ${functionName}`);
    console.log(`   ÏãúÍ∞Ñ: ${new Date().toISOString()}`);
    if (Object.keys(params).length > 0) {
      console.log(`   ÌååÎùºÎØ∏ÌÑ∞:`, JSON.stringify(params, null, 2));
    }
    console.log(`   ===============================`);
  }
  
  static logFunctionExit(functionName: string, result: any = {}) {
    if (!this.isDebugMode) return;
    
    console.log(`‚úÖ [EXIT] ${functionName}`);
    console.log(`   ÏãúÍ∞Ñ: ${new Date().toISOString()}`);
    if (Object.keys(result).length > 0) {
      console.log(`   Í≤∞Í≥º:`, JSON.stringify(result, null, 2));
    }
    console.log(`   ===============================`);
  }
  
  static logError(functionName: string, error: any) {
    console.error(`‚ùå [ERROR] ${functionName}`);
    console.error(`   ÏãúÍ∞Ñ: ${new Date().toISOString()}`);
    console.error(`   Ïò§Î•ò:`, error);
    console.error(`   ===============================`);
  }
  
  static logExecutionPath(apiEndpoint: string, actualFunction: string) {
    if (!this.isDebugMode) return;
    
    console.log(`üîç [EXECUTION PATH]`);
    console.log(`   API: ${apiEndpoint}`);
    console.log(`   Ïã§Ï†ú Ìò∏Ï∂ú: ${actualFunction}`);
    console.log(`   ÏãúÍ∞Ñ: ${new Date().toISOString()}`);
    console.log(`   ===============================`);
  }
}