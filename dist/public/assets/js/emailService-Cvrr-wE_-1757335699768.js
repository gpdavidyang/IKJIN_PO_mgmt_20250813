import{k as n}from"./index-D-PHG7W0-1757335699768.js";const l=class l{static async showPdfGenerationFailureDialog(){return new Promise(e=>{const t=window.confirm(`PDF 파일 생성에 실패했습니다.

PDF 없이 이메일을 발송하시겠습니까?
(Excel 파일과 기타 첨부파일은 포함됩니다)`);e(t)})}static async sendPurchaseOrderEmailOriginalFormat(e,s){try{return{success:!0,messageId:(await n("POST",`${this.BASE_URL}/send-email-original-format`,{filePath:e,...s})).data?.messageId}}catch(t){return console.error("원본 형식 유지 이메일 발송 오류:",t),{success:!1,error:t instanceof Error?t.message:"알 수 없는 오류"}}}static async sendPurchaseOrderEmail(e,s){if(e.filePath){const t={to:s.to,cc:s.cc,subject:s.subject,additionalMessage:s.message,poData:{orderNumber:e.orderNumber,orderDate:e.orderDate,siteName:e.siteName,vendorName:e.vendorName,totalAmount:e.totalAmount}};t.attachments=[],e.attachmentUrls&&e.attachmentUrls.length>0&&(t.attachments=e.attachmentUrls.map((r,o)=>({path:r,filename:`첨부파일_${e.orderNumber}_${o+1}`})));try{return await n("POST",`${this.BASE_URL}/send-email`,t)}catch(r){throw console.error("Email send error:",r),new Error("이메일 발송 중 오류가 발생했습니다.")}}try{if(s.customFiles&&s.customFiles.length>0){console.log("📎 사용자 업로드 파일 포함:",s.customFiles.length);const t=new FormData;t.append("orderData",JSON.stringify({orderId:e.orderId,orderNumber:e.orderNumber,vendorName:e.vendorName,orderDate:e.orderDate,totalAmount:e.totalAmount,siteName:e.siteName})),t.append("to",JSON.stringify(s.to)),s.cc&&s.cc.length>0&&t.append("cc",JSON.stringify(s.cc)),t.append("subject",s.subject),s.message&&t.append("message",s.message),t.append("selectedAttachmentIds",JSON.stringify(s.selectedAttachmentIds)),e.attachmentUrls&&e.attachmentUrls.length>0&&(t.append("attachmentUrls",JSON.stringify(e.attachmentUrls)),console.log("📎 첨부파일 URL 추가:",e.attachmentUrls)),s.customFiles.forEach((c,d)=>{t.append("customFiles",c),console.log(`📎 사용자 파일 추가: ${c.name} (${c.size} bytes)`)});const r=await fetch("/api/orders/send-email-with-files",{method:"POST",body:t,credentials:"include"});if(!r.ok){const c=await r.json().catch(()=>({}));throw new Error(c.error||`HTTP ${r.status}: ${r.statusText}`)}return{success:!0,messageId:(await r.json()).messageId}}else{const t={orderData:{orderId:e.orderId,orderNumber:e.orderNumber,vendorName:e.vendorName,orderDate:e.orderDate,totalAmount:e.totalAmount,siteName:e.siteName},to:s.to,cc:s.cc,subject:s.subject,message:s.message,selectedAttachmentIds:s.selectedAttachmentIds,attachmentUrls:e.attachmentUrls,emailSettings:{subject:s.subject,message:s.message,cc:s.cc}};return console.log("📧 [CLIENT DEBUG] 이메일 API 요청 데이터 검증:"),console.log("  ├─ orderData.orderId:",e.orderId),console.log("  ├─ orderData.orderNumber:",e.orderNumber),console.log("  ├─ emailData.to:",s.to),console.log("  ├─ emailData.selectedAttachmentIds:",s.selectedAttachmentIds),console.log("  ├─ selectedAttachmentIds 길이:",s.selectedAttachmentIds?.length||0),console.log("  ├─ selectedAttachmentIds 타입:",typeof s.selectedAttachmentIds),console.log("  ├─ selectedAttachmentIds 상세:",JSON.stringify(s.selectedAttachmentIds)),s.selectedAttachmentIds&&s.selectedAttachmentIds.length>0?(console.log("📊 [CLIENT DEBUG] Excel 파일 첨부 체크:"),s.selectedAttachmentIds.forEach((o,c)=>{console.log(`  ├─ 첨부파일 [${c}]: ID = ${o} (타입: ${typeof o})`)})):console.warn("⚠️ [CLIENT DEBUG] selectedAttachmentIds가 비어있음!"),e.attachmentUrls&&e.attachmentUrls.length>0&&console.log("📎 [CLIENT DEBUG] 첨부파일 URL 추가:",e.attachmentUrls),console.log("📧 [CLIENT DEBUG] 최종 API 요청 데이터:",t),{success:!0,messageId:(await n("POST","/api/orders/send-email",t)).messageId}}}catch(t){if(console.error("Email send error:",t),t.message?.includes("첨부할 파일이 생성되지 않았습니다")||t.message?.includes("PDF 생성"))if(await this.showPdfGenerationFailureDialog()){console.log("📧 PDF 없이 이메일 발송 재시도");const o={orderData:{orderId:e.orderId,orderNumber:e.orderNumber,vendorName:e.vendorName,orderDate:e.orderDate,totalAmount:e.totalAmount,siteName:e.siteName},to:s.to,cc:s.cc,subject:s.subject,message:s.message,selectedAttachmentIds:s.selectedAttachmentIds,attachmentUrls:e.attachmentUrls,skipPdfGeneration:!0,emailSettings:{subject:s.subject,message:s.message,cc:s.cc}};try{return{success:!0,messageId:(await n("POST","/api/orders/send-email",o)).messageId,warning:"PDF 파일 없이 이메일이 발송되었습니다."}}catch(c){throw console.error("Email send retry error:",c),new Error("PDF 없이 이메일 발송을 시도했으나 실패했습니다.")}}else throw new Error("PDF 생성 실패로 이메일 발송이 취소되었습니다.");throw new Error("이메일 발송 중 오류가 발생했습니다.")}}static async testEmailConnection(){try{return await n("GET",`${this.BASE_URL}/test-email`)}catch(e){return console.error("Email connection test error:",e),{success:!1,message:"이메일 서버 연결 테스트 실패"}}}static async extractSheets(e,s=["갑지","을지"]){try{return await n("POST",`${this.BASE_URL}/extract-sheets`,{filePath:e,sheets:s})}catch(t){throw console.error("Sheet extraction error:",t),new Error("시트 추출 중 오류가 발생했습니다.")}}static async convertToPDF(e,s){try{return await n("POST",`${this.BASE_URL}/convert-to-pdf`,{excelPath:e,sheets:s})}catch(t){throw console.error("PDF conversion error:",t),new Error("PDF 변환 중 오류가 발생했습니다.")}}static async processComplete(e,s){const t=new FormData;t.append("file",e),Object.entries(s).forEach(([r,o])=>{o!==void 0&&(Array.isArray(o)?t.append(r,o.join(",")):t.append(r,o.toString()))});try{return await n("POST",`${this.BASE_URL}/process-complete`,t)}catch(r){throw console.error("Complete process error:",r),new Error("통합 처리 중 오류가 발생했습니다.")}}};l.BASE_URL="/api/po-template";let m=l;export{m as E};
