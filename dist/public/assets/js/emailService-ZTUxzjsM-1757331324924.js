import{k as c}from"./index-DXJvUTRh-1757331324924.js";const i=class i{static async sendPurchaseOrderEmailOriginalFormat(e,t){try{return{success:!0,messageId:(await c("POST",`${this.BASE_URL}/send-email-original-format`,{filePath:e,...t})).data?.messageId}}catch(s){return console.error("원본 형식 유지 이메일 발송 오류:",s),{success:!1,error:s instanceof Error?s.message:"알 수 없는 오류"}}}static async sendPurchaseOrderEmail(e,t){if(e.filePath){const s={to:t.to,cc:t.cc,subject:t.subject,additionalMessage:t.message,poData:{orderNumber:e.orderNumber,orderDate:e.orderDate,siteName:e.siteName,vendorName:e.vendorName,totalAmount:e.totalAmount}};s.attachments=[],e.attachmentUrls&&e.attachmentUrls.length>0&&(s.attachments=e.attachmentUrls.map((r,o)=>({path:r,filename:`첨부파일_${e.orderNumber}_${o+1}`})));try{return await c("POST",`${this.BASE_URL}/send-email`,s)}catch(r){throw console.error("Email send error:",r),new Error("이메일 발송 중 오류가 발생했습니다.")}}try{if(t.customFiles&&t.customFiles.length>0){console.log("📎 사용자 업로드 파일 포함:",t.customFiles.length);const s=new FormData;s.append("orderData",JSON.stringify({orderId:e.orderId,orderNumber:e.orderNumber,vendorName:e.vendorName,orderDate:e.orderDate,totalAmount:e.totalAmount,siteName:e.siteName})),s.append("to",JSON.stringify(t.to)),t.cc&&t.cc.length>0&&s.append("cc",JSON.stringify(t.cc)),s.append("subject",t.subject),t.message&&s.append("message",t.message),s.append("selectedAttachmentIds",JSON.stringify(t.selectedAttachmentIds)),e.attachmentUrls&&e.attachmentUrls.length>0&&(s.append("attachmentUrls",JSON.stringify(e.attachmentUrls)),console.log("📎 첨부파일 URL 추가:",e.attachmentUrls)),t.customFiles.forEach((n,a)=>{s.append("customFiles",n),console.log(`📎 사용자 파일 추가: ${n.name} (${n.size} bytes)`)});const r=await fetch("/api/orders/send-email-with-files",{method:"POST",body:s,credentials:"include"});if(!r.ok){const n=await r.json().catch(()=>({}));throw new Error(n.error||`HTTP ${r.status}: ${r.statusText}`)}return{success:!0,messageId:(await r.json()).messageId}}else{const s={orderData:{orderId:e.orderId,orderNumber:e.orderNumber,vendorName:e.vendorName,orderDate:e.orderDate,totalAmount:e.totalAmount,siteName:e.siteName},to:t.to,cc:t.cc,subject:t.subject,message:t.message,selectedAttachmentIds:t.selectedAttachmentIds,attachmentUrls:e.attachmentUrls,emailSettings:{subject:t.subject,message:t.message,cc:t.cc}};return e.attachmentUrls&&e.attachmentUrls.length>0&&console.log("📎 첨부파일 URL 추가:",e.attachmentUrls),console.log("📧 이메일 API 요청 데이터 (JSON):",s),{success:!0,messageId:(await c("POST","/api/orders/send-email",s)).messageId}}}catch(s){throw console.error("Email send error:",s),new Error("이메일 발송 중 오류가 발생했습니다.")}}static async testEmailConnection(){try{return await c("GET",`${this.BASE_URL}/test-email`)}catch(e){return console.error("Email connection test error:",e),{success:!1,message:"이메일 서버 연결 테스트 실패"}}}static async extractSheets(e,t=["갑지","을지"]){try{return await c("POST",`${this.BASE_URL}/extract-sheets`,{filePath:e,sheets:t})}catch(s){throw console.error("Sheet extraction error:",s),new Error("시트 추출 중 오류가 발생했습니다.")}}static async convertToPDF(e,t){try{return await c("POST",`${this.BASE_URL}/convert-to-pdf`,{excelPath:e,sheets:t})}catch(s){throw console.error("PDF conversion error:",s),new Error("PDF 변환 중 오류가 발생했습니다.")}}static async processComplete(e,t){const s=new FormData;s.append("file",e),Object.entries(t).forEach(([r,o])=>{o!==void 0&&(Array.isArray(o)?s.append(r,o.join(",")):s.append(r,o.toString()))});try{return await c("POST",`${this.BASE_URL}/process-complete`,s)}catch(r){throw console.error("Complete process error:",r),new Error("통합 처리 중 오류가 발생했습니다.")}}};i.BASE_URL="/api/po-template";let m=i;export{m as E};
