var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc17) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc17 = __getOwnPropDesc(from, key)) || desc17.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// shared/schema.ts
var schema_exports = {};
__export(schema_exports, {
  accountStatusEnum: () => accountStatusEnum,
  aiSuggestions: () => aiSuggestions,
  aiSuggestionsRelations: () => aiSuggestionsRelations,
  approvalAuthorities: () => approvalAuthorities,
  approvalStatusEnum: () => approvalStatusEnum,
  approvalStepInstances: () => approvalStepInstances2,
  approvalStepStatusEnum: () => approvalStepStatusEnum,
  approvalStepTemplates: () => approvalStepTemplates,
  approvalWorkflowSettings: () => approvalWorkflowSettings,
  archivedAuditLogs: () => archivedAuditLogs,
  attachments: () => attachments,
  attachmentsRelations: () => attachmentsRelations,
  auditAlertRules: () => auditAlertRules,
  auditAlertRulesRelations: () => auditAlertRulesRelations,
  auditEventTypeEnum: () => auditEventTypeEnum,
  auditLogLevelEnum: () => auditLogLevelEnum,
  auditSettings: () => auditSettings,
  auditSettingsRelations: () => auditSettingsRelations,
  categoryMappings: () => categoryMappings,
  categoryMappingsRelations: () => categoryMappingsRelations,
  companies: () => companies,
  emailSendHistory: () => emailSendHistory,
  emailSendHistoryRelations: () => emailSendHistoryRelations,
  emailSettings: () => emailSettings,
  handsontableConfigs: () => handsontableConfigs,
  handsontableConfigsRelations: () => handsontableConfigsRelations,
  insertAISuggestionSchema: () => insertAISuggestionSchema,
  insertApprovalAuthoritySchema: () => insertApprovalAuthoritySchema,
  insertApprovalStepInstanceSchema: () => insertApprovalStepInstanceSchema,
  insertApprovalStepTemplateSchema: () => insertApprovalStepTemplateSchema,
  insertApprovalWorkflowSettingsSchema: () => insertApprovalWorkflowSettingsSchema,
  insertArchivedAuditLogSchema: () => insertArchivedAuditLogSchema,
  insertAttachmentSchema: () => insertAttachmentSchema,
  insertAuditAlertRuleSchema: () => insertAuditAlertRuleSchema,
  insertAuditSettingsSchema: () => insertAuditSettingsSchema,
  insertCategoryMappingSchema: () => insertCategoryMappingSchema,
  insertCompanySchema: () => insertCompanySchema,
  insertEmailSendHistorySchema: () => insertEmailSendHistorySchema,
  insertEmailSettingsSchema: () => insertEmailSettingsSchema,
  insertHandsontableConfigSchema: () => insertHandsontableConfigSchema,
  insertInvoiceSchema: () => insertInvoiceSchema,
  insertItemCategorySchema: () => insertItemCategorySchema,
  insertItemReceiptSchema: () => insertItemReceiptSchema,
  insertItemSchema: () => insertItemSchema,
  insertOrderHistorySchema: () => insertOrderHistorySchema,
  insertOrderTemplateSchema: () => insertOrderTemplateSchema,
  insertPasswordResetTokenSchema: () => insertPasswordResetTokenSchema,
  insertProjectHistorySchema: () => insertProjectHistorySchema,
  insertProjectMemberSchema: () => insertProjectMemberSchema,
  insertProjectSchema: () => insertProjectSchema,
  insertPurchaseOrderItemSchema: () => insertPurchaseOrderItemSchema,
  insertPurchaseOrderSchema: () => insertPurchaseOrderSchema,
  insertSystemAuditLogSchema: () => insertSystemAuditLogSchema,
  insertTemplateFieldSchema: () => insertTemplateFieldSchema,
  insertTemplateVersionSchema: () => insertTemplateVersionSchema,
  insertTerminologySchema: () => insertTerminologySchema,
  insertUITermSchema: () => insertUITermSchema,
  insertUiTermSchema: () => insertUiTermSchema,
  insertUserRegistrationSchema: () => insertUserRegistrationSchema,
  insertValidationResultSchema: () => insertValidationResultSchema,
  insertValidationSessionSchema: () => insertValidationSessionSchema,
  insertVendorMappingSchema: () => insertVendorMappingSchema,
  insertVendorSchema: () => insertVendorSchema,
  insertVerificationLogSchema: () => insertVerificationLogSchema,
  invoiceStatusEnum: () => invoiceStatusEnum,
  invoices: () => invoices,
  invoicesRelations: () => invoicesRelations,
  itemCategories: () => itemCategories,
  itemCategoriesRelations: () => itemCategoriesRelations,
  itemReceiptStatusEnum: () => itemReceiptStatusEnum,
  itemReceipts: () => itemReceipts,
  itemReceiptsRelations: () => itemReceiptsRelations,
  items: () => items,
  itemsRelations: () => itemsRelations,
  orderHistory: () => orderHistory,
  orderHistoryRelations: () => orderHistoryRelations,
  orderStatusEnum: () => orderStatusEnum,
  orderTemplates: () => orderTemplates,
  orderTemplatesRelations: () => orderTemplatesRelations,
  passwordResetTokens: () => passwordResetTokens,
  passwordResetTokensRelations: () => passwordResetTokensRelations,
  projectHistory: () => projectHistory,
  projectHistoryRelations: () => projectHistoryRelations,
  projectMembers: () => projectMembers,
  projectMembersRelations: () => projectMembersRelations,
  projectStatusEnum: () => projectStatusEnum,
  projectTypeEnum: () => projectTypeEnum,
  projects: () => projects,
  projectsRelations: () => projectsRelations,
  purchaseOrderItems: () => purchaseOrderItems,
  purchaseOrderItemsRelations: () => purchaseOrderItemsRelations,
  purchaseOrderStatusEnum: () => purchaseOrderStatusEnum,
  purchaseOrders: () => purchaseOrders,
  purchaseOrdersRelations: () => purchaseOrdersRelations,
  registrationStatusEnum: () => registrationStatusEnum,
  sessions: () => sessions,
  systemAuditLogs: () => systemAuditLogs,
  systemAuditLogsRelations: () => systemAuditLogsRelations,
  templateFields: () => templateFields,
  templateFieldsRelations: () => templateFieldsRelations,
  templateVersions: () => templateVersions,
  templateVersionsRelations: () => templateVersionsRelations,
  terminology: () => terminology,
  uiTerms: () => uiTerms,
  userRegistrations: () => userRegistrations,
  userRegistrationsRelations: () => userRegistrationsRelations,
  userRoleEnum: () => userRoleEnum,
  users: () => users,
  usersRelations: () => usersRelations,
  validationResults: () => validationResults,
  validationResultsRelations: () => validationResultsRelations,
  validationSessions: () => validationSessions,
  validationSessionsRelations: () => validationSessionsRelations,
  vendorMappings: () => vendorMappings,
  vendorMappingsRelations: () => vendorMappingsRelations,
  vendors: () => vendors,
  vendorsRelations: () => vendorsRelations,
  verificationActionEnum: () => verificationActionEnum,
  verificationLogs: () => verificationLogs,
  verificationLogsRelations: () => verificationLogsRelations
});
import {
  pgTable,
  text,
  varchar,
  timestamp,
  date,
  jsonb,
  index,
  serial,
  integer,
  decimal,
  boolean,
  unique,
  pgEnum
} from "drizzle-orm/pg-core";
import { relations } from "drizzle-orm";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
var sessions, uiTerms, itemCategories, userRoleEnum, purchaseOrderStatusEnum, orderStatusEnum, approvalStatusEnum, projectStatusEnum, projectTypeEnum, invoiceStatusEnum, itemReceiptStatusEnum, verificationActionEnum, approvalStepStatusEnum, emailSettings, approvalAuthorities, accountStatusEnum, users, companies, vendors, items, terminology, projects, projectMembers, projectHistory, orderTemplates, templateFields, handsontableConfigs, templateVersions, purchaseOrders, purchaseOrderItems, attachments, orderHistory, emailSendHistory, invoices, itemReceipts, verificationLogs, usersRelations, vendorsRelations, itemsRelations, projectsRelations, projectMembersRelations, projectHistoryRelations, orderTemplatesRelations, purchaseOrdersRelations, purchaseOrderItemsRelations, attachmentsRelations, orderHistoryRelations, invoicesRelations, itemReceiptsRelations, verificationLogsRelations, templateFieldsRelations, handsontableConfigsRelations, templateVersionsRelations, itemCategoriesRelations, emailSendHistoryRelations, insertCompanySchema, insertVendorSchema, insertItemSchema, insertProjectSchema, insertOrderTemplateSchema, insertItemCategorySchema, insertPurchaseOrderSchema, insertPurchaseOrderItemSchema, insertAttachmentSchema, insertOrderHistorySchema, insertInvoiceSchema, insertItemReceiptSchema, insertVerificationLogSchema, insertEmailSendHistorySchema, insertTemplateFieldSchema, insertHandsontableConfigSchema, insertTemplateVersionSchema, insertProjectMemberSchema, insertProjectHistorySchema, insertUiTermSchema, insertTerminologySchema, insertUITermSchema, insertApprovalAuthoritySchema, approvalWorkflowSettings, approvalStepTemplates, approvalStepInstances2, insertApprovalWorkflowSettingsSchema, insertApprovalStepTemplateSchema, insertApprovalStepInstanceSchema, auditLogLevelEnum, auditEventTypeEnum, systemAuditLogs, auditSettings, archivedAuditLogs, auditAlertRules, systemAuditLogsRelations, auditSettingsRelations, auditAlertRulesRelations, insertSystemAuditLogSchema, insertAuditSettingsSchema, insertArchivedAuditLogSchema, insertAuditAlertRuleSchema, validationSessions, validationResults, aiSuggestions, vendorMappings, categoryMappings, validationSessionsRelations, validationResultsRelations, aiSuggestionsRelations, vendorMappingsRelations, categoryMappingsRelations, insertValidationSessionSchema, insertValidationResultSchema, insertAISuggestionSchema, insertVendorMappingSchema, insertCategoryMappingSchema, insertEmailSettingsSchema, registrationStatusEnum, userRegistrations, passwordResetTokens, userRegistrationsRelations, passwordResetTokensRelations, insertUserRegistrationSchema, insertPasswordResetTokenSchema;
var init_schema = __esm({
  "shared/schema.ts"() {
    "use strict";
    sessions = pgTable(
      "sessions",
      {
        sid: varchar("sid").primaryKey(),
        sess: jsonb("sess").notNull(),
        expire: timestamp("expire").notNull()
      },
      (table) => [index("IDX_session_expire").on(table.expire)]
    );
    uiTerms = pgTable("ui_terms", {
      id: serial("id").primaryKey(),
      termKey: varchar("term_key", { length: 100 }).notNull().unique(),
      termValue: varchar("term_value", { length: 255 }).notNull(),
      category: varchar("category", { length: 50 }).default("general"),
      description: text("description"),
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    itemCategories = pgTable("item_categories", {
      id: serial("id").primaryKey(),
      categoryType: varchar("category_type", { length: 20 }).notNull(),
      // 'major', 'middle', 'minor'
      categoryName: varchar("category_name", { length: 100 }).notNull(),
      parentId: integer("parent_id"),
      // References parent category ID
      displayOrder: integer("display_order").default(0),
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    }, (table) => [
      index("idx_item_categories_type").on(table.categoryType),
      index("idx_item_categories_parent").on(table.parentId)
    ]);
    userRoleEnum = pgEnum("user_role", ["field_worker", "project_manager", "hq_management", "executive", "admin"]);
    purchaseOrderStatusEnum = pgEnum("purchase_order_status", ["draft", "pending", "approved", "sent", "completed"]);
    orderStatusEnum = pgEnum("order_status", ["draft", "created", "sent", "delivered"]);
    approvalStatusEnum = pgEnum("approval_status", ["not_required", "pending", "approved", "rejected"]);
    projectStatusEnum = pgEnum("project_status", ["planning", "active", "on_hold", "completed", "cancelled"]);
    projectTypeEnum = pgEnum("project_type", ["commercial", "residential", "industrial", "infrastructure"]);
    invoiceStatusEnum = pgEnum("invoice_status", ["pending", "verified", "paid"]);
    itemReceiptStatusEnum = pgEnum("item_receipt_status", ["pending", "approved", "rejected"]);
    verificationActionEnum = pgEnum("verification_action", ["invoice_uploaded", "item_verified", "quality_checked"]);
    approvalStepStatusEnum = pgEnum("approval_step_status", ["pending", "approved", "rejected", "skipped"]);
    emailSettings = pgTable("email_settings", {
      id: serial("id").primaryKey(),
      smtpHost: varchar("smtp_host", { length: 255 }).notNull(),
      smtpPort: integer("smtp_port").notNull().default(587),
      smtpUser: varchar("smtp_user", { length: 255 }).notNull(),
      smtpPass: text("smtp_pass").notNull(),
      // 암호화된 비밀번호 저장
      fromName: varchar("from_name", { length: 100 }),
      isActive: boolean("is_active").default(true),
      isDefault: boolean("is_default").default(false),
      // 기본 설정 여부
      description: text("description"),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow(),
      createdBy: varchar("created_by"),
      // 설정 생성자
      lastTestedAt: timestamp("last_tested_at"),
      // 마지막 테스트 시간
      testResult: jsonb("test_result")
      // 테스트 결과 저장
    }, (table) => [
      index("idx_email_settings_active").on(table.isActive),
      index("idx_email_settings_default").on(table.isDefault)
    ]);
    approvalAuthorities = pgTable("approval_authorities", {
      id: serial("id").primaryKey(),
      role: userRoleEnum("role").notNull(),
      maxAmount: decimal("max_amount", { precision: 15, scale: 2 }).notNull(),
      description: text("description"),
      isActive: boolean("is_active").default(true),
      canDirectApprove: boolean("can_direct_approve").default(false),
      // 직접 승인 가능 여부
      directApproveLimit: decimal("direct_approve_limit", { precision: 15, scale: 2 }),
      // 직접 승인 한도
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    }, (table) => [
      unique("unique_role_approval").on(table.role)
    ]);
    accountStatusEnum = pgEnum("account_status", ["active", "pending", "suspended", "inactive"]);
    users = pgTable("users", {
      id: varchar("id").primaryKey().notNull(),
      email: varchar("email").unique().notNull(),
      name: varchar("name").notNull(),
      password: varchar("hashed_password").notNull(),
      // Match actual database column name
      phoneNumber: varchar("phone_number"),
      profileImageUrl: varchar("profile_image_url"),
      role: userRoleEnum("role").notNull().default("field_worker"),
      position: varchar("position"),
      // Add position field that exists in DB
      accountStatus: accountStatusEnum("account_status").default("active"),
      // Account status management
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    }, (table) => [
      index("idx_users_email").on(table.email),
      index("idx_users_role").on(table.role),
      index("idx_users_account_status").on(table.accountStatus)
    ]);
    companies = pgTable("companies", {
      id: serial("id").primaryKey(),
      companyName: varchar("company_name", { length: 255 }).notNull(),
      businessNumber: varchar("business_number", { length: 50 }),
      representative: varchar("representative", { length: 100 }),
      // 대표자명
      address: text("address"),
      contactPerson: varchar("contact_person", { length: 100 }),
      // Match actual DB schema
      phone: varchar("phone", { length: 50 }),
      email: varchar("email", { length: 255 }),
      fax: varchar("fax", { length: 50 }),
      // 팩스번호
      website: varchar("website", { length: 255 }),
      // 웹사이트
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    vendors = pgTable("vendors", {
      id: serial("id").primaryKey(),
      name: varchar("name", { length: 255 }).notNull(),
      vendorCode: varchar("vendor_code", { length: 50 }),
      // 거래처 코드
      aliases: jsonb("aliases").default([]).$type(),
      // 별칭 필드 추가 - 예: ["(주)익진", "주식회사 익진", "익진"]
      businessNumber: varchar("business_number", { length: 50 }),
      contactPerson: varchar("contact_person", { length: 100 }).notNull(),
      email: varchar("email", { length: 255 }).notNull(),
      phone: varchar("phone", { length: 50 }),
      address: text("address"),
      businessType: varchar("business_type", { length: 100 }),
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    }, (table) => [
      index("idx_vendors_name").on(table.name),
      index("idx_vendors_business_number").on(table.businessNumber),
      index("idx_vendors_email").on(table.email),
      index("idx_vendors_active").on(table.isActive)
    ]);
    items = pgTable("items", {
      id: serial("id").primaryKey(),
      name: varchar("name", { length: 255 }).notNull(),
      specification: text("specification"),
      unit: varchar("unit", { length: 50 }).notNull(),
      unitPrice: decimal("unit_price", { precision: 15, scale: 2 }),
      category: varchar("category", { length: 100 }),
      majorCategory: varchar("major_category", { length: 100 }),
      middleCategory: varchar("middle_category", { length: 100 }),
      minorCategory: varchar("minor_category", { length: 100 }),
      description: text("description"),
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    }, (table) => [
      index("idx_items_name").on(table.name),
      index("idx_items_category").on(table.category),
      index("idx_items_active").on(table.isActive)
    ]);
    terminology = pgTable("terminology", {
      id: serial("id").primaryKey(),
      termKey: varchar("term_key", { length: 100 }).notNull().unique(),
      termValue: varchar("term_value", { length: 255 }).notNull(),
      category: varchar("category", { length: 100 }),
      description: text("description"),
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    }, (table) => [
      index("idx_terminology_key").on(table.termKey),
      index("idx_terminology_category").on(table.category),
      index("idx_terminology_active").on(table.isActive)
    ]);
    projects = pgTable("projects", {
      id: serial("id").primaryKey(),
      projectName: varchar("project_name", { length: 255 }).notNull(),
      projectCode: varchar("project_code", { length: 100 }).notNull().unique(),
      clientName: varchar("client_name", { length: 255 }),
      projectType: projectTypeEnum("project_type").notNull().default("commercial"),
      location: text("location"),
      startDate: date("start_date"),
      endDate: date("end_date"),
      status: projectStatusEnum("status").notNull().default("active"),
      totalBudget: decimal("total_budget", { precision: 15, scale: 2 }),
      projectManagerId: varchar("project_manager_id").references(() => users.id),
      orderManagerId: varchar("order_manager_id").references(() => users.id),
      description: text("description"),
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    }, (table) => [
      index("idx_projects_name").on(table.projectName),
      index("idx_projects_code").on(table.projectCode),
      index("idx_projects_status").on(table.status),
      index("idx_projects_start_date").on(table.startDate),
      index("idx_projects_active").on(table.isActive),
      index("idx_projects_manager").on(table.projectManagerId)
    ]);
    projectMembers = pgTable("project_members", {
      id: serial("id").primaryKey(),
      projectId: integer("project_id").references(() => projects.id, { onDelete: "cascade" }).notNull(),
      userId: varchar("user_id").references(() => users.id, { onDelete: "cascade" }).notNull(),
      role: varchar("role", { length: 50 }).notNull(),
      // 'manager', 'order_manager', 'member', 'viewer'
      assignedAt: timestamp("assigned_at").defaultNow(),
      assignedBy: varchar("assigned_by").references(() => users.id),
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    }, (table) => [
      unique("project_members_project_user_unique").on(table.projectId, table.userId)
    ]);
    projectHistory = pgTable("project_history", {
      id: serial("id").primaryKey(),
      projectId: integer("project_id").references(() => projects.id, { onDelete: "cascade" }).notNull(),
      fieldName: varchar("field_name", { length: 100 }).notNull(),
      oldValue: text("old_value"),
      newValue: text("new_value"),
      changedBy: varchar("changed_by").references(() => users.id).notNull(),
      changedAt: timestamp("changed_at").defaultNow(),
      changeReason: text("change_reason")
    });
    orderTemplates = pgTable("order_templates", {
      id: serial("id").primaryKey(),
      templateName: varchar("template_name", { length: 100 }).notNull(),
      templateType: varchar("template_type", { length: 50 }).notNull(),
      // material_extrusion, panel_manufacturing, general, handsontable
      // fieldsConfig: jsonb("fields_config").notNull(), // TODO: Add this column to database
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    templateFields = pgTable("template_fields", {
      id: serial("id").primaryKey(),
      templateId: integer("template_id").references(() => orderTemplates.id, { onDelete: "cascade" }),
      fieldType: varchar("field_type", { length: 50 }).notNull(),
      // 'text', 'number', 'select', 'date', 'textarea'
      fieldName: varchar("field_name", { length: 100 }).notNull(),
      label: varchar("label", { length: 255 }).notNull(),
      placeholder: varchar("placeholder", { length: 255 }),
      required: boolean("required").default(false),
      validation: jsonb("validation"),
      // JSON validation rules
      options: jsonb("options"),
      // For select fields
      gridPosition: jsonb("grid_position").notNull(),
      // {row, col, span}
      sectionName: varchar("section_name", { length: 100 }).notNull(),
      sortOrder: integer("sort_order").default(0),
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    handsontableConfigs = pgTable("handsontable_configs", {
      id: serial("id").primaryKey(),
      templateId: integer("template_id").references(() => orderTemplates.id, { onDelete: "cascade" }),
      colHeaders: jsonb("col_headers").notNull(),
      // Array of column headers
      columns: jsonb("columns").notNull(),
      // Column configurations
      rowsCount: integer("rows_count").default(10),
      formulas: jsonb("formulas"),
      // Formula definitions
      validationRules: jsonb("validation_rules"),
      // Cell validation rules
      customStyles: jsonb("custom_styles"),
      // Styling rules
      settings: jsonb("settings"),
      // Additional Handsontable settings
      sortOrder: integer("sort_order").default(0),
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    templateVersions = pgTable("template_versions", {
      id: serial("id").primaryKey(),
      templateId: integer("template_id").references(() => orderTemplates.id, { onDelete: "cascade" }),
      versionNumber: varchar("version_number", { length: 20 }).notNull(),
      changes: jsonb("changes"),
      // Changelog
      templateConfig: jsonb("template_config").notNull(),
      // Snapshot of template at this version
      createdBy: varchar("created_by", { length: 255 }),
      createdAt: timestamp("created_at").defaultNow()
    });
    purchaseOrders = pgTable("purchase_orders", {
      id: serial("id").primaryKey(),
      orderNumber: varchar("order_number", { length: 50 }).notNull().unique(),
      projectId: integer("project_id").references(() => projects.id).notNull(),
      vendorId: integer("vendor_id").references(() => vendors.id),
      userId: varchar("user_id").references(() => users.id).notNull(),
      templateId: integer("template_id").references(() => orderTemplates.id),
      orderDate: date("order_date").notNull(),
      deliveryDate: date("delivery_date"),
      // DEPRECATED: 기존 status 필드 - 하위 호환성만을 위해 유지, 새 코드에서는 orderStatus/approvalStatus 사용
      status: purchaseOrderStatusEnum("status").notNull().default("pending"),
      // 새로운 이중 상태 시스템 필드
      orderStatus: orderStatusEnum("order_status").default("draft"),
      approvalStatus: approvalStatusEnum("approval_status").default("not_required"),
      approvalBypassReason: text("approval_bypass_reason"),
      nextApproverId: varchar("next_approver_id").references(() => users.id),
      approvalRequestedAt: timestamp("approval_requested_at"),
      // 납품 관련 필드
      deliveredAt: timestamp("delivered_at"),
      deliveredBy: varchar("delivered_by").references(() => users.id),
      totalAmount: decimal("total_amount", { precision: 15, scale: 2 }).default("0").$type(),
      notes: text("notes"),
      // customFields: jsonb("custom_fields"), // TODO: Add this column to database
      isApproved: boolean("is_approved").default(false),
      approvedBy: varchar("approved_by").references(() => users.id),
      approvedAt: timestamp("approved_at"),
      // sentAt: timestamp("sent_at"), // TODO: Add this column to database
      currentApproverRole: userRoleEnum("current_approver_role"),
      approvalLevel: integer("approval_level").default(1),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    }, (table) => [
      index("idx_purchase_orders_number").on(table.orderNumber),
      index("idx_purchase_orders_project").on(table.projectId),
      index("idx_purchase_orders_vendor").on(table.vendorId),
      index("idx_purchase_orders_user").on(table.userId),
      index("idx_purchase_orders_status").on(table.status),
      index("idx_purchase_orders_date").on(table.orderDate),
      index("idx_purchase_orders_delivery").on(table.deliveryDate),
      index("idx_purchase_orders_created").on(table.createdAt),
      index("idx_purchase_orders_approver").on(table.currentApproverRole)
    ]);
    purchaseOrderItems = pgTable("purchase_order_items", {
      id: serial("id").primaryKey(),
      orderId: integer("order_id").references(() => purchaseOrders.id).notNull(),
      // itemId: integer("item_id").references(() => items.id), // TODO: Add this column to database
      itemName: varchar("item_name", { length: 255 }).notNull(),
      specification: text("specification"),
      unit: varchar("unit", { length: 50 }),
      // 실제 DB에 있는 컬럼, NULL 허용
      quantity: decimal("quantity", { precision: 10, scale: 2 }).notNull().$type(),
      unitPrice: decimal("unit_price", { precision: 15, scale: 2 }).notNull().$type(),
      totalAmount: decimal("total_amount", { precision: 15, scale: 2 }).notNull().$type(),
      // 품목 계층 구조 필드 (2025-08-05 추가)
      majorCategory: varchar("major_category", { length: 100 }),
      middleCategory: varchar("middle_category", { length: 100 }),
      minorCategory: varchar("minor_category", { length: 100 }),
      // PO Template Input 시트를 위한 새로운 필드들 (TODO: Add these columns to database)
      // categoryLv1: varchar("category_lv1", { length: 100 }), // 대분류
      // categoryLv2: varchar("category_lv2", { length: 100 }), // 중분류  
      // categoryLv3: varchar("category_lv3", { length: 100 }), // 소분류
      // supplyAmount: decimal("supply_amount", { precision: 15, scale: 2 }).default("0").notNull().$type<number>(), // TODO: Add to DB
      // taxAmount: decimal("tax_amount", { precision: 15, scale: 2 }).default("0").notNull().$type<number>(), // TODO: Add to DB  
      // deliveryName: varchar("delivery_name", { length: 255 }), // TODO: Add to DB
      notes: text("notes"),
      createdAt: timestamp("created_at").defaultNow()
    }, (table) => [
      index("idx_poi_major_category").on(table.majorCategory),
      index("idx_poi_middle_category").on(table.middleCategory),
      index("idx_poi_minor_category").on(table.minorCategory),
      index("idx_poi_category_hierarchy").on(table.majorCategory, table.middleCategory, table.minorCategory)
      // index("idx_purchase_order_items_category_lv1").on(table.categoryLv1), // TODO: Add when column is added
      // index("idx_purchase_order_items_category_lv2").on(table.categoryLv2), // TODO: Add when column is added
      // index("idx_purchase_order_items_category_lv3").on(table.categoryLv3), // TODO: Add when column is added
    ]);
    attachments = pgTable("attachments", {
      id: serial("id").primaryKey(),
      orderId: integer("order_id").references(() => purchaseOrders.id).notNull(),
      originalName: varchar("original_name", { length: 255 }).notNull(),
      storedName: varchar("stored_name", { length: 255 }).notNull(),
      filePath: varchar("file_path", { length: 500 }).notNull(),
      fileSize: integer("file_size"),
      mimeType: varchar("mime_type", { length: 100 }),
      uploadedBy: varchar("uploaded_by", { length: 50 }),
      uploadedAt: timestamp("uploaded_at").defaultNow(),
      fileData: text("file_data")
      // Base64 encoded PDF data for Vercel/cloud storage
    });
    orderHistory = pgTable("order_history", {
      id: serial("id").primaryKey(),
      orderId: integer("order_id").references(() => purchaseOrders.id).notNull(),
      userId: varchar("user_id").references(() => users.id).notNull(),
      action: varchar("action", { length: 100 }).notNull(),
      // created, updated, approved, sent, etc.
      changes: jsonb("changes"),
      // Store what changed
      createdAt: timestamp("created_at").defaultNow()
    });
    emailSendHistory = pgTable("email_sending_history", {
      id: serial("id").primaryKey(),
      orderId: integer("order_id").references(() => purchaseOrders.id, { onDelete: "cascade" }),
      orderNumber: varchar("order_number", { length: 255 }),
      senderUserId: varchar("sender_user_id", { length: 255 }).references(() => users.id),
      recipients: jsonb("recipients"),
      cc: jsonb("cc"),
      bcc: jsonb("bcc"),
      subject: text("subject").notNull(),
      messageContent: text("message_content"),
      attachmentFiles: jsonb("attachment_files"),
      status: varchar("sending_status", { length: 50 }).default("pending"),
      sentCount: integer("sent_count").default(0),
      failedCount: integer("failed_count").default(0),
      errorMessage: text("error_message"),
      sentAt: timestamp("sent_at"),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    }, (table) => [
      index("idx_email_history_order").on(table.orderId),
      index("idx_email_history_sender").on(table.senderUserId),
      index("idx_email_history_status").on(table.status),
      index("idx_email_history_sent_at").on(table.sentAt)
    ]);
    invoices = pgTable("invoices", {
      id: serial("id").primaryKey(),
      orderId: integer("order_id").notNull().references(() => purchaseOrders.id, { onDelete: "cascade" }),
      invoiceNumber: varchar("invoice_number", { length: 100 }).notNull().unique(),
      invoiceType: varchar("invoice_type", { length: 20 }).notNull(),
      // 'invoice' or 'tax_invoice'
      issueDate: timestamp("issue_date").notNull(),
      dueDate: timestamp("due_date"),
      totalAmount: decimal("total_amount", { precision: 15, scale: 2 }).notNull().$type(),
      vatAmount: decimal("vat_amount", { precision: 15, scale: 2 }).default("0").$type(),
      status: invoiceStatusEnum("status").notNull().default("pending"),
      filePath: varchar("file_path", { length: 500 }),
      // 청구서 파일 경로
      uploadedBy: varchar("uploaded_by").notNull().references(() => users.id),
      verifiedBy: varchar("verified_by").references(() => users.id),
      verifiedAt: timestamp("verified_at"),
      taxInvoiceIssued: boolean("tax_invoice_issued").default(false),
      // 세금계산서 발행 여부
      taxInvoiceIssuedDate: timestamp("tax_invoice_issued_date"),
      // 세금계산서 발행일
      taxInvoiceIssuedBy: varchar("tax_invoice_issued_by").references(() => users.id),
      // 세금계산서 발행자
      notes: text("notes"),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    itemReceipts = pgTable("item_receipts", {
      id: serial("id").primaryKey(),
      orderItemId: integer("order_item_id").notNull().references(() => purchaseOrderItems.id, { onDelete: "cascade" }),
      invoiceId: integer("invoice_id").references(() => invoices.id, { onDelete: "set null" }),
      receivedQuantity: decimal("received_quantity", { precision: 10, scale: 2 }).notNull().$type(),
      receivedDate: timestamp("received_date").notNull(),
      qualityCheck: boolean("quality_check").default(false),
      qualityNotes: text("quality_notes"),
      verifiedBy: varchar("verified_by").notNull().references(() => users.id),
      status: itemReceiptStatusEnum("status").notNull().default("pending"),
      notes: text("notes"),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    verificationLogs = pgTable("verification_logs", {
      id: serial("id").primaryKey(),
      orderId: integer("order_id").notNull().references(() => purchaseOrders.id, { onDelete: "cascade" }),
      invoiceId: integer("invoice_id").references(() => invoices.id, { onDelete: "set null" }),
      itemReceiptId: integer("item_receipt_id").references(() => itemReceipts.id, { onDelete: "set null" }),
      action: verificationActionEnum("action").notNull(),
      details: text("details"),
      performedBy: varchar("performed_by").notNull().references(() => users.id),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    usersRelations = relations(users, ({ many }) => ({
      purchaseOrders: many(purchaseOrders),
      orderHistory: many(orderHistory),
      emailsSent: many(emailSendHistory)
    }));
    vendorsRelations = relations(vendors, ({ many }) => ({
      purchaseOrders: many(purchaseOrders)
    }));
    itemsRelations = relations(items, ({ many }) => ({
      purchaseOrderItems: many(purchaseOrderItems)
    }));
    projectsRelations = relations(projects, ({ one, many }) => ({
      purchaseOrders: many(purchaseOrders),
      projectManager: one(users, {
        fields: [projects.projectManagerId],
        references: [users.id]
      }),
      orderManager: one(users, {
        fields: [projects.orderManagerId],
        references: [users.id]
      }),
      projectMembers: many(projectMembers),
      projectHistory: many(projectHistory)
    }));
    projectMembersRelations = relations(projectMembers, ({ one }) => ({
      project: one(projects, {
        fields: [projectMembers.projectId],
        references: [projects.id]
      }),
      user: one(users, {
        fields: [projectMembers.userId],
        references: [users.id]
      }),
      assignedByUser: one(users, {
        fields: [projectMembers.assignedBy],
        references: [users.id]
      })
    }));
    projectHistoryRelations = relations(projectHistory, ({ one }) => ({
      project: one(projects, {
        fields: [projectHistory.projectId],
        references: [projects.id]
      }),
      changedByUser: one(users, {
        fields: [projectHistory.changedBy],
        references: [users.id]
      })
    }));
    orderTemplatesRelations = relations(orderTemplates, ({ many }) => ({
      fields: many(templateFields),
      handsontableConfig: many(handsontableConfigs),
      versions: many(templateVersions),
      orders: many(purchaseOrders)
    }));
    purchaseOrdersRelations = relations(purchaseOrders, ({ one, many }) => ({
      project: one(projects, {
        fields: [purchaseOrders.projectId],
        references: [projects.id]
      }),
      vendor: one(vendors, {
        fields: [purchaseOrders.vendorId],
        references: [vendors.id]
      }),
      user: one(users, {
        fields: [purchaseOrders.userId],
        references: [users.id]
      }),
      template: one(orderTemplates, {
        fields: [purchaseOrders.templateId],
        references: [orderTemplates.id]
      }),
      approver: one(users, {
        fields: [purchaseOrders.approvedBy],
        references: [users.id]
      }),
      items: many(purchaseOrderItems),
      attachments: many(attachments),
      history: many(orderHistory),
      invoices: many(invoices),
      verificationLogs: many(verificationLogs),
      emailHistory: many(emailSendHistory)
    }));
    purchaseOrderItemsRelations = relations(purchaseOrderItems, ({ one, many }) => ({
      order: one(purchaseOrders, {
        fields: [purchaseOrderItems.orderId],
        references: [purchaseOrders.id]
      }),
      receipts: many(itemReceipts)
    }));
    attachmentsRelations = relations(attachments, ({ one }) => ({
      order: one(purchaseOrders, {
        fields: [attachments.orderId],
        references: [purchaseOrders.id]
      })
    }));
    orderHistoryRelations = relations(orderHistory, ({ one }) => ({
      order: one(purchaseOrders, {
        fields: [orderHistory.orderId],
        references: [purchaseOrders.id]
      }),
      user: one(users, {
        fields: [orderHistory.userId],
        references: [users.id]
      })
    }));
    invoicesRelations = relations(invoices, ({ one, many }) => ({
      order: one(purchaseOrders, {
        fields: [invoices.orderId],
        references: [purchaseOrders.id]
      }),
      receipts: many(itemReceipts),
      verificationLogs: many(verificationLogs)
    }));
    itemReceiptsRelations = relations(itemReceipts, ({ one, many }) => ({
      orderItem: one(purchaseOrderItems, {
        fields: [itemReceipts.orderItemId],
        references: [purchaseOrderItems.id]
      }),
      invoice: one(invoices, {
        fields: [itemReceipts.invoiceId],
        references: [invoices.id]
      }),
      verificationLogs: many(verificationLogs)
    }));
    verificationLogsRelations = relations(verificationLogs, ({ one }) => ({
      order: one(purchaseOrders, {
        fields: [verificationLogs.orderId],
        references: [purchaseOrders.id]
      }),
      invoice: one(invoices, {
        fields: [verificationLogs.invoiceId],
        references: [invoices.id]
      }),
      itemReceipt: one(itemReceipts, {
        fields: [verificationLogs.itemReceiptId],
        references: [itemReceipts.id]
      })
    }));
    templateFieldsRelations = relations(templateFields, ({ one }) => ({
      template: one(orderTemplates, {
        fields: [templateFields.templateId],
        references: [orderTemplates.id]
      })
    }));
    handsontableConfigsRelations = relations(handsontableConfigs, ({ one }) => ({
      template: one(orderTemplates, {
        fields: [handsontableConfigs.templateId],
        references: [orderTemplates.id]
      })
    }));
    templateVersionsRelations = relations(templateVersions, ({ one }) => ({
      template: one(orderTemplates, {
        fields: [templateVersions.templateId],
        references: [orderTemplates.id]
      })
    }));
    itemCategoriesRelations = relations(itemCategories, ({ one, many }) => ({
      parent: one(itemCategories, {
        fields: [itemCategories.parentId],
        references: [itemCategories.id]
      }),
      children: many(itemCategories)
    }));
    emailSendHistoryRelations = relations(emailSendHistory, ({ one }) => ({
      order: one(purchaseOrders, {
        fields: [emailSendHistory.orderId],
        references: [purchaseOrders.id]
      }),
      senderUser: one(users, {
        fields: [emailSendHistory.senderUserId],
        references: [users.id]
      })
    }));
    insertCompanySchema = createInsertSchema(companies).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertVendorSchema = createInsertSchema(vendors).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertItemSchema = createInsertSchema(items).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertProjectSchema = createInsertSchema(projects).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertOrderTemplateSchema = createInsertSchema(orderTemplates).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertItemCategorySchema = createInsertSchema(itemCategories).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertPurchaseOrderSchema = createInsertSchema(purchaseOrders).omit({
      id: true,
      createdAt: true,
      updatedAt: true,
      orderNumber: true,
      userId: true,
      isApproved: true,
      approvedBy: true,
      approvedAt: true
    }).extend({
      userId: z.string().min(1),
      templateId: z.number().nullable().optional(),
      totalAmount: z.number().positive(),
      customFields: z.record(z.any()).optional(),
      items: z.array(z.object({
        itemName: z.string().min(1),
        specification: z.string().nullable().optional(),
        quantity: z.number().positive(),
        unitPrice: z.number().positive(),
        totalAmount: z.number().positive(),
        notes: z.string().nullable().optional(),
        // Category fields (added to fix category data loss)
        majorCategory: z.string().nullable().optional(),
        middleCategory: z.string().nullable().optional(),
        minorCategory: z.string().nullable().optional()
      }))
    });
    insertPurchaseOrderItemSchema = createInsertSchema(purchaseOrderItems).omit({
      id: true,
      createdAt: true
    }).extend({
      supplyAmount: z.number().nonnegative().optional(),
      taxAmount: z.number().nonnegative().optional()
    });
    insertAttachmentSchema = createInsertSchema(attachments).omit({
      id: true,
      uploadedAt: true
    });
    insertOrderHistorySchema = createInsertSchema(orderHistory).omit({
      id: true,
      createdAt: true
    });
    insertInvoiceSchema = createInsertSchema(invoices).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    }).extend({
      totalAmount: z.union([z.string(), z.number()]).transform((val) => String(val)),
      vatAmount: z.union([z.string(), z.number()]).transform((val) => String(val))
    });
    insertItemReceiptSchema = createInsertSchema(itemReceipts).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    }).extend({
      receivedQuantity: z.union([z.string(), z.number()]).transform((val) => Number(val)),
      receivedDate: z.union([z.string(), z.date()]).transform((val) => new Date(val))
    });
    insertVerificationLogSchema = createInsertSchema(verificationLogs).omit({
      id: true,
      createdAt: true
    });
    insertEmailSendHistorySchema = createInsertSchema(emailSendHistory).omit({
      id: true,
      sentAt: true,
      createdAt: true
    }).extend({
      ccEmails: z.string().nullable().optional(),
      attachments: z.array(z.object({
        filename: z.string(),
        path: z.string(),
        size: z.number()
      })).nullable().optional()
    });
    insertTemplateFieldSchema = createInsertSchema(templateFields).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertHandsontableConfigSchema = createInsertSchema(handsontableConfigs).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertTemplateVersionSchema = createInsertSchema(templateVersions).omit({
      id: true,
      createdAt: true
    });
    insertProjectMemberSchema = createInsertSchema(projectMembers).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertProjectHistorySchema = createInsertSchema(projectHistory).omit({
      id: true,
      changedAt: true
    });
    insertUiTermSchema = createInsertSchema(uiTerms);
    insertTerminologySchema = createInsertSchema(terminology).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertUITermSchema = createInsertSchema(uiTerms).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertApprovalAuthoritySchema = createInsertSchema(approvalAuthorities).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    approvalWorkflowSettings = pgTable("approval_workflow_settings", {
      id: serial("id").primaryKey(),
      companyId: integer("company_id").references(() => companies.id),
      approvalMode: varchar("approval_mode", { length: 20 }).notNull().default("staged"),
      // 'direct' or 'staged'
      directApprovalRoles: jsonb("direct_approval_roles").default([]).$type(),
      // roles that can approve directly
      stagedApprovalThresholds: jsonb("staged_approval_thresholds").default({}).$type(),
      requireAllStages: boolean("require_all_stages").default(true),
      // whether all stages must approve
      skipLowerStages: boolean("skip_lower_stages").default(false),
      // whether higher roles can skip lower stages
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow().$onUpdate(() => /* @__PURE__ */ new Date()),
      createdBy: varchar("created_by", { length: 255 }).references(() => users.id)
    }, (table) => ({
      companyIdx: index("idx_approval_workflow_company").on(table.companyId),
      activeIdx: index("idx_approval_workflow_active").on(table.isActive)
    }));
    approvalStepTemplates = pgTable("approval_step_templates", {
      id: serial("id").primaryKey(),
      templateName: varchar("template_name", { length: 100 }).notNull(),
      companyId: integer("company_id").references(() => companies.id),
      stepOrder: integer("step_order").notNull(),
      requiredRole: userRoleEnum("required_role").notNull(),
      minAmount: decimal("min_amount", { precision: 15, scale: 2 }).default("0"),
      maxAmount: decimal("max_amount", { precision: 15, scale: 2 }),
      isOptional: boolean("is_optional").default(false),
      canSkip: boolean("can_skip").default(false),
      // can be skipped by higher authority
      description: text("description"),
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow().$onUpdate(() => /* @__PURE__ */ new Date())
    }, (table) => ({
      templateCompanyIdx: index("idx_approval_step_template_company").on(table.companyId),
      templateOrderIdx: index("idx_approval_step_order").on(table.templateName, table.stepOrder)
    }));
    approvalStepInstances2 = pgTable("approval_step_instances", {
      id: serial("id").primaryKey(),
      orderId: integer("order_id").references(() => purchaseOrders.id).notNull(),
      templateId: integer("template_id").references(() => approvalStepTemplates.id),
      stepOrder: integer("step_order").notNull(),
      requiredRole: userRoleEnum("required_role").notNull(),
      assignedUserId: varchar("assigned_user_id", { length: 255 }).references(() => users.id),
      status: approvalStepStatusEnum("status").default("pending"),
      approvedBy: varchar("approved_by", { length: 255 }).references(() => users.id),
      approvedAt: timestamp("approved_at"),
      rejectionReason: text("rejection_reason"),
      comments: text("comments"),
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow().$onUpdate(() => /* @__PURE__ */ new Date())
    }, (table) => ({
      orderIdx: index("idx_approval_step_instance_order").on(table.orderId),
      statusIdx: index("idx_approval_step_instance_status").on(table.status),
      assignedUserIdx: index("idx_approval_step_instance_user").on(table.assignedUserId)
    }));
    insertApprovalWorkflowSettingsSchema = createInsertSchema(approvalWorkflowSettings).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertApprovalStepTemplateSchema = createInsertSchema(approvalStepTemplates).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertApprovalStepInstanceSchema = createInsertSchema(approvalStepInstances2).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    auditLogLevelEnum = pgEnum("audit_log_level", ["OFF", "ERROR", "WARNING", "INFO", "DEBUG"]);
    auditEventTypeEnum = pgEnum("audit_event_type", [
      "login",
      "logout",
      "login_failed",
      "session_expired",
      "password_change",
      "permission_change",
      "data_create",
      "data_read",
      "data_update",
      "data_delete",
      "data_export",
      "approval_request",
      "approval_grant",
      "approval_reject",
      "email_send",
      "file_upload",
      "file_download",
      "settings_change",
      "security_alert",
      "api_access",
      "error"
    ]);
    systemAuditLogs = pgTable("system_audit_logs", {
      id: serial("id").primaryKey(),
      userId: varchar("user_id").references(() => users.id),
      // NULL for system events
      userName: varchar("user_name", { length: 255 }),
      // Denormalized for performance
      userRole: varchar("user_role", { length: 50 }),
      // Denormalized for performance
      eventType: auditEventTypeEnum("event_type").notNull(),
      eventCategory: varchar("event_category", { length: 50 }).notNull(),
      // 'auth', 'data', 'system', 'security'
      entityType: varchar("entity_type", { length: 50 }),
      // 'order', 'user', 'vendor', 'project', etc.
      entityId: varchar("entity_id", { length: 100 }),
      // ID of affected entity
      action: varchar("action", { length: 255 }).notNull(),
      // Detailed action description
      tableName: varchar("table_name", { length: 100 }),
      // Database table affected
      additionalDetails: jsonb("additional_details"),
      // Additional event details
      oldData: jsonb("old_data"),
      // Previous state (for updates)
      newData: jsonb("new_data"),
      // New state (for updates)
      ipAddress: varchar("ip_address", { length: 50 }),
      userAgent: text("user_agent"),
      sessionId: varchar("session_id", { length: 255 }),
      requestMethod: varchar("request_method", { length: 10 }),
      // GET, POST, PUT, DELETE
      requestPath: varchar("request_path", { length: 500 }),
      responseStatus: integer("response_status"),
      // HTTP status code
      responseTime: integer("response_time"),
      // in milliseconds  
      errorMessage: text("error_message"),
      // For error events
      createdAt: timestamp("created_at").defaultNow().notNull()
    }, (table) => [
      index("idx_audit_user").on(table.userId),
      index("idx_audit_event_type").on(table.eventType),
      index("idx_audit_entity").on(table.entityType, table.entityId),
      index("idx_audit_created").on(table.createdAt),
      index("idx_audit_category").on(table.eventCategory),
      index("idx_audit_session").on(table.sessionId)
    ]);
    auditSettings = pgTable("audit_settings", {
      id: serial("id").primaryKey(),
      userId: varchar("user_id").references(() => users.id),
      // User-specific settings
      logLevel: auditLogLevelEnum("log_level").default("INFO"),
      enableAuth: boolean("enable_auth").default(true),
      enableData: boolean("enable_data").default(true),
      enableSystem: boolean("enable_system").default(true),
      enableSecurity: boolean("enable_security").default(true),
      retentionDays: integer("retention_days").default(90),
      // Days to keep logs
      archiveEnabled: boolean("archive_enabled").default(true),
      maxLogSize: integer("max_log_size"),
      // Max size in MB
      autoCleanup: boolean("auto_cleanup").default(true),
      alertsEnabled: boolean("alerts_enabled").default(false),
      emailNotifications: boolean("email_notifications").default(false),
      realTimeMonitoring: boolean("real_time_monitoring").default(false),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    archivedAuditLogs = pgTable("archived_audit_logs", {
      id: serial("id").primaryKey(),
      originalId: integer("original_id").notNull(),
      // Original log ID
      userId: varchar("user_id", { length: 255 }),
      userName: varchar("user_name", { length: 255 }),
      userRole: varchar("user_role", { length: 50 }),
      eventType: varchar("event_type", { length: 50 }).notNull(),
      eventCategory: varchar("event_category", { length: 50 }).notNull(),
      entityType: varchar("entity_type", { length: 50 }),
      entityId: varchar("entity_id", { length: 100 }),
      action: varchar("action", { length: 255 }).notNull(),
      additionalDetails: jsonb("additional_details"),
      ipAddress: varchar("ip_address", { length: 50 }),
      createdAt: timestamp("created_at").notNull(),
      archivedAt: timestamp("archived_at").defaultNow().notNull()
    }, (table) => [
      index("idx_archived_audit_user").on(table.userId),
      index("idx_archived_audit_created").on(table.createdAt),
      index("idx_archived_audit_archived").on(table.archivedAt)
    ]);
    auditAlertRules = pgTable("audit_alert_rules", {
      id: serial("id").primaryKey(),
      ruleName: varchar("rule_name", { length: 100 }).notNull(),
      description: text("description"),
      eventTypes: jsonb("event_types").notNull().$type(),
      // Events to monitor
      condition: jsonb("condition"),
      // Complex conditions
      severity: varchar("severity", { length: 20 }).notNull().default("medium"),
      // low, medium, high, critical
      alertChannels: jsonb("alert_channels").notNull().$type(),
      // email, slack, webhook
      recipients: jsonb("recipients").notNull().$type(),
      // Email addresses or webhook URLs
      throttleMinutes: integer("throttle_minutes").default(60),
      // Prevent alert spam
      isActive: boolean("is_active").default(true),
      createdBy: varchar("created_by").references(() => users.id),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow().$onUpdate(() => /* @__PURE__ */ new Date())
    }, (table) => [
      index("idx_alert_rules_active").on(table.isActive),
      index("idx_alert_rules_severity").on(table.severity)
    ]);
    systemAuditLogsRelations = relations(systemAuditLogs, ({ one }) => ({
      user: one(users, {
        fields: [systemAuditLogs.userId],
        references: [users.id]
      })
    }));
    auditSettingsRelations = relations(auditSettings, ({ one }) => ({
      user: one(users, {
        fields: [auditSettings.userId],
        references: [users.id]
      })
    }));
    auditAlertRulesRelations = relations(auditAlertRules, ({ one }) => ({
      createdByUser: one(users, {
        fields: [auditAlertRules.createdBy],
        references: [users.id]
      })
    }));
    insertSystemAuditLogSchema = createInsertSchema(systemAuditLogs).omit({
      id: true,
      createdAt: true
    });
    insertAuditSettingsSchema = createInsertSchema(auditSettings).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertArchivedAuditLogSchema = createInsertSchema(archivedAuditLogs).omit({
      id: true,
      archivedAt: true
    });
    insertAuditAlertRuleSchema = createInsertSchema(auditAlertRules).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    validationSessions = pgTable("validation_sessions", {
      id: varchar("id", { length: 36 }).primaryKey(),
      // UUID
      userId: integer("user_id").notNull(),
      fileName: varchar("file_name", { length: 255 }).notNull(),
      fileSize: integer("file_size").notNull(),
      totalItems: integer("total_items").default(0),
      validItems: integer("valid_items").default(0),
      warningItems: integer("warning_items").default(0),
      errorItems: integer("error_items").default(0),
      status: varchar("status", { length: 20 }).notNull().default("pending"),
      // pending, processing, completed, failed
      createdAt: timestamp("created_at").defaultNow(),
      completedAt: timestamp("completed_at"),
      metadata: jsonb("metadata")
      // Additional session data
    });
    validationResults = pgTable("validation_results", {
      id: serial("id").primaryKey(),
      sessionId: varchar("session_id", { length: 36 }).notNull(),
      rowIndex: integer("row_index").notNull(),
      fieldName: varchar("field_name", { length: 100 }),
      originalValue: text("original_value"),
      validatedValue: text("validated_value"),
      validationStatus: varchar("validation_status", { length: 20 }),
      // valid, warning, error
      errorMessage: text("error_message"),
      suggestion: text("suggestion"),
      confidence: decimal("confidence", { precision: 5, scale: 2 }),
      // 0.00 to 100.00
      metadata: jsonb("metadata"),
      createdAt: timestamp("created_at").defaultNow()
    });
    aiSuggestions = pgTable("ai_suggestions", {
      id: serial("id").primaryKey(),
      sessionId: varchar("session_id", { length: 36 }).notNull(),
      rowIndex: integer("row_index").notNull(),
      fieldName: varchar("field_name", { length: 100 }).notNull(),
      originalValue: text("original_value"),
      suggestedValue: text("suggested_value"),
      suggestionType: varchar("suggestion_type", { length: 50 }),
      // vendor, email, category, date, duplicate
      confidence: decimal("confidence", { precision: 5, scale: 2 }).notNull(),
      // 0.00 to 100.00
      reason: text("reason"),
      applied: boolean("applied").default(false),
      appliedAt: timestamp("applied_at"),
      appliedBy: integer("applied_by"),
      metadata: jsonb("metadata"),
      createdAt: timestamp("created_at").defaultNow()
    });
    vendorMappings = pgTable("vendor_mappings", {
      id: serial("id").primaryKey(),
      originalName: varchar("original_name", { length: 255 }).notNull(),
      mappedVendorId: integer("mapped_vendor_id").notNull(),
      mappedVendorName: varchar("mapped_vendor_name", { length: 255 }).notNull(),
      confidence: decimal("confidence", { precision: 5, scale: 2 }).notNull(),
      usageCount: integer("usage_count").default(1),
      lastUsedAt: timestamp("last_used_at").defaultNow(),
      createdAt: timestamp("created_at").defaultNow(),
      createdBy: integer("created_by")
    });
    categoryMappings = pgTable("category_mappings", {
      id: serial("id").primaryKey(),
      itemName: varchar("item_name", { length: 255 }).notNull(),
      majorCategory: varchar("major_category", { length: 100 }),
      middleCategory: varchar("middle_category", { length: 100 }),
      minorCategory: varchar("minor_category", { length: 100 }),
      confidence: decimal("confidence", { precision: 5, scale: 2 }).notNull(),
      usageCount: integer("usage_count").default(1),
      lastUsedAt: timestamp("last_used_at").defaultNow(),
      createdAt: timestamp("created_at").defaultNow(),
      createdBy: integer("created_by")
    });
    validationSessionsRelations = relations(validationSessions, ({ one, many }) => ({
      user: one(users, {
        fields: [validationSessions.userId],
        references: [users.id]
      }),
      results: many(validationResults),
      suggestions: many(aiSuggestions)
    }));
    validationResultsRelations = relations(validationResults, ({ one }) => ({
      session: one(validationSessions, {
        fields: [validationResults.sessionId],
        references: [validationSessions.id]
      })
    }));
    aiSuggestionsRelations = relations(aiSuggestions, ({ one }) => ({
      session: one(validationSessions, {
        fields: [aiSuggestions.sessionId],
        references: [validationSessions.id]
      }),
      appliedByUser: one(users, {
        fields: [aiSuggestions.appliedBy],
        references: [users.id]
      })
    }));
    vendorMappingsRelations = relations(vendorMappings, ({ one }) => ({
      vendor: one(vendors, {
        fields: [vendorMappings.mappedVendorId],
        references: [vendors.id]
      }),
      createdByUser: one(users, {
        fields: [vendorMappings.createdBy],
        references: [users.id]
      })
    }));
    categoryMappingsRelations = relations(categoryMappings, ({ one }) => ({
      createdByUser: one(users, {
        fields: [categoryMappings.createdBy],
        references: [users.id]
      })
    }));
    insertValidationSessionSchema = createInsertSchema(validationSessions).omit({
      createdAt: true,
      completedAt: true
    });
    insertValidationResultSchema = createInsertSchema(validationResults).omit({
      id: true,
      createdAt: true
    });
    insertAISuggestionSchema = createInsertSchema(aiSuggestions).omit({
      id: true,
      createdAt: true,
      appliedAt: true
    });
    insertVendorMappingSchema = createInsertSchema(vendorMappings).omit({
      id: true,
      createdAt: true,
      lastUsedAt: true
    });
    insertCategoryMappingSchema = createInsertSchema(categoryMappings).omit({
      id: true,
      createdAt: true,
      lastUsedAt: true
    });
    insertEmailSettingsSchema = createInsertSchema(emailSettings).omit({
      id: true,
      createdAt: true,
      updatedAt: true,
      lastTestedAt: true,
      testResult: true
    });
    registrationStatusEnum = pgEnum("registration_status", ["pending", "approved", "rejected"]);
    userRegistrations = pgTable("user_registrations", {
      id: serial("id").primaryKey(),
      email: varchar("email", { length: 255 }).notNull().unique(),
      name: varchar("name", { length: 255 }).notNull(),
      phoneNumber: varchar("phone_number", { length: 50 }),
      hashedPassword: varchar("hashed_password").notNull(),
      requestedRole: userRoleEnum("requested_role").default("field_worker"),
      status: registrationStatusEnum("status").notNull().default("pending"),
      rejectionReason: text("rejection_reason"),
      appliedAt: timestamp("applied_at").defaultNow().notNull(),
      reviewedAt: timestamp("reviewed_at"),
      reviewedBy: varchar("reviewed_by").references(() => users.id),
      notes: text("notes"),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    }, (table) => [
      index("idx_user_registrations_email").on(table.email),
      index("idx_user_registrations_status").on(table.status),
      index("idx_user_registrations_applied_at").on(table.appliedAt),
      index("idx_user_registrations_reviewed_by").on(table.reviewedBy)
    ]);
    passwordResetTokens = pgTable("password_reset_tokens", {
      id: serial("id").primaryKey(),
      userId: varchar("user_id").references(() => users.id, { onDelete: "cascade" }).notNull(),
      token: varchar("token", { length: 255 }).notNull().unique(),
      expiresAt: timestamp("expires_at").notNull(),
      usedAt: timestamp("used_at"),
      createdAt: timestamp("created_at").defaultNow().notNull()
    }, (table) => [
      index("idx_password_reset_tokens_user").on(table.userId),
      index("idx_password_reset_tokens_token").on(table.token),
      index("idx_password_reset_tokens_expires").on(table.expiresAt)
    ]);
    userRegistrationsRelations = relations(userRegistrations, ({ one }) => ({
      reviewedByUser: one(users, {
        fields: [userRegistrations.reviewedBy],
        references: [users.id]
      })
    }));
    passwordResetTokensRelations = relations(passwordResetTokens, ({ one }) => ({
      user: one(users, {
        fields: [passwordResetTokens.userId],
        references: [users.id]
      })
    }));
    insertUserRegistrationSchema = createInsertSchema(userRegistrations).omit({
      id: true,
      appliedAt: true,
      createdAt: true,
      updatedAt: true
    }).extend({
      email: z.string().email("\uC720\uD6A8\uD55C \uC774\uBA54\uC77C \uC8FC\uC18C\uB97C \uC785\uB825\uD574\uC8FC\uC138\uC694"),
      name: z.string().min(2, "\uC774\uB984\uC740 2\uAE00\uC790 \uC774\uC0C1\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4").max(50, "\uC774\uB984\uC740 50\uAE00\uC790\uB97C \uCD08\uACFC\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4"),
      phoneNumber: z.string().regex(/^[0-9-+().\s]*$/, "\uC62C\uBC14\uB978 \uC804\uD654\uBC88\uD638 \uD615\uC2DD\uC744 \uC785\uB825\uD574\uC8FC\uC138\uC694").optional(),
      hashedPassword: z.string().min(1, "\uBE44\uBC00\uBC88\uD638\uB294 \uD544\uC218\uC785\uB2C8\uB2E4")
    });
    insertPasswordResetTokenSchema = createInsertSchema(passwordResetTokens).omit({
      id: true,
      createdAt: true
    });
  }
});

// server/db.ts
var db_exports = {};
__export(db_exports, {
  db: () => db
});
import dotenv from "dotenv";
import pkg from "pg";
import { drizzle } from "drizzle-orm/node-postgres";
var DATABASE_URL, Pool, db;
var init_db = __esm({
  "server/db.ts"() {
    "use strict";
    init_schema();
    dotenv.config();
    DATABASE_URL = process.env.DATABASE_URL;
    console.log("\u{1F50D} DATABASE_URL status:", DATABASE_URL ? "Set" : "Not set");
    if (!DATABASE_URL) {
      console.error("\u274C DATABASE_URL environment variable is not set!");
      console.error("\u{1F4CD} Environment details:", {
        NODE_ENV: process.env.NODE_ENV,
        VERCEL: process.env.VERCEL,
        VERCEL_ENV: process.env.VERCEL_ENV,
        VERCEL_REGION: process.env.VERCEL_REGION
      });
      if (process.env.VERCEL) {
        console.error("\u{1F6A8} Running in Vercel without DATABASE_URL - database operations will fail");
      }
    } else {
      const urlParts = DATABASE_URL.split("@");
      if (urlParts.length > 1) {
        console.log("\u{1F50D} Database host:", urlParts[1].split("/")[0]);
      }
    }
    ({ Pool } = pkg);
    db = null;
    if (!DATABASE_URL) {
      console.error("\u274C DATABASE_URL not set - database connection not initialized");
      if (!process.env.VERCEL) {
        console.error("\u{1F480} Exiting process - DATABASE_URL is required");
        process.exit(1);
      } else {
        console.error("\u{1F6A8} Vercel deployment without DATABASE_URL - API calls will fail");
      }
    } else {
      try {
        console.log("\u{1F504} Creating PostgreSQL connection pool...");
        const pool = new Pool({
          connectionString: DATABASE_URL,
          ssl: { rejectUnauthorized: false },
          // Supabase requires SSL
          max: 5,
          // Reduced connection pool size for serverless
          min: 1,
          // Minimum connections
          idleTimeoutMillis: 3e4,
          connectionTimeoutMillis: 1e4,
          acquireTimeoutMillis: 5e3
          // Timeout for acquiring connection
        });
        pool.on("error", (err) => {
          console.error("\u{1F4A5} Database pool error:", err);
        });
        db = drizzle(pool, { schema: schema_exports });
        console.log("\u2705 Database connected successfully (PostgreSQL pool)");
      } catch (error) {
        console.error("\u274C Database connection failed:", error instanceof Error ? error.message : String(error));
        console.error("\u274C Database error details:", error);
        if (!process.env.VERCEL) {
          process.exit(1);
        }
      }
    }
  }
});

// server/utils/excel-input-sheet-remover.ts
var excel_input_sheet_remover_exports = {};
__export(excel_input_sheet_remover_exports, {
  removeAllInputSheets: () => removeAllInputSheets
});
import JSZip from "jszip";
import fs2 from "fs";
import { DOMParser, XMLSerializer } from "xmldom";
async function removeAllInputSheets(sourcePath, targetPath) {
  try {
    console.log(`\u{1F527} Input \uC2DC\uD2B8 \uC644\uC804 \uC81C\uAC70 \uC2DC\uC791: ${sourcePath} -> ${targetPath}`);
    const data = fs2.readFileSync(sourcePath);
    const zip = new JSZip();
    const zipData = await zip.loadAsync(data);
    const parser = new DOMParser();
    const serializer = new XMLSerializer();
    const workbookXml = zipData.files["xl/workbook.xml"];
    if (!workbookXml) {
      throw new Error("workbook.xml\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.");
    }
    const workbookContent = await workbookXml.async("string");
    const workbookDoc = parser.parseFromString(workbookContent, "text/xml");
    const sheets = [];
    const sheetElements = workbookDoc.getElementsByTagName("sheet");
    for (let i = 0; i < sheetElements.length; i++) {
      const sheet = sheetElements[i];
      sheets.push({
        name: sheet.getAttribute("name") || "",
        sheetId: sheet.getAttribute("sheetId") || "",
        rId: sheet.getAttribute("r:id") || "",
        element: sheet
      });
    }
    console.log(`\u{1F4CB} \uBC1C\uACAC\uB41C \uBAA8\uB4E0 \uC2DC\uD2B8: ${sheets.map((s) => s.name).join(", ")}`);
    const inputSheets = sheets.filter((s) => s.name.startsWith("Input"));
    const remainingSheetNames = sheets.filter((s) => !s.name.startsWith("Input")).map((s) => s.name);
    console.log(`\u{1F3AF} \uC81C\uAC70\uD560 Input \uC2DC\uD2B8\uB4E4: ${inputSheets.map((s) => s.name).join(", ")}`);
    console.log(`\u{1F4CB} \uBCF4\uC874\uD560 \uC2DC\uD2B8\uB4E4: ${remainingSheetNames.join(", ")}`);
    if (inputSheets.length === 0) {
      console.log(`\u26A0\uFE0F Input\uC73C\uB85C \uC2DC\uC791\uD558\uB294 \uC2DC\uD2B8\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.`);
      fs2.copyFileSync(sourcePath, targetPath);
      return {
        success: true,
        removedSheets: [],
        remainingSheets: remainingSheetNames,
        originalFormat: true,
        processedFilePath: targetPath
      };
    }
    const relsPath = "xl/_rels/workbook.xml.rels";
    const relsFile = zipData.files[relsPath];
    const filesToRemove = [];
    if (relsFile) {
      const relsContent = await relsFile.async("string");
      const relsDoc = parser.parseFromString(relsContent, "text/xml");
      const relationships = relsDoc.getElementsByTagName("Relationship");
      for (const inputSheet of inputSheets) {
        for (let i = 0; i < relationships.length; i++) {
          const rel = relationships[i];
          if (rel.getAttribute("Id") === inputSheet.rId) {
            const target = rel.getAttribute("Target") || "";
            const actualSheetFile = target.replace("worksheets/", "");
            filesToRemove.push(`xl/worksheets/${actualSheetFile}`);
            filesToRemove.push(`xl/worksheets/_rels/${actualSheetFile.replace(".xml", ".xml.rels")}`);
            console.log(`\u{1F50D} \uB9E4\uD551 \uD655\uC778: ${inputSheet.name} -> ${actualSheetFile}`);
            break;
          }
        }
      }
    }
    const contentTypesPath = "[Content_Types].xml";
    const contentTypesFile = zipData.files[contentTypesPath];
    if (contentTypesFile) {
      const contentTypesContent = await contentTypesFile.async("string");
      const contentTypesDoc = parser.parseFromString(contentTypesContent, "text/xml");
      const overrides = contentTypesDoc.getElementsByTagName("Override");
      for (const fileToRemove of filesToRemove) {
        if (fileToRemove.endsWith(".xml")) {
          const sheetPartName = `/${fileToRemove}`;
          for (let i = overrides.length - 1; i >= 0; i--) {
            const override = overrides[i];
            if (override.getAttribute("PartName") === sheetPartName) {
              override.parentNode?.removeChild(override);
              console.log(`\u{1F5D1}\uFE0F [Content_Types].xml\uC5D0\uC11C \uC81C\uAC70: ${sheetPartName}`);
              break;
            }
          }
        }
      }
      const updatedContentTypesXml = serializer.serializeToString(contentTypesDoc);
      zipData.file(contentTypesPath, updatedContentTypesXml);
    }
    for (const inputSheet of inputSheets) {
      inputSheet.element.parentNode?.removeChild(inputSheet.element);
    }
    const remainingSheetElements = workbookDoc.getElementsByTagName("sheet");
    for (let i = 0; i < remainingSheetElements.length; i++) {
      const sheet = remainingSheetElements[i];
      const newSheetId = (i + 1).toString();
      sheet.setAttribute("sheetId", newSheetId);
    }
    const updatedWorkbookXml = serializer.serializeToString(workbookDoc);
    zipData.file("xl/workbook.xml", updatedWorkbookXml);
    if (relsFile) {
      const relsContent = await relsFile.async("string");
      const relsDoc = parser.parseFromString(relsContent, "text/xml");
      const relationships = relsDoc.getElementsByTagName("Relationship");
      for (const inputSheet of inputSheets) {
        for (let i = relationships.length - 1; i >= 0; i--) {
          const rel = relationships[i];
          if (rel.getAttribute("Id") === inputSheet.rId) {
            rel.parentNode?.removeChild(rel);
            console.log(`\u{1F5D1}\uFE0F \uAD00\uACC4 \uC81C\uAC70: ${inputSheet.rId}`);
            break;
          }
        }
      }
      const updatedRelsXml = serializer.serializeToString(relsDoc);
      zipData.file(relsPath, updatedRelsXml);
    }
    for (const filePath of filesToRemove) {
      if (zipData.files[filePath]) {
        zipData.remove(filePath);
        console.log(`\u{1F5D1}\uFE0F \uD30C\uC77C \uC81C\uAC70: ${filePath}`);
      }
    }
    const result = await zipData.generateAsync({
      type: "nodebuffer",
      compression: "DEFLATE",
      compressionOptions: { level: 6 }
    });
    fs2.writeFileSync(targetPath, result);
    console.log(`\u2705 Input \uC2DC\uD2B8 \uC644\uC804 \uC81C\uAC70 \uC644\uB8CC: ${targetPath}`);
    console.log(`\u{1F4CA} \uC81C\uAC70\uB41C \uC2DC\uD2B8: ${inputSheets.map((s) => s.name).join(", ")}`);
    console.log(`\u{1F4CA} \uBCF4\uC874\uB41C \uC2DC\uD2B8: ${remainingSheetNames.join(", ")}`);
    return {
      success: true,
      removedSheets: inputSheets.map((s) => s.name),
      remainingSheets: remainingSheetNames,
      originalFormat: true,
      processedFilePath: targetPath
    };
  } catch (error) {
    console.error(`\u274C Input \uC2DC\uD2B8 \uC81C\uAC70 \uC2E4\uD328:`, error);
    if (fs2.existsSync(targetPath)) {
      fs2.unlinkSync(targetPath);
    }
    return {
      success: false,
      removedSheets: [],
      remainingSheets: [],
      originalFormat: false,
      error: error instanceof Error ? error.message : "Unknown error"
    };
  }
}
var init_excel_input_sheet_remover = __esm({
  "server/utils/excel-input-sheet-remover.ts"() {
    "use strict";
  }
});

// server/utils/email-settings-encryption.ts
import crypto2 from "crypto";
var EmailSettingsEncryption;
var init_email_settings_encryption = __esm({
  "server/utils/email-settings-encryption.ts"() {
    "use strict";
    EmailSettingsEncryption = class {
      static {
        this.algorithm = "aes-256-gcm";
      }
      static {
        this.keyLength = 32;
      }
      static {
        // 256 bits
        this.ivLength = 16;
      }
      // 128 bits
      /**
       * 암호화 키 생성 (환경 변수 기반)
       */
      static getEncryptionKey() {
        const secret = process.env.ENCRYPTION_SECRET || "default-secret-key-change-in-production";
        return crypto2.scryptSync(secret, "salt", this.keyLength);
      }
      /**
       * 비밀번호 암호화
       * @param plainText 평문 비밀번호
       * @returns 암호화된 문자열 (iv:tag:encrypted 형태)
       */
      static encrypt(plainText) {
        try {
          const key = this.getEncryptionKey();
          const iv = crypto2.randomBytes(this.ivLength);
          const cipher = crypto2.createCipherGCM(this.algorithm, key, iv);
          cipher.setAAD(Buffer.from("email-settings", "utf8"));
          let encrypted = cipher.update(plainText, "utf8", "hex");
          encrypted += cipher.final("hex");
          const tag = cipher.getAuthTag();
          return `${iv.toString("hex")}:${tag.toString("hex")}:${encrypted}`;
        } catch (error) {
          console.error("\uC554\uD638\uD654 \uC2E4\uD328:", error);
          throw new Error("\uBE44\uBC00\uBC88\uD638 \uC554\uD638\uD654\uC5D0 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4");
        }
      }
      /**
       * 비밀번호 복호화
       * @param encryptedText 암호화된 문자열 (iv:tag:encrypted 형태)
       * @returns 평문 비밀번호
       */
      static decrypt(encryptedText) {
        try {
          const parts = encryptedText.split(":");
          if (parts.length !== 3) {
            throw new Error("\uC798\uBABB\uB41C \uC554\uD638\uD654 \uD615\uC2DD");
          }
          const [ivHex, tagHex, encrypted] = parts;
          const key = this.getEncryptionKey();
          const iv = Buffer.from(ivHex, "hex");
          const tag = Buffer.from(tagHex, "hex");
          const decipher = crypto2.createDecipherGCM(this.algorithm, key, iv);
          decipher.setAuthTag(tag);
          decipher.setAAD(Buffer.from("email-settings", "utf8"));
          let decrypted = decipher.update(encrypted, "hex", "utf8");
          decrypted += decipher.final("utf8");
          return decrypted;
        } catch (error) {
          console.error("\uBCF5\uD638\uD654 \uC2E4\uD328:", error);
          throw new Error("\uBE44\uBC00\uBC88\uD638 \uBCF5\uD638\uD654\uC5D0 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4");
        }
      }
      /**
       * 암호화 테스트 함수
       */
      static test() {
        try {
          const testPassword = "test-password-123";
          const encrypted = this.encrypt(testPassword);
          const decrypted = this.decrypt(encrypted);
          return testPassword === decrypted;
        } catch (error) {
          console.error("\uC554\uD638\uD654 \uD14C\uC2A4\uD2B8 \uC2E4\uD328:", error);
          return false;
        }
      }
      /**
       * 안전한 비밀번호 비교
       * @param plainText 평문 비밀번호
       * @param encryptedText 암호화된 비밀번호
       * @returns 일치 여부
       */
      static compare(plainText, encryptedText) {
        try {
          const decrypted = this.decrypt(encryptedText);
          return plainText === decrypted;
        } catch (error) {
          return false;
        }
      }
      /**
       * 이메일 설정 마스킹 (UI 표시용)
       * @param email 이메일 주소
       * @returns 마스킹된 이메일
       */
      static maskEmail(email) {
        if (!email || !email.includes("@")) {
          return "***@***.***";
        }
        const [local, domain] = email.split("@");
        const maskedLocal = local.length > 2 ? local.charAt(0) + "*".repeat(local.length - 2) + local.charAt(local.length - 1) : local;
        return `${maskedLocal}@${domain}`;
      }
      /**
       * 호스트 정보 마스킹 (보안을 위해)
       * @param host SMTP 호스트
       * @returns 마스킹된 호스트
       */
      static maskHost(host) {
        if (!host) return "***";
        if (host.includes(".")) {
          const parts = host.split(".");
          return parts.map(
            (part, index2) => index2 === 0 || index2 === parts.length - 1 ? part : "*".repeat(part.length)
          ).join(".");
        }
        return host.length > 4 ? host.substring(0, 2) + "*".repeat(host.length - 4) + host.substring(host.length - 2) : host;
      }
    };
    if (process.env.NODE_ENV !== "production") {
      if (EmailSettingsEncryption.test()) {
        console.log("\u2705 \uC774\uBA54\uC77C \uC124\uC815 \uC554\uD638\uD654 \uAE30\uB2A5 \uC815\uC0C1 \uC791\uB3D9");
      } else {
        console.warn("\u26A0\uFE0F \uC774\uBA54\uC77C \uC124\uC815 \uC554\uD638\uD654 \uAE30\uB2A5 \uD14C\uC2A4\uD2B8 \uC2E4\uD328");
      }
    }
  }
});

// server/services/email-settings-service.ts
var email_settings_service_exports = {};
__export(email_settings_service_exports, {
  EmailSettingsService: () => EmailSettingsService
});
import { eq as eq8, desc as desc4 } from "drizzle-orm";
import nodemailer2 from "nodemailer";
var EmailSettingsService;
var init_email_settings_service = __esm({
  "server/services/email-settings-service.ts"() {
    "use strict";
    init_db();
    init_schema();
    init_email_settings_encryption();
    EmailSettingsService = class _EmailSettingsService {
      static {
        this.settingsCache = null;
      }
      static {
        this.cacheTimestamp = 0;
      }
      static {
        this.CACHE_TTL = 5 * 60 * 1e3;
      }
      // 5분 캐시
      /**
       * 기본 설정 가져오기 (활성 + 기본 설정)
       */
      async getDefaultSettings() {
        try {
          if (_EmailSettingsService.isCacheValid()) {
            return _EmailSettingsService.settingsCache;
          }
          const db2 = db;
          const result = await db2.select().from(emailSettings).where(eq8(emailSettings.isActive, true)).orderBy(desc4(emailSettings.isDefault), desc4(emailSettings.updatedAt)).limit(1);
          const setting = result[0] || null;
          _EmailSettingsService.settingsCache = setting;
          _EmailSettingsService.cacheTimestamp = Date.now();
          return setting;
        } catch (error) {
          console.error("\uAE30\uBCF8 \uC774\uBA54\uC77C \uC124\uC815 \uC870\uD68C \uC2E4\uD328:", error);
          return null;
        }
      }
      /**
       * 모든 설정 조회
       */
      async getAllSettings() {
        try {
          const db2 = db;
          const result = await db2.select().from(emailSettings).orderBy(desc4(emailSettings.isDefault), desc4(emailSettings.updatedAt));
          return result;
        } catch (error) {
          console.error("\uC774\uBA54\uC77C \uC124\uC815 \uBAA9\uB85D \uC870\uD68C \uC2E4\uD328:", error);
          return [];
        }
      }
      /**
       * 새 설정 생성
       */
      async createSettings(data, createdBy) {
        try {
          const encryptedPassword = EmailSettingsEncryption.encrypt(data.smtpPass);
          const db2 = db;
          if (data.isDefault) {
            await db2.update(emailSettings).set({ isDefault: false, updatedAt: /* @__PURE__ */ new Date() }).where(eq8(emailSettings.isDefault, true));
          }
          const insertData = {
            ...data,
            smtpPass: encryptedPassword,
            createdBy
          };
          const result = await db2.insert(emailSettings).values(insertData).returning();
          const newSetting = result[0];
          this.invalidateCache();
          return newSetting;
        } catch (error) {
          console.error("\uC774\uBA54\uC77C \uC124\uC815 \uC0DD\uC131 \uC2E4\uD328:", error);
          throw new Error("\uC774\uBA54\uC77C \uC124\uC815 \uC0DD\uC131\uC5D0 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4");
        }
      }
      /**
       * 설정 업데이트
       */
      async updateSettings(id, data, updatedBy) {
        try {
          const db2 = db;
          const updateData = {
            ...data,
            updatedAt: /* @__PURE__ */ new Date()
          };
          if (data.smtpPass && data.smtpPass !== "********") {
            updateData.smtpPass = EmailSettingsEncryption.encrypt(data.smtpPass);
          }
          if (data.isDefault === true) {
            await db2.update(emailSettings).set({ isDefault: false, updatedAt: /* @__PURE__ */ new Date() }).where(eq8(emailSettings.isDefault, true));
          }
          const result = await db2.update(emailSettings).set(updateData).where(eq8(emailSettings.id, id)).returning();
          if (result.length === 0) {
            throw new Error("\uC5C5\uB370\uC774\uD2B8\uD560 \uC124\uC815\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4");
          }
          this.invalidateCache();
          return result[0];
        } catch (error) {
          console.error("\uC774\uBA54\uC77C \uC124\uC815 \uC5C5\uB370\uC774\uD2B8 \uC2E4\uD328:", error);
          throw new Error("\uC774\uBA54\uC77C \uC124\uC815 \uC5C5\uB370\uC774\uD2B8\uC5D0 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4");
        }
      }
      /**
       * 설정 삭제
       */
      async deleteSettings(id) {
        try {
          const db2 = db;
          const result = await db2.delete(emailSettings).where(eq8(emailSettings.id, id)).returning();
          this.invalidateCache();
          return result.length > 0;
        } catch (error) {
          console.error("\uC774\uBA54\uC77C \uC124\uC815 \uC0AD\uC81C \uC2E4\uD328:", error);
          return false;
        }
      }
      /**
       * SMTP 연결 테스트
       */
      async testSMTPConnection(setting, testEmail) {
        try {
          const decryptedPassword = EmailSettingsEncryption.decrypt(setting.smtpPass);
          const transporter2 = nodemailer2.createTransport({
            host: setting.smtpHost,
            port: setting.smtpPort,
            secure: setting.smtpPort === 465,
            auth: {
              user: setting.smtpUser,
              pass: decryptedPassword
            },
            tls: {
              rejectUnauthorized: false
            }
          });
          await transporter2.verify();
          const info = await transporter2.sendMail({
            from: setting.fromName ? `"${setting.fromName}" <${setting.smtpUser}>` : setting.smtpUser,
            to: testEmail,
            subject: "[IKJIN] \uC774\uBA54\uC77C \uC124\uC815 \uD14C\uC2A4\uD2B8",
            html: `
          <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px;">
            <h2 style="color: #3b82f6;">\uC774\uBA54\uC77C \uC124\uC815 \uD14C\uC2A4\uD2B8 \uC644\uB8CC</h2>
            <p>IKJIN \uAD6C\uB9E4 \uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C\uC758 \uC774\uBA54\uC77C \uC124\uC815\uC774 \uC815\uC0C1\uC801\uC73C\uB85C \uC791\uB3D9\uD569\uB2C8\uB2E4.</p>
            <hr style="margin: 20px 0; border: 1px solid #e5e7eb;">
            <div style="background: #f9fafb; padding: 15px; border-radius: 5px;">
              <h3 style="margin-top: 0; color: #374151;">\uC124\uC815 \uC815\uBCF4</h3>
              <p><strong>SMTP \uC11C\uBC84:</strong> ${EmailSettingsEncryption.maskHost(setting.smtpHost)}</p>
              <p><strong>\uD3EC\uD2B8:</strong> ${setting.smtpPort}</p>
              <p><strong>\uBC1C\uC1A1\uC790:</strong> ${EmailSettingsEncryption.maskEmail(setting.smtpUser)}</p>
              <p><strong>\uD14C\uC2A4\uD2B8 \uC2DC\uAC04:</strong> ${(/* @__PURE__ */ new Date()).toLocaleString("ko-KR")}</p>
            </div>
          </div>
        `
          });
          await this.updateTestResult(setting.id, {
            success: true,
            messageId: info.messageId,
            testedAt: /* @__PURE__ */ new Date(),
            testEmail
          });
          return {
            success: true,
            messageId: info.messageId
          };
        } catch (error) {
          console.error("SMTP \uC5F0\uACB0 \uD14C\uC2A4\uD2B8 \uC2E4\uD328:", error);
          await this.updateTestResult(setting.id, {
            success: false,
            error: error.message,
            testedAt: /* @__PURE__ */ new Date(),
            testEmail
          });
          return {
            success: false,
            error: error.message
          };
        }
      }
      /**
       * 환경 변수에서 현재 설정 읽기 (백워드 호환성)
       */
      getSettingsFromEnv() {
        return {
          smtpHost: process.env.SMTP_HOST || "smtp.naver.com",
          smtpPort: parseInt(process.env.SMTP_PORT || "587"),
          smtpUser: process.env.SMTP_USER || "",
          // smtpPass는 평문으로 반환 (암호화는 저장 시)
          fromName: "IKJIN \uAD6C\uB9E4 \uBC1C\uC8FC \uC2DC\uC2A4\uD15C",
          description: "\uD658\uACBD \uBCC0\uC218\uC5D0\uC11C \uAC00\uC838\uC628 \uAE30\uBCF8 \uC124\uC815",
          isActive: true,
          isDefault: true
        };
      }
      /**
       * UI용 마스킹된 설정 반환
       */
      getMaskedSettings(setting) {
        return {
          ...setting,
          smtpPass: "********",
          smtpUser: EmailSettingsEncryption.maskEmail(setting.smtpUser),
          smtpHost: EmailSettingsEncryption.maskHost(setting.smtpHost)
        };
      }
      /**
       * 실제 SMTP 설정 반환 (이메일 발송용)
       */
      async getDecryptedSettings(settingId) {
        try {
          let setting;
          if (settingId) {
            const db2 = db;
            const result = await db2.select().from(emailSettings).where(eq8(emailSettings.id, settingId)).limit(1);
            setting = result[0] || null;
          } else {
            setting = await this.getDefaultSettings();
          }
          if (!setting) {
            return {
              host: process.env.SMTP_HOST || "smtp.naver.com",
              port: parseInt(process.env.SMTP_PORT || "587"),
              secure: parseInt(process.env.SMTP_PORT || "587") === 465,
              auth: {
                user: process.env.SMTP_USER || "",
                pass: process.env.SMTP_PASS || ""
              },
              tls: {
                rejectUnauthorized: false
              }
            };
          }
          const decryptedPassword = EmailSettingsEncryption.decrypt(setting.smtpPass);
          return {
            host: setting.smtpHost,
            port: setting.smtpPort,
            secure: setting.smtpPort === 465,
            auth: {
              user: setting.smtpUser,
              pass: decryptedPassword
            },
            tls: {
              rejectUnauthorized: false
            }
          };
        } catch (error) {
          console.error("SMTP \uC124\uC815 \uBCF5\uD638\uD654 \uC2E4\uD328:", error);
          return null;
        }
      }
      /**
       * 캐시 유효성 확인
       */
      static isCacheValid() {
        return _EmailSettingsService.settingsCache !== null && Date.now() - _EmailSettingsService.cacheTimestamp < _EmailSettingsService.CACHE_TTL;
      }
      /**
       * 캐시 무효화
       */
      invalidateCache() {
        _EmailSettingsService.settingsCache = null;
        _EmailSettingsService.cacheTimestamp = 0;
      }
      /**
       * 테스트 결과 업데이트
       */
      async updateTestResult(settingId, testResult) {
        try {
          const db2 = db;
          await db2.update(emailSettings).set({
            lastTestedAt: /* @__PURE__ */ new Date(),
            testResult,
            updatedAt: /* @__PURE__ */ new Date()
          }).where(eq8(emailSettings.id, settingId));
        } catch (error) {
          console.error("\uD14C\uC2A4\uD2B8 \uACB0\uACFC \uC5C5\uB370\uC774\uD2B8 \uC2E4\uD328:", error);
        }
      }
    };
  }
});

// server/services/professional-pdf-generation-service.ts
import * as fs6 from "fs";
import * as path4 from "path";
import { format } from "date-fns";
import { ko } from "date-fns/locale";
import { eq as eq9, desc as desc5 } from "drizzle-orm";
var ProfessionalPDFGenerationService;
var init_professional_pdf_generation_service = __esm({
  "server/services/professional-pdf-generation-service.ts"() {
    "use strict";
    init_db();
    init_schema();
    ProfessionalPDFGenerationService = class {
      static async generateProfessionalPDF(orderData) {
        if (process.env.VERCEL) {
          console.log("\u{1F4C4} [ProfessionalPDF] Vercel \uD658\uACBD: PDFKit\uC73C\uB85C PDF \uC0DD\uC131");
          return await this.generateProfessionalPDFWithPDFKit(orderData);
        } else {
          console.log("\u{1F4C4} [ProfessionalPDF] \uB85C\uCEEC \uD658\uACBD: HTML \uD15C\uD50C\uB9BF\uC73C\uB85C PDF \uC0DD\uC131 \uC2DC\uB3C4");
          try {
            const htmlContent = this.generateProfessionalHTMLTemplate(orderData);
            return await this.convertHTMLToPDFFromString(htmlContent);
          } catch (htmlError) {
            console.warn("\u26A0\uFE0F [ProfessionalPDF] HTML \uD15C\uD50C\uB9BF \uC0DD\uC131 \uC2E4\uD328, PDFKit\uC73C\uB85C \uB300\uCCB4:", htmlError);
            console.log("\u{1F4C4} [ProfessionalPDF] \uB85C\uCEEC \uD658\uACBD\uC5D0\uC11C PDFKit\uC73C\uB85C \uB300\uCCB4 \uC2E4\uD589");
            return await this.generateProfessionalPDFWithPDFKit(orderData);
          }
        }
      }
      static {
        this.uploadDir = process.env.VERCEL ? "/tmp/pdf" : path4.join(process.cwd(), "uploads/pdf");
      }
      static {
        this.TEMPLATE_VERSION = "v2.0.0";
      }
      static {
        this.VAT_RATE = 0.1;
      }
      // 10% 부가세
      /**
       * 시스템 이메일 설정 가져오기 (DB 우선, 환경변수 fallback)
       */
      static async getSystemEmail() {
        try {
          const { EmailSettingsService: EmailSettingsService2 } = await Promise.resolve().then(() => (init_email_settings_service(), email_settings_service_exports));
          const emailService4 = new EmailSettingsService2();
          const settings = await emailService4.getDefaultSettings();
          if (settings && settings.smtpUser) {
            return settings.smtpUser;
          }
          return process.env.SMTP_USER || null;
        } catch (error) {
          console.warn("\u26A0\uFE0F [ProfessionalPDF] \uC2DC\uC2A4\uD15C \uC774\uBA54\uC77C \uC870\uD68C \uC2E4\uD328, \uD658\uACBD\uBCC0\uC218 \uC0AC\uC6A9:", error);
          return process.env.SMTP_USER || null;
        }
      }
      /**
       * 발주서 ID로부터 포괄적인 데이터 수집
       */
      static async gatherComprehensiveOrderData(orderId) {
        try {
          console.log(`\u{1F4CA} [ProfessionalPDF] \uD3EC\uAD04\uC801 \uB370\uC774\uD130 \uC218\uC9D1 \uC2DC\uC791: Order ID ${orderId}`);
          const orderQuery = await db.select({
            // Purchase Order 정보
            orderNumber: purchaseOrders.orderNumber,
            orderDate: purchaseOrders.orderDate,
            deliveryDate: purchaseOrders.deliveryDate,
            orderStatus: purchaseOrders.orderStatus,
            approvalStatus: purchaseOrders.approvalStatus,
            totalAmount: purchaseOrders.totalAmount,
            notes: purchaseOrders.notes,
            approvalLevel: purchaseOrders.approvalLevel,
            createdAt: purchaseOrders.createdAt,
            updatedAt: purchaseOrders.updatedAt,
            // 거래처 정보
            vendorName: vendors.name,
            vendorBusinessNumber: vendors.businessNumber,
            vendorContactPerson: vendors.contactPerson,
            vendorEmail: vendors.email,
            vendorPhone: vendors.phone,
            vendorAddress: vendors.address,
            vendorBusinessType: vendors.businessType,
            // 현장 정보
            projectName: projects.projectName,
            projectCode: projects.projectCode,
            projectClientName: projects.clientName,
            projectLocation: projects.location,
            projectStartDate: projects.startDate,
            projectEndDate: projects.endDate,
            projectTotalBudget: projects.totalBudget,
            // 작성자 정보
            creatorName: users.name,
            creatorEmail: users.email,
            creatorPhone: users.phoneNumber,
            creatorPosition: users.position,
            creatorRole: users.role
          }).from(purchaseOrders).leftJoin(vendors, eq9(purchaseOrders.vendorId, vendors.id)).leftJoin(projects, eq9(purchaseOrders.projectId, projects.id)).leftJoin(users, eq9(purchaseOrders.userId, users.id)).where(eq9(purchaseOrders.id, orderId)).limit(1);
          const companyQuery = await db.select({
            companyName: companies.companyName,
            companyBusinessNumber: companies.businessNumber,
            companyAddress: companies.address,
            companyContactPerson: companies.contactPerson,
            companyPhone: companies.phone,
            companyEmail: companies.email,
            companyFax: companies.fax,
            companyWebsite: companies.website,
            companyRepresentative: companies.representative
          }).from(companies).where(eq9(companies.isActive, true)).limit(1);
          if (!orderQuery || orderQuery.length === 0) {
            console.error(`\u274C [ProfessionalPDF] \uBC1C\uC8FC\uC11C \uC815\uBCF4 \uC5C6\uC74C: Order ID ${orderId}`);
            return null;
          }
          const orderData = orderQuery[0];
          const companyData = companyQuery.length > 0 ? companyQuery[0] : {
            companyName: "\uBC1C\uC8FC\uC5C5\uCCB4",
            companyBusinessNumber: null,
            companyAddress: null,
            companyContactPerson: null,
            companyPhone: null,
            companyEmail: null,
            companyRepresentative: null
          };
          const itemsQuery = await db.select().from(purchaseOrderItems).where(eq9(purchaseOrderItems.orderId, orderId));
          const attachmentsQuery = await db.select().from(attachments).where(eq9(attachments.orderId, orderId));
          let emailHistoryQuery = [];
          try {
            emailHistoryQuery = await db.select().from(emailSendHistory).where(eq9(emailSendHistory.orderId, orderId)).orderBy(desc5(emailSendHistory.sentAt)).limit(5);
          } catch (error) {
            if (error.code !== "42P01") {
              console.error("\u274C [ProfessionalPDF] \uC774\uBA54\uC77C \uC774\uB825 \uC870\uD68C \uC624\uB958:", error);
            }
          }
          const subtotalAmount = Number(orderData.totalAmount) || 0;
          const vatAmount = Math.round(subtotalAmount * this.VAT_RATE);
          const totalAmount = subtotalAmount + vatAmount;
          const comprehensiveData = {
            orderNumber: orderData.orderNumber,
            orderDate: orderData.orderDate,
            deliveryDate: orderData.deliveryDate,
            createdAt: orderData.createdAt,
            issuerCompany: {
              name: companyData.companyName || "\uBC1C\uC8FC\uC5C5\uCCB4",
              businessNumber: companyData.companyBusinessNumber,
              representative: companyData.companyRepresentative,
              address: companyData.companyAddress,
              phone: companyData.companyPhone,
              email: companyData.companyEmail || "ikjin@example.com"
              // 이메일 설정 단순화
            },
            vendorCompany: {
              name: orderData.vendorName || "\uAC70\uB798\uCC98\uBA85 \uC5C6\uC74C",
              businessNumber: orderData.vendorBusinessNumber,
              representative: orderData.vendorBusinessNumber ? "\uB300\uD45C\uC790" : void 0,
              // 실제 대표자 정보가 없으면 제외
              address: orderData.vendorAddress,
              phone: orderData.vendorPhone,
              email: orderData.vendorEmail,
              contactPerson: orderData.vendorContactPerson
            },
            project: {
              name: orderData.projectName || "\uD604\uC7A5\uBA85 \uC5C6\uC74C",
              code: orderData.projectCode,
              location: orderData.projectLocation,
              projectManager: orderData.creatorName,
              // 현장 책임자로 작성자 사용
              projectManagerContact: orderData.creatorPhone,
              orderManager: orderData.creatorName,
              // 발주 담당자로 작성자 사용
              orderManagerContact: orderData.creatorEmail
            },
            creator: {
              name: orderData.creatorName || "\uC791\uC131\uC790 \uC815\uBCF4 \uC5C6\uC74C",
              email: orderData.creatorEmail,
              phone: orderData.creatorPhone
            },
            items: itemsQuery.map((item, index2) => {
              let deliveryLocation = "";
              let deliveryEmail = "";
              const remarks = item.notes || "";
              const deliveryMatch = remarks.match(/납품처:\s*([^,\n]+)/);
              if (deliveryMatch) {
                deliveryLocation = deliveryMatch[1].trim();
              }
              const emailMatch = remarks.match(/이메일:\s*([^\s,\n]+)/);
              if (emailMatch) {
                deliveryEmail = emailMatch[1].trim();
              }
              return {
                sequenceNo: index2 + 1,
                name: item.itemName,
                specification: item.specification,
                quantity: Number(item.quantity),
                unit: item.unit,
                unitPrice: Number(item.unitPrice),
                totalPrice: Number(item.totalAmount),
                deliveryLocation,
                deliveryEmail,
                remarks: item.notes
              };
            }),
            financial: {
              subtotalAmount,
              vatRate: this.VAT_RATE,
              vatAmount,
              totalAmount,
              discountAmount: 0,
              // 할인 금액이 있으면 여기에 설정
              currencyCode: "KRW"
            },
            metadata: {
              notes: orderData.notes,
              documentId: `DOC_${orderId}_${Date.now()}`,
              generatedAt: /* @__PURE__ */ new Date(),
              generatedBy: orderData.creatorName || "System",
              templateVersion: this.TEMPLATE_VERSION
            }
          };
          console.log(`\u2705 [ProfessionalPDF] \uB370\uC774\uD130 \uC218\uC9D1 \uC644\uB8CC: ${itemsQuery.length}\uAC1C \uD488\uBAA9, ${attachmentsQuery.length}\uAC1C \uCCA8\uBD80\uD30C\uC77C`);
          return comprehensiveData;
        } catch (error) {
          console.error("\u274C [ProfessionalPDF] \uB370\uC774\uD130 \uC218\uC9D1 \uC624\uB958:", error);
          return null;
        }
      }
      /**
       * 전문적인 발주서 PDF 생성
       */
      static async generateProfessionalPurchaseOrderPDF(orderId, userId) {
        try {
          console.log(`\u{1F4C4} [ProfessionalPDF] \uC804\uBB38\uC801 \uBC1C\uC8FC\uC11C PDF \uC0DD\uC131 \uC2DC\uC791: Order ID ${orderId}`);
          const orderData = await this.gatherComprehensiveOrderData(orderId);
          if (!orderData) {
            return {
              success: false,
              error: "\uBC1C\uC8FC\uC11C \uB370\uC774\uD130\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4."
            };
          }
          const timestamp2 = Date.now();
          const cleanOrderNumber = orderData.orderNumber.startsWith("PO-") ? orderData.orderNumber.substring(3) : orderData.orderNumber;
          const fileName = `PO_Professional_${cleanOrderNumber}_${timestamp2}.pdf`;
          let pdfBuffer;
          if (process.env.VERCEL) {
            console.log("\u{1F4C4} [ProfessionalPDF] Vercel \uD658\uACBD: PDFKit\uC73C\uB85C PDF \uC9C1\uC811 \uC0DD\uC131");
            pdfBuffer = await this.generateProfessionalPDFWithPDFKit(orderData);
          } else {
            console.log("\u{1F4C4} [ProfessionalPDF] \uB85C\uCEEC \uD658\uACBD: HTML \uD15C\uD50C\uB9BF\uC73C\uB85C PDF \uC0DD\uC131");
            const htmlContent = this.generateProfessionalHTMLTemplate(orderData);
            pdfBuffer = await this.convertHTMLToPDFFromString(htmlContent);
          }
          const base64Data = pdfBuffer.toString("base64");
          let filePath = "";
          let attachmentId;
          console.log(`\u{1F50D} [ProfessionalPDF] Environment check - VERCEL: ${process.env.VERCEL}, Base64 size: ${base64Data.length} chars`);
          if (process.env.VERCEL) {
            console.log("\u{1F4DD} [ProfessionalPDF] Saving to database with Base64 data...");
            const [attachment] = await db.insert(attachments).values({
              orderId,
              originalName: fileName,
              storedName: fileName,
              filePath: `professional://${fileName}`,
              fileSize: pdfBuffer.length,
              mimeType: "application/pdf",
              uploadedBy: userId,
              fileData: base64Data
            }).returning();
            attachmentId = attachment.id;
            filePath = `professional://${fileName}`;
            console.log(`\u2705 [ProfessionalPDF] PDF \uC0DD\uC131 \uC644\uB8CC (Vercel): ${fileName}, \uD06C\uAE30: ${Math.round(pdfBuffer.length / 1024)}KB`);
          } else {
            const tempDir = path4.join(this.uploadDir, "professional", String((/* @__PURE__ */ new Date()).getFullYear()));
            if (!fs6.existsSync(tempDir)) {
              fs6.mkdirSync(tempDir, { recursive: true });
            }
            filePath = path4.join(tempDir, fileName);
            fs6.writeFileSync(filePath, pdfBuffer);
            const [attachment] = await db.insert(attachments).values({
              orderId,
              originalName: fileName,
              storedName: fileName,
              filePath,
              fileSize: pdfBuffer.length,
              mimeType: "application/pdf",
              uploadedBy: userId,
              fileData: base64Data
              // 로컬에서도 Base64 저장하여 배포 시 호환성 보장
            }).returning();
            attachmentId = attachment.id;
            console.log(`\u2705 [ProfessionalPDF] PDF \uC0DD\uC131 \uC644\uB8CC (\uB85C\uCEEC): ${filePath}, DB\uC5D0\uB3C4 Base64 \uC800\uC7A5`);
          }
          return {
            success: true,
            pdfPath: filePath,
            attachmentId,
            pdfBuffer: process.env.VERCEL ? pdfBuffer : void 0
          };
        } catch (error) {
          console.error("\u274C [ProfessionalPDF] PDF \uC0DD\uC131 \uC624\uB958:", error);
          return {
            success: false,
            error: error instanceof Error ? error.message : "PDF \uC0DD\uC131 \uC911 \uC624\uB958 \uBC1C\uC0DD"
          };
        }
      }
      /**
       * 전문적인 HTML 템플릿 생성
       */
      static generateProfessionalHTMLTemplate(data) {
        const formatDate = (date2) => {
          if (!date2) return "-";
          return format(new Date(date2), "yyyy\uB144 MM\uC6D4 dd\uC77C", { locale: ko });
        };
        const formatCurrency = (amount) => {
          return new Intl.NumberFormat("ko-KR", {
            style: "currency",
            currency: "KRW"
          }).format(amount);
        };
        const formatNumber = (num) => {
          return new Intl.NumberFormat("ko-KR").format(num);
        };
        const formatRemarks = (item) => {
          let result = "";
          if (item.deliveryLocation) {
            result += `\u2022 \uB0A9\uD488\uCC98: ${item.deliveryLocation}`;
          }
          if (item.deliveryEmail) {
            result += `<br/>\u2022 \uC774\uBA54\uC77C: ${item.deliveryEmail}`;
          }
          if (item.remarks && item.remarks !== "-" && !item.remarks.includes("\uB0A9\uD488\uCC98:") && !item.remarks.includes("\uC774\uBA54\uC77C:")) {
            result += `<br/>${item.remarks}`;
          }
          return result || "-";
        };
        const itemRows = data.items.map((item) => `
      <tr>
        <td class="text-center">${item.sequenceNo}</td>
        <td class="text-small">${item.name}</td>
        <td class="text-small">${item.specification || "-"}</td>
        <td class="text-center">${formatNumber(item.quantity)}</td>
        <td class="text-center">${item.unit || "-"}</td>
        <td class="text-right">${formatCurrency(item.unitPrice)}</td>
        <td class="text-right">${formatCurrency(item.totalPrice)}</td>
        <td class="text-small">${formatRemarks(item)}</td>
      </tr>
    `).join("");
        return `
<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>\uAD6C\uB9E4 \uBC1C\uC8FC\uC11C - ${data.orderNumber}</title>
  <style>
    @page {
      size: A4;
      margin: 8mm;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Malgun Gothic', 'Nanum Gothic', 'Apple SD Gothic Neo', 'Noto Sans KR', 'Arial', sans-serif;
      font-size: 8pt;
      line-height: 1.2;
      color: #000;
    }
    
    .container {
      max-width: 210mm;
      margin: 0 auto;
    }
    
    /* === HEADER SECTION === */
    .header {
      display: grid;
      grid-template-columns: 100px 1fr 100px;
      gap: 10px;
      padding: 8px 0;
      border-bottom: 3px solid #1e40af;
      margin-bottom: 12px;
      align-items: center;
    }
    
    .header-center {
      text-align: center;
    }
    
    .header-center h1 {
      font-size: 18pt;
      font-weight: bold;
      margin-bottom: 2px;
    }
    
    .header-center .order-number {
      font-size: 12pt;
      font-weight: bold;
      color: #1e40af;
    }
    
    .status-badge {
      display: inline-block;
      padding: 2px 8px;
      border-radius: 4px;
      font-size: 7pt;
      font-weight: bold;
      margin: 2px 0;
    }
    
    .status-draft { background: #fef3c7; color: #92400e; }
    .status-approved { background: #d1fae5; color: #065f46; }
    .status-sent { background: #dbeafe; color: #1e40af; }
    
    /* === INFO GRID === */
    .info-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 8px;
      margin-bottom: 10px;
    }
    
    .info-box {
      border: 1px solid #d1d5db;
      background: #f9fafb;
      padding: 6px;
    }
    
    .info-box h3 {
      font-size: 9pt;
      font-weight: bold;
      margin-bottom: 4px;
      padding-bottom: 2px;
      border-bottom: 1px solid #d1d5db;
      color: #1f2937;
    }
    
    .info-row {
      display: grid;
      grid-template-columns: 60px 1fr;
      gap: 4px;
      margin-bottom: 1px;
      font-size: 7pt;
    }
    
    .info-label {
      font-weight: bold;
      color: #374151;
    }
    
    .info-value {
      color: #111827;
    }
    
    /* === PROJECT INFO FULL WIDTH === */
    .project-info {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 8px;
      margin: 8px 0;
    }
    
    /* === ITEMS TABLE === */
    .items-section {
      margin: 10px 0;
    }
    
    .items-header {
      background: #1e40af;
      color: white;
      padding: 4px 8px;
      font-weight: bold;
      font-size: 9pt;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 7pt;
      margin-bottom: 8px;
    }
    
    th, td {
      border: 1px solid #d1d5db;
      padding: 2px 4px;
      vertical-align: middle;
    }
    
    th {
      background-color: #f3f4f6;
      font-weight: bold;
      text-align: center;
      font-size: 7pt;
    }
    
    .text-center { text-align: center; }
    .text-right { text-align: right; }
    .text-small { font-size: 6pt; }
    
    .financial-summary {
      margin-top: 5px;
      background: #f8fafc;
      border: 1px solid #e2e8f0;
    }
    
    .financial-row {
      display: grid;
      grid-template-columns: 1fr auto auto;
      gap: 10px;
      padding: 3px 8px;
      border-bottom: 1px solid #e2e8f0;
      font-size: 7pt;
    }
    
    .financial-row:last-child {
      border-bottom: none;
      font-weight: bold;
      background: #e2e8f0;
    }
    
    /* === TERMS & CONDITIONS === */
    .terms-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 6px;
      margin: 8px 0;
    }
    
    .terms-box {
      border: 1px solid #d1d5db;
      padding: 4px;
      background: #fffbeb;
    }
    
    .terms-box h4 {
      font-size: 8pt;
      font-weight: bold;
      margin-bottom: 3px;
      color: #92400e;
    }
    
    .terms-content {
      font-size: 7pt;
      color: #451a03;
    }
    
    /* === ATTACHMENTS & COMMUNICATION === */
    .comm-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 6px;
      margin: 8px 0;
    }
    
    .comm-box {
      border: 1px solid #d1d5db;
      padding: 4px;
      background: #f0f9ff;
      font-size: 7pt;
    }
    
    .comm-box h4 {
      font-size: 8pt;
      font-weight: bold;
      margin-bottom: 3px;
      color: #1e40af;
    }
    
    .attachment-item {
      background: #e0e7ff;
      padding: 2px 4px;
      margin: 1px 0;
      border-radius: 2px;
      font-size: 6pt;
    }
    
    .email-item {
      background: #f0f9ff;
      padding: 2px 4px;
      margin: 1px 0;
      border-radius: 2px;
      font-size: 6pt;
    }
    
    
    /* Approval styles removed */
    .removed-approval-header {
      background: #1e40af;
      color: white;
      padding: 4px 8px;
      font-weight: bold;
      font-size: 9pt;
    }
    
    .approval-grid {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      gap: 1px;
      padding: 4px;
    }
    
    .approval-box {
      border: 1px solid #d1d5db;
      padding: 4px;
      text-align: center;
      background: white;
      min-height: 50px;
    }
    
    .approval-box.approved {
      background: #d1fae5;
      border-color: #10b981;
    }
    
    .approval-box.rejected {
      background: #fee2e2;
      border-color: #ef4444;
    }
    
    .approval-box.pending {
      background: #fef3c7;
      border-color: #f59e0b;
    }
    
    .approval-title {
      font-size: 7pt;
      font-weight: bold;
      margin-bottom: 2px;
    }
    
    .approval-status {
      font-size: 12pt;
      font-weight: bold;
      margin: 3px 0;
    }
    
    .approval-name {
      font-size: 6pt;
      margin-bottom: 1px;
    }
    
    .approval-date {
      font-size: 6pt;
      color: #666;
    }
    
    /* === FOOTER === */
    .footer {
      margin-top: 10px;
      padding-top: 8px;
      border-top: 2px solid #374151;
      font-size: 7pt;
      color: #374151;
    }
    
    .company-info {
      text-align: center;
      margin-bottom: 6px;
    }
    
    .company-info .name {
      font-size: 10pt;
      font-weight: bold;
      margin-bottom: 2px;
    }
    
    .doc-metadata {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      gap: 10px;
      align-items: center;
      font-size: 6pt;
      color: #6b7280;
      border-top: 1px solid #e5e7eb;
      padding-top: 4px;
    }
    
    .doc-metadata .center {
      text-align: center;
    }
    
    .doc-metadata .right {
      text-align: right;
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- HEADER -->
    <div class="header" style="text-align: left; padding: 20px 0;">
      <h1 style="margin-bottom: 8px; white-space: nowrap;">\uAD6C\uB9E4\uBC1C\uC8FC\uC11C</h1>
      <div class="order-number" style="margin-bottom: 5px;">\uBC1C\uC8FC\uBC88\uD638: ${data.orderNumber}</div>
    </div>
    
    <!-- COMPANY & VENDOR INFO -->
    <div class="info-grid">
      <div class="info-box">
        <h3>\uBC1C\uC8FC\uC5C5\uCCB4 \uC815\uBCF4</h3>
        <div class="info-row">
          <span class="info-label">\uC5C5\uCCB4\uBA85</span>
          <span class="info-value">${data.issuerCompany.name}</span>
        </div>
        <div class="info-row">
          <span class="info-label">\uC0AC\uC5C5\uC790\uBC88\uD638</span>
          <span class="info-value">${data.issuerCompany.businessNumber || "-"}</span>
        </div>
        <div class="info-row">
          <span class="info-label">\uB300\uD45C\uC790</span>
          <span class="info-value">${data.issuerCompany.representative || "-"}</span>
        </div>
        <div class="info-row">
          <span class="info-label">\uC8FC\uC18C</span>
          <span class="info-value">${data.issuerCompany.address || "-"}</span>
        </div>
        <div class="info-row">
          <span class="info-label">\uC5F0\uB77D\uCC98</span>
          <span class="info-value">${data.issuerCompany.phone || "-"}</span>
        </div>
      </div>
      
      <div class="info-box">
        <h3>\uC218\uC8FC\uC5C5\uCCB4 \uC815\uBCF4</h3>
        <div class="info-row">
          <span class="info-label">\uC5C5\uCCB4\uBA85</span>
          <span class="info-value">${data.vendorCompany.name}</span>
        </div>
        <div class="info-row">
          <span class="info-label">\uC0AC\uC5C5\uC790\uBC88\uD638</span>
          <span class="info-value">${data.vendorCompany.businessNumber || "-"}</span>
        </div>
        <div class="info-row">
          <span class="info-label">\uB300\uD45C\uC790</span>
          <span class="info-value">${data.vendorCompany.representative || "-"}</span>
        </div>
        <div class="info-row">
          <span class="info-label">\uB2F4\uB2F9\uC790</span>
          <span class="info-value">${data.vendorCompany.contactPerson || "-"}</span>
        </div>
        <div class="info-row">
          <span class="info-label">\uC5F0\uB77D\uCC98</span>
          <span class="info-value">${data.vendorCompany.phone || "-"}</span>
        </div>
      </div>
      
      <!-- PROJECT INFO (FULL WIDTH) -->
      <div class="project-info">
        <div class="info-box">
          <h3>\uD604\uC7A5</h3>
          <div class="info-row">
            <span class="info-label">\uD604\uC7A5\uBA85</span>
            <span class="info-value">${data.project.name}</span>
          </div>
          <div class="info-row">
            <span class="info-label">\uD604\uC7A5\uCF54\uB4DC</span>
            <span class="info-value">${data.project.code || "-"}</span>
          </div>
          <div class="info-row">
            <span class="info-label">\uBC1C\uC8FC\uCC98</span>
            <span class="info-value">-</span>
          </div>
        </div>
        
        <div class="info-box">
          <h3>\uC77C\uC815</h3>
          <div class="info-row">
            <span class="info-label">\uBC1C\uC8FC\uC77C</span>
            <span class="info-value">${formatDate(data.orderDate)}</span>
          </div>
          <div class="info-row">
            <span class="info-label">\uB0A9\uAE30\uC77C</span>
            <span class="info-value">${formatDate(data.deliveryDate)}</span>
          </div>
          <div class="info-row">
            <span class="info-label">\uB4F1\uB85D\uC77C</span>
            <span class="info-value">${formatDate(data.createdAt)}</span>
          </div>
        </div>
        
        <div class="info-box">
          <h3>\uB2F4\uB2F9\uC790</h3>
          <div class="info-row">
            <span class="info-label">\uC791\uC131\uC790</span>
            <span class="info-value">${data.creator.name}</span>
          </div>
          <div class="info-row">
            <span class="info-label">\uC9C1\uCC45</span>
            <span class="info-value">-</span>
          </div>
          <div class="info-row">
            <span class="info-label">\uC5F0\uB77D\uCC98</span>
            <span class="info-value">${data.creator.phone || "-"}</span>
          </div>
        </div>
      </div>
    </div>
    
    <!-- ITEMS SECTION -->
    <div class="items-section">
      <div class="items-header">\uBC1C\uC8FC \uD488\uBAA9 (\uCD1D ${data.items.length}\uAC1C \uD488\uBAA9)</div>
      <table>
        <thead>
          <tr>
            <th style="width: 5%">\uC21C\uBC88</th>
            <th style="width: 22%">\uD488\uBAA9\uBA85</th>
            <th style="width: 17%">\uADDC\uACA9</th>
            <th style="width: 8%">\uC218\uB7C9</th>
            <th style="width: 6%">\uB2E8\uC704</th>
            <th style="width: 12%">\uB2E8\uAC00</th>
            <th style="width: 12%">\uAE08\uC561</th>
            <th style="width: 23%">\uD2B9\uC774\uC0AC\uD56D</th>
          </tr>
        </thead>
        <tbody>
          ${itemRows}
        </tbody>
      </table>
      
      <!-- FINANCIAL SUMMARY -->
      <div class="financial-summary">
        <div class="financial-row">
          <span>\uC18C\uACC4 (\uBD80\uAC00\uC138 \uBCC4\uB3C4)</span>
          <span></span>
          <span>${formatCurrency(data.financial.subtotalAmount)}</span>
        </div>
        <div class="financial-row">
          <span>\uBD80\uAC00\uC138 (${(data.financial.vatRate * 100).toFixed(0)}%)</span>
          <span></span>
          <span>${formatCurrency(data.financial.vatAmount)}</span>
        </div>
        <div class="financial-row">
          <span>\uCD1D \uAE08\uC561</span>
          <span></span>
          <span>${formatCurrency(data.financial.totalAmount)}</span>
        </div>
      </div>
    </div>
    
    
    <!-- NOTES -->
    ${data.metadata.notes ? `
    <div style="margin: 8px 0; padding: 6px; border: 1px solid #d1d5db; background: #fffbeb; font-size: 7pt;">
      <strong>\uD2B9\uC774\uC0AC\uD56D:</strong> ${data.metadata.notes}
    </div>
    ` : ""}
    
    <!-- FOOTER -->
    <div class="footer">
      <div class="company-info">
        <div class="name">${data.issuerCompany.name}</div>
        ${data.issuerCompany.representative ? `<div>\uB300\uD45C\uC790: ${data.issuerCompany.representative}</div>` : ""}
        <div>${data.issuerCompany.address || ""}</div>
        <div>TEL: ${data.issuerCompany.phone || ""} | EMAIL: ${data.issuerCompany.email || ""}</div>
        ${data.issuerCompany.businessNumber ? `<div>\uC0AC\uC5C5\uC790\uB4F1\uB85D\uBC88\uD638: ${data.issuerCompany.businessNumber}</div>` : ""}
      </div>
      
      <div class="doc-metadata">
        <div>\uC0DD\uC131\uC77C\uC2DC: ${formatDate(data.metadata.generatedAt)}</div>
        <div class="center">\uBCF8 \uBB38\uC11C\uB294 \uC804\uC790\uC801\uC73C\uB85C \uC0DD\uC131\uB418\uC5C8\uC2B5\uB2C8\uB2E4</div>
        <div class="right">Template ${data.metadata.templateVersion}</div>
      </div>
    </div>
  </div>
</body>
</html>
    `;
      }
      /**
       * HTML을 PDF로 변환
       */
      static async convertHTMLToPDFFromString(htmlContent) {
        if (process.env.VERCEL) {
          throw new Error("HTML to PDF conversion not supported in Vercel - use PDFKit instead");
        } else {
          try {
            const { chromium: chromium2 } = await import("playwright");
            const browser = await chromium2.launch({
              headless: true,
              args: ["--no-sandbox", "--disable-dev-shm-usage"]
            });
            const page = await browser.newPage();
            try {
              await page.setContent(htmlContent, {
                waitUntil: "networkidle"
              });
              const pdfBuffer = await page.pdf({
                format: "A4",
                printBackground: true,
                margin: {
                  top: "8mm",
                  right: "8mm",
                  bottom: "8mm",
                  left: "8mm"
                }
              });
              return pdfBuffer;
            } finally {
              await browser.close();
            }
          } catch (playwrightError) {
            console.warn("\u26A0\uFE0F Playwright \uC2E4\uD328, PDFKit\uC73C\uB85C \uB300\uCCB4:", playwrightError);
            throw new Error(`PDF \uC0DD\uC131 \uC2E4\uD328: ${playwrightError instanceof Error ? playwrightError.message : "Playwright \uC624\uB958"}`);
          }
        }
      }
      /**
       * PDFKit으로 전문적인 발주서 PDF 생성
       */
      static async generateProfessionalPDFWithPDFKit(orderData) {
        const PDFKitDocument = (await import("pdfkit")).default;
        const fs22 = await import("fs");
        return new Promise((resolve, reject) => {
          try {
            const doc = new PDFKitDocument({
              size: "A4",
              margins: { top: 20, bottom: 20, left: 20, right: 20 },
              autoFirstPage: true
            });
            const buffers = [];
            doc.on("data", buffers.push.bind(buffers));
            doc.on("end", () => resolve(Buffer.concat(buffers)));
            doc.on("error", reject);
            console.log("\u{1F4DD} [ProfessionalPDF] PDFKit\uC73C\uB85C PDF \uC0DD\uC131 (\uD55C\uAE00 \uD3F0\uD2B8 \uB4F1\uB85D)");
            let koreanFontPath = null;
            const possibleFonts = [
              "/System/Library/Fonts/Supplemental/AppleGothic.ttf",
              // macOS
              "/System/Library/Fonts/Supplemental/AppleMyungjo.ttf",
              // macOS 명조
              "C:\\Windows\\Fonts\\malgun.ttf",
              // Windows
              "C:\\Windows\\Fonts\\gulim.ttf",
              // Windows 굴림
              "/usr/share/fonts/truetype/nanum/NanumGothic.ttf",
              // Linux
              "/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc"
              // Linux Noto
            ];
            for (const fontPath of possibleFonts) {
              try {
                if (fs22.existsSync(fontPath)) {
                  koreanFontPath = fontPath;
                  console.log(`\u2705 [ProfessionalPDF] \uD55C\uAE00 \uD3F0\uD2B8 \uBC1C\uACAC: ${fontPath}`);
                  break;
                }
              } catch (error) {
                continue;
              }
            }
            if (koreanFontPath) {
              try {
                doc.registerFont("Korean", koreanFontPath);
                doc.font("Korean");
                console.log(`\u2705 [ProfessionalPDF] \uD55C\uAE00 \uD3F0\uD2B8 \uB4F1\uB85D \uC644\uB8CC: ${koreanFontPath}`);
              } catch (fontError) {
                console.warn("\u26A0\uFE0F [ProfessionalPDF] \uD55C\uAE00 \uD3F0\uD2B8 \uB4F1\uB85D \uC2E4\uD328, \uAE30\uBCF8 \uD3F0\uD2B8 \uC0AC\uC6A9:", fontError);
                doc.font("Helvetica");
              }
            } else {
              console.warn("\u26A0\uFE0F [ProfessionalPDF] \uD55C\uAE00 \uD3F0\uD2B8\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC74C, \uAE30\uBCF8 \uD3F0\uD2B8 \uC0AC\uC6A9");
              doc.font("Helvetica");
            }
            const safeText = (text2) => {
              return text2 || "";
            };
            const formatDate = (date2) => {
              if (!date2) return "-";
              return format(new Date(date2), "yyyy\uB144 MM\uC6D4 dd\uC77C", { locale: ko });
            };
            const formatCurrency = (amount) => {
              return new Intl.NumberFormat("ko-KR", {
                style: "currency",
                currency: "KRW"
              }).format(amount);
            };
            doc.fontSize(16).text(safeText("\uAD6C\uB9E4\uBC1C\uC8FC\uC11C"), 20, doc.y);
            doc.fontSize(12).text(safeText(`\uBC1C\uC8FC\uBC88\uD638: ${orderData.orderNumber}`), 20, doc.y);
            doc.moveTo(20, doc.y + 5).lineTo(575, doc.y + 5).stroke();
            doc.moveDown(1);
            const infoY = doc.y;
            doc.fontSize(8);
            doc.text(safeText("\u3010\uBC1C\uC8FC\uC5C5\uCCB4\u3011"), 20, infoY);
            doc.text(safeText(`\uC5C5\uCCB4\uBA85: ${orderData.issuerCompany.name}`), 20, infoY + 12);
            doc.text(safeText(`\uC0AC\uC5C5\uC790\uBC88\uD638: ${orderData.issuerCompany.businessNumber || "-"}`), 20, infoY + 24);
            doc.text(safeText(`\uC5F0\uB77D\uCC98: ${orderData.issuerCompany.phone || "-"}`), 20, infoY + 36);
            doc.text(safeText(`\uC8FC\uC18C: ${orderData.issuerCompany.address || "-"}`), 20, infoY + 48);
            doc.text(safeText("\u3010\uC218\uC8FC\uC5C5\uCCB4\u3011"), 200, infoY);
            doc.text(safeText(`\uC5C5\uCCB4\uBA85: ${orderData.vendorCompany.name}`), 200, infoY + 12);
            doc.text(safeText(`\uC0AC\uC5C5\uC790\uBC88\uD638: ${orderData.vendorCompany.businessNumber || "-"}`), 200, infoY + 24);
            doc.text(safeText(`\uB2F4\uB2F9\uC790: ${orderData.vendorCompany.contactPerson || "-"}`), 200, infoY + 36);
            doc.text(safeText(`\uC5F0\uB77D\uCC98: ${orderData.vendorCompany.phone || "-"}`), 200, infoY + 48);
            doc.text(safeText("\u3010\uD604\uC7A5\uC815\uBCF4\u3011"), 380, infoY);
            doc.text(safeText(`\uD604\uC7A5\uBA85: ${orderData.project.name}`), 380, infoY + 12);
            doc.text(safeText(`\uBC1C\uC8FC\uC77C: ${formatDate(orderData.orderDate)}`), 380, infoY + 24);
            doc.text(safeText(`\uB0A9\uAE30\uC77C: ${formatDate(orderData.deliveryDate)}`), 380, infoY + 36);
            doc.text(safeText(`\uC791\uC131\uC790: ${orderData.creator.name}`), 380, infoY + 48);
            doc.y = infoY + 70;
            doc.moveTo(20, doc.y).lineTo(575, doc.y).stroke();
            doc.moveDown(1);
            doc.fontSize(9).text(safeText(`\uBC1C\uC8FC \uD488\uBAA9 (\uCD1D ${orderData.items.length}\uAC1C)`), 20);
            doc.moveDown(0.5);
            const tableTop = doc.y;
            doc.fontSize(7);
            doc.rect(20, tableTop, 555, 15).fill("#e5e7eb");
            doc.fillColor("black");
            doc.text("No", 25, tableTop + 3);
            doc.text(safeText("\uD488\uBAA9\uBA85"), 50, tableTop + 3);
            doc.text(safeText("\uADDC\uACA9"), 180, tableTop + 3);
            doc.text(safeText("\uC218\uB7C9"), 260, tableTop + 3);
            doc.text(safeText("\uB2E8\uC704"), 300, tableTop + 3);
            doc.text(safeText("\uB2E8\uAC00"), 340, tableTop + 3);
            doc.text(safeText("\uAE08\uC561"), 420, tableTop + 3);
            doc.text(safeText("\uD2B9\uC774\uC0AC\uD56D"), 500, tableTop + 3);
            doc.rect(20, tableTop, 555, 15).stroke();
            let currentY = tableTop + 15;
            orderData.items.slice(0, 15).forEach((item, index2) => {
              const rowHeight = 16;
              if (index2 % 2 === 0) {
                doc.rect(20, currentY, 555, rowHeight).fill("#f9fafb");
                doc.fillColor("black");
              }
              doc.fontSize(6);
              doc.text(`${item.sequenceNo}`, 25, currentY + 3);
              doc.text(safeText(item.name.substring(0, 25)), 50, currentY + 3);
              doc.text(safeText((item.specification || "-").substring(0, 15)), 180, currentY + 3);
              doc.text(safeText(item.quantity.toString()), 260, currentY + 3);
              doc.text(safeText(item.unit || "-"), 300, currentY + 3);
              doc.text(safeText(formatCurrency(item.unitPrice)), 340, currentY + 3);
              doc.text(safeText(formatCurrency(item.totalPrice)), 420, currentY + 3);
              const formatRemarksForPDF = (item2) => {
                let result = "";
                if (item2.deliveryLocation) {
                  result += `\u2022 ${item2.deliveryLocation.substring(0, 15)}`;
                }
                if (item2.deliveryEmail) {
                  result += `\\n${item2.deliveryEmail.substring(0, 20)}`;
                }
                return result || "-";
              };
              doc.text(safeText(formatRemarksForPDF(item)), 500, currentY + 3);
              doc.rect(20, currentY, 555, rowHeight).stroke();
              currentY += rowHeight;
            });
            if (orderData.items.length > 15) {
              doc.rect(20, currentY, 555, 16).fill("#fef3c7");
              doc.fillColor("black");
              doc.fontSize(7).text(safeText(`... \uC678 ${orderData.items.length - 15}\uAC1C \uD488\uBAA9 (\uBCC4\uB3C4 \uCCA8\uBD80\uC790\uB8CC \uCC38\uACE0)`), 25, currentY + 3);
              doc.rect(20, currentY, 555, 16).stroke();
              currentY += 16;
            }
            doc.rect(20, currentY, 555, 16).fill("#e3f2fd");
            doc.fillColor("black");
            doc.fontSize(6);
            doc.text(safeText("\uC18C\uACC4 (\uBD80\uAC00\uC138\uBCC4\uB3C4)"), 25, currentY + 3);
            doc.text(safeText(formatCurrency(orderData.financial.subtotalAmount)), 420, currentY + 3);
            doc.rect(20, currentY, 555, 16).stroke();
            currentY += 16;
            doc.rect(20, currentY, 555, 16).fill("#e3f2fd");
            doc.fillColor("black");
            doc.fontSize(6);
            doc.text(safeText(`\uBD80\uAC00\uC138 (${(orderData.financial.vatRate * 100).toFixed(0)}%)`), 25, currentY + 3);
            doc.text(safeText(formatCurrency(orderData.financial.vatAmount)), 420, currentY + 3);
            doc.rect(20, currentY, 555, 16).stroke();
            currentY += 16;
            doc.rect(20, currentY, 555, 16).fill("#1e40af");
            doc.fillColor("white");
            doc.fontSize(7).text(safeText("\uCD1D \uAE08\uC561"), 25, currentY + 3);
            doc.text(safeText(formatCurrency(orderData.financial.totalAmount)), 420, currentY + 3);
            doc.rect(20, currentY, 555, 16).stroke();
            doc.fillColor("black");
            doc.moveDown(2);
            doc.fontSize(7);
            if (orderData.metadata.notes) {
              doc.text(safeText("\uD2B9\uC774\uC0AC\uD56D:"), 20);
              doc.text(safeText(orderData.metadata.notes), 20, doc.y + 8);
              doc.moveDown(1);
            }
            doc.moveDown(2);
            doc.y = doc.y + 15;
            doc.fontSize(8);
            doc.text(safeText(orderData.issuerCompany.name), { align: "center" });
            if (orderData.issuerCompany.representative) {
              doc.text(safeText(`\uB300\uD45C\uC790: ${orderData.issuerCompany.representative}`), { align: "center" });
            }
            doc.fontSize(6);
            doc.text(safeText(orderData.issuerCompany.address || ""), { align: "center" });
            doc.text(safeText(`TEL: ${orderData.issuerCompany.phone || ""} | EMAIL: ${orderData.issuerCompany.email || ""}`), { align: "center" });
            doc.text(safeText(`\uC0AC\uC5C5\uC790\uB4F1\uB85D\uBC88\uD638: ${orderData.issuerCompany.businessNumber || ""}`), { align: "center" });
            doc.moveDown(1);
            doc.fontSize(6);
            doc.text(safeText(`\uBB38\uC11C ID: ${orderData.metadata.documentId} | \uC0DD\uC131\uC77C\uC2DC: ${formatDate(orderData.metadata.generatedAt)} | Template: ${orderData.metadata.templateVersion}`), { align: "center" });
            doc.end();
          } catch (error) {
            reject(error);
          }
        });
      }
    };
  }
});

// server/utils/debug-logger.ts
var DebugLogger;
var init_debug_logger = __esm({
  "server/utils/debug-logger.ts"() {
    "use strict";
    DebugLogger = class {
      static {
        this.isDebugMode = process.env.NODE_ENV === "development";
      }
      static logFunctionEntry(functionName, params = {}) {
        if (!this.isDebugMode) return;
        console.log(`\u{1F527} [ENTRY] ${functionName}`);
        console.log(`   \uC2DC\uAC04: ${(/* @__PURE__ */ new Date()).toISOString()}`);
        if (Object.keys(params).length > 0) {
          console.log(`   \uD30C\uB77C\uBBF8\uD130:`, JSON.stringify(params, null, 2));
        }
        console.log(`   ===============================`);
      }
      static logFunctionExit(functionName, result = {}) {
        if (!this.isDebugMode) return;
        console.log(`\u2705 [EXIT] ${functionName}`);
        console.log(`   \uC2DC\uAC04: ${(/* @__PURE__ */ new Date()).toISOString()}`);
        if (Object.keys(result).length > 0) {
          console.log(`   \uACB0\uACFC:`, JSON.stringify(result, null, 2));
        }
        console.log(`   ===============================`);
      }
      static logError(functionName, error) {
        console.error(`\u274C [ERROR] ${functionName}`);
        console.error(`   \uC2DC\uAC04: ${(/* @__PURE__ */ new Date()).toISOString()}`);
        console.error(`   \uC624\uB958:`, error);
        console.error(`   ===============================`);
      }
      static logExecutionPath(apiEndpoint, actualFunction) {
        if (!this.isDebugMode) return;
        console.log(`\u{1F50D} [EXECUTION PATH]`);
        console.log(`   API: ${apiEndpoint}`);
        console.log(`   \uC2E4\uC81C \uD638\uCD9C: ${actualFunction}`);
        console.log(`   \uC2DC\uAC04: ${(/* @__PURE__ */ new Date()).toISOString()}`);
        console.log(`   ===============================`);
      }
    };
  }
});

// server/utils/po-template-processor-mock.ts
var po_template_processor_mock_exports = {};
__export(po_template_processor_mock_exports, {
  POTemplateProcessorMock: () => POTemplateProcessorMock
});
import XLSX4 from "xlsx";
import { eq as eq12 } from "drizzle-orm";
var POTemplateProcessorMock;
var init_po_template_processor_mock = __esm({
  "server/utils/po-template-processor-mock.ts"() {
    "use strict";
    init_excel_input_sheet_remover();
    init_db();
    init_schema();
    init_debug_logger();
    init_professional_pdf_generation_service();
    POTemplateProcessorMock = class {
      /**
       * Excel 파일에서 Input 시트를 파싱하여 발주서 데이터 추출
       */
      static parseInputSheet(filePath) {
        try {
          const workbook = XLSX4.readFile(filePath);
          if (!workbook.SheetNames.includes("Input")) {
            return {
              success: false,
              totalOrders: 0,
              totalItems: 0,
              orders: [],
              error: "Input \uC2DC\uD2B8\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4."
            };
          }
          const worksheet = workbook.Sheets["Input"];
          const data = XLSX4.utils.sheet_to_json(worksheet, { header: 1 });
          const rows = data.slice(1);
          const ordersByVendorAndDate = /* @__PURE__ */ new Map();
          for (const row of rows) {
            if (!row || row.length === 0 || !row[0] && !row[2] && !row[10]) continue;
            while (row.length < 17) {
              row.push("");
            }
            console.log("\u{1F50D} [\uD30C\uC2F1] \uC6D0\uBCF8 row \uB370\uC774\uD130:", {
              row\uAE38\uC774: row.length,
              \uBAA8\uB4E0\uAC12: row,
              H\uC5F4_\uC778\uB371\uC2A47: row[7],
              I\uC5F4_\uC778\uB371\uC2A48: row[8],
              J\uC5F4_\uC778\uB371\uC2A49: row[9],
              N\uC5F4_\uC778\uB371\uC2A413: row[13],
              O\uC5F4_\uC778\uB371\uC2A414: row[14],
              P\uC5F4_\uC778\uB371\uC2A415: row[15]
            });
            const vendorName = String(row[0] || "").trim();
            const siteName = String(row[1] || "").trim();
            const orderDate = this.formatDate(row[2]) || (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
            const dueDate = this.formatDate(row[3]) || "";
            const excelOrderNumber = String(row[4] || "").trim();
            const itemName = String(row[5] || "").trim();
            const specification = String(row[6] || "-").trim();
            const quantity = this.safeNumber(row[7]);
            const unit = String(row[8] || "").trim();
            const unitPrice = this.safeNumber(row[9]);
            const supplyAmount = this.safeNumber(row[10]);
            const taxAmount = this.safeNumber(row[11]);
            const totalAmount = this.safeNumber(row[12]);
            const categoryLv1 = String(row[13] || "").trim();
            const categoryLv2 = String(row[14] || "").trim();
            const categoryLv3 = String(row[15] || "").trim();
            const notes = String(row[16] || "").trim();
            console.log("\u{1F50D} [\uD30C\uC2F1] \uBD84\uB958 \uAC12 \uD655\uC778:", {
              row\uAE38\uC774: row.length,
              categoryLv1: `"${categoryLv1}" (\uC778\uB371\uC2A4 13)`,
              categoryLv2: `"${categoryLv2}" (\uC778\uB371\uC2A4 14)`,
              categoryLv3: `"${categoryLv3}" (\uC778\uB371\uC2A4 15)`,
              row13\uAC12: row[13],
              row14\uAC12: row[14],
              row15\uAC12: row[15]
            });
            const vendorEmail = "";
            const deliveryName = vendorName;
            const deliveryEmail = "";
            const vendorDateKey = `${vendorName}_${orderDate}`;
            if (!ordersByVendorAndDate.has(vendorDateKey)) {
              const orderNumber = excelOrderNumber || this.generateOrderNumber(orderDate, vendorName);
              ordersByVendorAndDate.set(vendorDateKey, {
                orderNumber,
                orderDate,
                siteName,
                dueDate,
                vendorName,
                totalAmount: 0,
                items: []
              });
            }
            const order = ordersByVendorAndDate.get(vendorDateKey);
            if (itemName) {
              const item = {
                itemName,
                specification,
                quantity,
                unitPrice,
                supplyAmount,
                taxAmount,
                totalAmount,
                categoryLv1,
                categoryLv2,
                categoryLv3,
                // 클라이언트 호환성을 위한 필드 추가
                majorCategory: categoryLv1,
                middleCategory: categoryLv2,
                minorCategory: categoryLv3,
                vendorName,
                deliveryName,
                notes
              };
              order.items.push(item);
              order.totalAmount += totalAmount;
            }
          }
          const orders = Array.from(ordersByVendorAndDate.values());
          return {
            success: true,
            totalOrders: orders.length,
            totalItems: orders.reduce((sum2, order) => sum2 + order.items.length, 0),
            orders
          };
        } catch (error) {
          return {
            success: false,
            totalOrders: 0,
            totalItems: 0,
            orders: [],
            error: error instanceof Error ? error.message : "Unknown error"
          };
        }
      }
      /**
       * 파싱된 발주서 데이터를 Mock DB에 저장
       */
      static async saveToDatabase(orders, userId) {
        console.log(`\u{1F50D} [DB] saveToDatabase \uC2DC\uC791: ${orders.length}\uAC1C \uBC1C\uC8FC\uC11C, \uC0AC\uC6A9\uC790 ID: ${userId}`);
        try {
          let savedOrders = 0;
          const savedOrderNumbers = [];
          console.log(`\u{1F50D} [DB] \uD2B8\uB79C\uC7AD\uC158 \uC2DC\uC791`);
          await db.transaction(async (tx) => {
            console.log(`\u{1F50D} [DB] \uD2B8\uB79C\uC7AD\uC158 \uB0B4\uBD80 \uC9C4\uC785 \uC131\uACF5`);
            for (const orderData of orders) {
              console.log(`\u{1F50D} [DB] \uBC1C\uC8FC\uC11C \uCC98\uB9AC \uC911: ${orderData.orderNumber}, \uAC70\uB798\uCC98: ${orderData.vendorName}`);
              console.log(`\u{1F50D} [DB] \uAC70\uB798\uCC98 \uC870\uD68C: ${orderData.vendorName}`);
              let vendor = await tx.select().from(vendors).where(eq12(vendors.name, orderData.vendorName)).limit(1);
              let vendorId;
              if (vendor.length === 0) {
                console.log(`\u{1F50D} [DB] \uAC70\uB798\uCC98 \uC0DD\uC131: ${orderData.vendorName}`);
                const newVendor = await tx.insert(vendors).values({
                  name: orderData.vendorName,
                  contactPerson: "Unknown",
                  email: "noemail@example.com",
                  phone: null,
                  isActive: true
                }).returning({ id: vendors.id });
                vendorId = newVendor[0].id;
                console.log(`\u2705 [DB] \uAC70\uB798\uCC98 \uC0DD\uC131\uB428: ID ${vendorId}`);
              } else {
                vendorId = vendor[0].id;
                console.log(`\u2705 [DB] \uAC70\uB798\uCC98 \uAE30\uC874 \uBC1C\uACAC: ID ${vendorId}`);
              }
              console.log(`\u{1F50D} [DB] \uD504\uB85C\uC81D\uD2B8 \uC870\uD68C: ${orderData.siteName}`);
              let project = await tx.select().from(projects).where(eq12(projects.projectName, orderData.siteName)).limit(1);
              let projectId;
              if (project.length === 0) {
                console.log(`\u{1F50D} [DB] \uD504\uB85C\uC81D\uD2B8 \uC0DD\uC131: ${orderData.siteName}`);
                const newProject = await tx.insert(projects).values({
                  projectName: orderData.siteName,
                  projectCode: `AUTO-${Date.now()}`,
                  description: "",
                  startDate: (/* @__PURE__ */ new Date()).toISOString().split("T")[0],
                  endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1e3).toISOString().split("T")[0],
                  // 1년 후
                  isActive: true,
                  projectManagerId: null,
                  orderManagerId: null
                }).returning({ id: projects.id });
                projectId = newProject[0].id;
                console.log(`\u2705 [DB] \uD504\uB85C\uC81D\uD2B8 \uC0DD\uC131\uB428: ID ${projectId}`);
              } else {
                projectId = project[0].id;
                console.log(`\u2705 [DB] \uD504\uB85C\uC81D\uD2B8 \uAE30\uC874 \uBC1C\uACAC: ID ${projectId}`);
              }
              const newOrder = await tx.insert(purchaseOrders).values({
                orderNumber: orderData.orderNumber,
                projectId,
                vendorId,
                userId,
                orderDate: orderData.orderDate,
                deliveryDate: orderData.dueDate,
                totalAmount: orderData.totalAmount,
                status: "approved",
                // Legacy status for backward compatibility
                orderStatus: "created",
                // New dual status - created initially, will be updated to 'sent' after email
                approvalStatus: "not_required",
                // Excel automation bypasses approval
                approvalBypassReason: "excel_automation",
                // Reason for bypassing
                notes: `PO Template\uC5D0\uC11C \uC790\uB3D9 \uC0DD\uC131\uB428`
              }).returning({ id: purchaseOrders.id, orderNumber: purchaseOrders.orderNumber });
              const orderId = newOrder[0].id;
              const orderNumber = newOrder[0].orderNumber;
              savedOrderNumbers.push(orderNumber);
              const itemsForPDF = [];
              for (const item of orderData.items) {
                await tx.insert(purchaseOrderItems).values({
                  orderId,
                  itemName: item.itemName,
                  specification: item.specification || "",
                  quantity: item.quantity,
                  unitPrice: item.unitPrice,
                  totalAmount: item.totalAmount,
                  // 카테고리 필드를 올바른 컬럼에 저장
                  majorCategory: item.categoryLv1 || null,
                  middleCategory: item.categoryLv2 || null,
                  minorCategory: item.categoryLv3 || null,
                  notes: item.notes || null
                });
                itemsForPDF.push({
                  category: item.categoryLv1 || "",
                  subCategory1: item.categoryLv2 || "",
                  subCategory2: item.categoryLv3 || "",
                  name: item.itemName,
                  specification: item.specification || "",
                  quantity: item.quantity,
                  unit: "\uAC1C",
                  // 기본 단위
                  unitPrice: item.unitPrice,
                  price: item.totalAmount,
                  deliveryLocation: item.deliveryName || ""
                });
              }
              try {
                console.log(`\u{1F4C4} [DB] PDF \uC0DD\uC131 \uC2DC\uC791: \uBC1C\uC8FC\uC11C ${orderData.orderNumber}`);
                const vendorInfo = await tx.select().from(vendors).where(eq12(vendors.id, vendorId)).limit(1);
                const projectInfo = await tx.select().from(projects).where(eq12(projects.id, projectId)).limit(1);
                const pdfData = {
                  orderNumber: orderData.orderNumber,
                  orderDate: new Date(orderData.orderDate),
                  deliveryDate: new Date(orderData.dueDate),
                  projectName: projectInfo[0]?.projectName,
                  vendorName: vendorInfo[0]?.name,
                  vendorContact: vendorInfo[0]?.contactPerson,
                  vendorEmail: vendorInfo[0]?.email,
                  items: itemsForPDF,
                  totalAmount: orderData.totalAmount,
                  notes: `PO Template\uC5D0\uC11C \uC790\uB3D9 \uC0DD\uC131\uB428`,
                  site: orderData.siteName
                };
                const pdfResult = await ProfessionalPDFGenerationService.generateProfessionalPurchaseOrderPDF(
                  orderId,
                  userId
                );
                if (pdfResult.success) {
                  console.log(`\u2705 [DB] PDF \uC0DD\uC131 \uC644\uB8CC: ${pdfResult.pdfPath}`);
                } else {
                  console.error(`\u26A0\uFE0F [DB] PDF \uC0DD\uC131 \uC2E4\uD328: ${pdfResult.error}`);
                }
              } catch (pdfError) {
                console.error(`\u274C [DB] PDF \uC0DD\uC131 \uC624\uB958:`, pdfError);
              }
              savedOrders++;
            }
          });
          return {
            success: true,
            savedOrders,
            savedOrderNumbers
          };
        } catch (error) {
          return {
            success: false,
            savedOrders: 0,
            savedOrderNumbers: [],
            error: error instanceof Error ? error.message : "Unknown error"
          };
        }
      }
      /**
       * 특정 시트들을 별도 파일로 추출 - 완전한 ZIP 구조 처리로 100% 서식 보존
       */
      static async extractSheetsToFile(sourcePath, targetPath, sheetNames = ["\uAC11\uC9C0", "\uC744\uC9C0"]) {
        DebugLogger.logFunctionEntry("POTemplateProcessorMock.extractSheetsToFile", {
          sourcePath,
          targetPath,
          sheetNames
        });
        try {
          const result = await removeAllInputSheets(sourcePath, targetPath);
          if (result.success) {
            const returnValue = {
              success: true,
              extractedSheets: result.remainingSheets
            };
            DebugLogger.logFunctionExit("POTemplateProcessorMock.extractSheetsToFile", returnValue);
            return returnValue;
          } else {
            console.error(`\u274C \uC644\uC804\uD55C \uC11C\uC2DD \uBCF4\uC874 \uCD94\uCD9C \uC2E4\uD328: ${result.error}`);
            console.log(`\u{1F504} \uD3F4\uBC31: \uAE30\uBCF8 XLSX \uB77C\uC774\uBE0C\uB7EC\uB9AC\uB85C \uC2DC\uB3C4`);
            const workbook = XLSX4.readFile(sourcePath);
            const newWorkbook = XLSX4.utils.book_new();
            const extractedSheets = [];
            for (const sheetName of sheetNames) {
              if (workbook.SheetNames.includes(sheetName)) {
                const worksheet = workbook.Sheets[sheetName];
                XLSX4.utils.book_append_sheet(newWorkbook, worksheet, sheetName);
                extractedSheets.push(sheetName);
              }
            }
            if (extractedSheets.length > 0) {
              XLSX4.writeFile(newWorkbook, targetPath);
            }
            return {
              success: true,
              extractedSheets
            };
          }
        } catch (error) {
          console.error(`\u274C \uC2DC\uD2B8 \uCD94\uCD9C \uC644\uC804 \uC2E4\uD328:`, error);
          return {
            success: false,
            extractedSheets: [],
            error: error instanceof Error ? error.message : "Unknown error"
          };
        }
      }
      /**
       * 유틸리티 메서드들
       */
      static formatDate(dateValue) {
        if (!dateValue) return "";
        try {
          if (dateValue instanceof Date) {
            return dateValue.toISOString().split("T")[0];
          }
          if (typeof dateValue === "number") {
            const date2 = new Date((dateValue - 25569) * 86400 * 1e3);
            return date2.toISOString().split("T")[0];
          }
          if (typeof dateValue === "string") {
            let dateStr = dateValue.trim();
            if (/^\d{4}\.\d{1,2}\.\d{1,2}$/.test(dateStr)) {
              dateStr = dateStr.replace(/\./g, "-");
            }
            const date2 = new Date(dateStr);
            if (!isNaN(date2.getTime())) {
              return date2.toISOString().split("T")[0];
            }
          }
          return String(dateValue);
        } catch {
          return String(dateValue);
        }
      }
      static safeNumber(value) {
        if (typeof value === "number") return value;
        if (typeof value === "string") {
          const cleaned = value.replace(/[,\s]/g, "");
          const parsed = parseFloat(cleaned);
          return isNaN(parsed) ? 0 : parsed;
        }
        return 0;
      }
      /**
       * 발주번호 생성 (PO-YYYYMMDD-VENDOR-XXX 형식)
       */
      static generateOrderNumber(orderDate, vendorName) {
        const date2 = orderDate ? orderDate.replace(/-/g, "") : (/* @__PURE__ */ new Date()).toISOString().split("T")[0].replace(/-/g, "");
        const vendorCode = vendorName ? vendorName.substring(0, 3).toUpperCase() : "UNK";
        const random = Math.floor(Math.random() * 1e3).toString().padStart(3, "0");
        return `PO-${date2}-${vendorCode}-${random}`;
      }
      /**
       * 기본 납기일자 생성 (발주일 + 7일)
       */
      static getDefaultDueDate(orderDateValue) {
        try {
          const orderDate = this.formatDate(orderDateValue);
          if (!orderDate) {
            const date3 = /* @__PURE__ */ new Date();
            date3.setDate(date3.getDate() + 7);
            return date3.toISOString().split("T")[0];
          }
          const date2 = new Date(orderDate);
          date2.setDate(date2.getDate() + 7);
          return date2.toISOString().split("T")[0];
        } catch {
          const date2 = /* @__PURE__ */ new Date();
          date2.setDate(date2.getDate() + 7);
          return date2.toISOString().split("T")[0];
        }
      }
    };
  }
});

// server/utils/po-email-service-enhanced.ts
var po_email_service_enhanced_exports = {};
__export(po_email_service_enhanced_exports, {
  POEmailService: () => POEmailService2
});
import nodemailer5 from "nodemailer";
import path15 from "path";
import fs18 from "fs";
import { fileURLToPath as fileURLToPath5 } from "url";
import { dirname as dirname2 } from "path";
var __filename5, __dirname5, POEmailService2;
var init_po_email_service_enhanced = __esm({
  "server/utils/po-email-service-enhanced.ts"() {
    "use strict";
    init_excel_input_sheet_remover();
    __filename5 = fileURLToPath5(import.meta.url);
    __dirname5 = dirname2(__filename5);
    POEmailService2 = class {
      constructor() {
        this.isInitialized = false;
        const smtpConfig = {
          host: process.env.SMTP_HOST || "smtp.gmail.com",
          port: parseInt(process.env.SMTP_PORT || "587"),
          secure: false,
          // true for 465, false for other ports
          auth: {
            user: process.env.SMTP_USER,
            pass: process.env.SMTP_PASS
          },
          tls: {
            rejectUnauthorized: false,
            minVersion: "TLSv1.2",
            ciphers: "SSLv3"
            // Some Naver configurations require this
          },
          requireTLS: true,
          // Force TLS for Naver
          debug: true,
          // Enable debug output
          logger: true
          // Enable logging
        };
        console.log("\u{1F4E7} Initializing POEmailService with config:", {
          host: smtpConfig.host,
          port: smtpConfig.port,
          user: smtpConfig.auth.user,
          passLength: smtpConfig.auth.pass?.length || 0,
          passPreview: smtpConfig.auth.pass ? `${smtpConfig.auth.pass.substring(0, 3)}...${smtpConfig.auth.pass.substring(smtpConfig.auth.pass.length - 3)}` : "NOT SET"
        });
        if (!smtpConfig.auth.user || !smtpConfig.auth.pass) {
          console.error("\u274C SMTP credentials missing! Please check SMTP_USER and SMTP_PASS in .env");
          console.error("Current ENV values:", {
            SMTP_HOST: process.env.SMTP_HOST,
            SMTP_PORT: process.env.SMTP_PORT,
            SMTP_USER: process.env.SMTP_USER,
            SMTP_PASS: process.env.SMTP_PASS ? "***" : "NOT SET"
          });
        }
        this.transporter = nodemailer5.createTransport(smtpConfig);
        this.verifyConnection();
      }
      async verifyConnection() {
        try {
          const success = await this.transporter.verify();
          if (success) {
            console.log("\u2705 SMTP server is ready to send emails");
            this.isInitialized = true;
          }
        } catch (error) {
          console.error("\u274C SMTP connection verification failed:", {
            error: error instanceof Error ? error.message : error,
            code: error.code,
            command: error.command,
            responseCode: error.responseCode
          });
          this.isInitialized = false;
        }
      }
      isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      }
      /**
       * Input 시트만 제거한 원본 형식 유지 엑셀과 PDF로 첨부하여 이메일 발송
       * 기존 방식과 달리 엑셀 파일의 원본 형식(테두리, 병합, 색상 등)을 그대로 유지
       */
      async sendPOWithOriginalFormat(originalFilePath, emailOptions) {
        try {
          console.log("\u{1F4E8} sendPOWithOriginalFormat called with:", {
            originalFilePath,
            to: emailOptions.to,
            subject: emailOptions.subject
          });
          if (!this.isInitialized) {
            console.warn("\u26A0\uFE0F Email service not fully initialized, attempting to reconnect...");
            await this.verifyConnection();
            if (!this.isInitialized) {
              return {
                success: false,
                error: "Email service not initialized. Check SMTP configuration."
              };
            }
          }
          const timestamp2 = Date.now();
          const uploadsDir = path15.join(__dirname5, "../../uploads");
          const processedPath = path15.join(uploadsDir, `po-advanced-format-${timestamp2}.xlsx`);
          const removeResult = await removeAllInputSheets(
            originalFilePath,
            processedPath
          );
          if (!removeResult.success) {
            return {
              success: false,
              error: `Input \uC2DC\uD2B8 \uC81C\uAC70 \uC2E4\uD328: ${removeResult.error}`
            };
          }
          console.log(`\u{1F4C4} \uACE0\uAE09 \uD615\uC2DD \uBCF4\uC874 \uD30C\uC77C \uC0DD\uC131: ${processedPath}`);
          console.log(`\u{1F3AF} Input \uC2DC\uD2B8 \uC81C\uAC70 \uC644\uB8CC`);
          console.log(`\u{1F4CB} \uB0A8\uC740 \uC2DC\uD2B8: ${removeResult.remainingSheets.join(", ")}`);
          const pdfPath = path15.join(uploadsDir, `po-advanced-format-${timestamp2}.pdf`);
          let pdfResult = { success: false, error: "" };
          try {
            const enhancedResult = await EnhancedExcelToPDFConverter.convertExcelToPDF(processedPath, {
              outputPath: pdfPath,
              quality: "high",
              orientation: "landscape",
              excludeSheets: ["Input", "Settings"],
              watermark: `\uBC1C\uC8FC\uC11C - ${emailOptions.orderNumber || ""}`
            });
            if (enhancedResult.success) {
              pdfResult.success = true;
              console.log(`\u2705 Enhanced PDF \uBCC0\uD658 \uC131\uACF5: ${pdfPath} (${Math.round(enhancedResult.stats.fileSize / 1024)}KB)`);
            } else {
              console.log("\u26A0\uFE0F Enhanced PDF \uBCC0\uD658 \uC2E4\uD328, \uAE30\uBCF8 \uBCC0\uD658\uAE30 \uC2DC\uB3C4...");
              const basicResult = await ExcelToPDFConverter.convertToPDF(processedPath, pdfPath);
              if (basicResult.success) {
                pdfResult.success = true;
                console.log(`\u2705 Basic PDF \uBCC0\uD658 \uC131\uACF5: ${pdfPath}`);
              } else {
                pdfResult.error = basicResult.error || "PDF conversion failed";
              }
            }
          } catch (pdfError) {
            console.error("\u274C PDF \uBCC0\uD658 \uC624\uB958:", pdfError);
            pdfResult.error = pdfError instanceof Error ? pdfError.message : "PDF conversion error";
          }
          const attachments3 = [];
          if (fs18.existsSync(processedPath)) {
            attachments3.push({
              filename: `\uBC1C\uC8FC\uC11C_${emailOptions.orderNumber || timestamp2}.xlsx`,
              path: processedPath,
              contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            });
            console.log(`\u{1F4CE} Excel \uCCA8\uBD80\uD30C\uC77C \uCD94\uAC00: \uBC1C\uC8FC\uC11C_${emailOptions.orderNumber || timestamp2}.xlsx`);
          }
          if (pdfResult.success && fs18.existsSync(pdfPath)) {
            attachments3.push({
              filename: `\uBC1C\uC8FC\uC11C_${emailOptions.orderNumber || timestamp2}.pdf`,
              path: pdfPath,
              contentType: "application/pdf"
            });
            console.log(`\u{1F4CE} PDF \uCCA8\uBD80\uD30C\uC77C \uCD94\uAC00: \uBC1C\uC8FC\uC11C_${emailOptions.orderNumber || timestamp2}.pdf`);
          } else {
            console.warn("\u26A0\uFE0F PDF \uBCC0\uD658 \uC2E4\uD328\uB85C PDF \uD30C\uC77C \uCCA8\uBD80 \uC0DD\uB7B5:", pdfResult.error);
          }
          const emailContent = this.generateEmailContent(emailOptions);
          console.log("\u{1F4E4} Sending email with attachments...");
          const result = await this.sendEmail({
            to: emailOptions.to,
            cc: emailOptions.cc,
            bcc: emailOptions.bcc,
            subject: emailOptions.subject || `\uBC1C\uC8FC\uC11C \uC804\uC1A1 - ${emailOptions.orderNumber || ""}`,
            html: emailContent,
            attachments: attachments3
          });
          this.cleanupTempFiles([processedPath, pdfPath]);
          if (result.success) {
            console.log(`\u2705 \uC6D0\uBCF8 \uD615\uC2DD \uC720\uC9C0 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC131\uACF5: ${emailOptions.to}`);
          } else {
            console.error(`\u274C \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328: ${result.error}`);
          }
          return result;
        } catch (error) {
          console.error("\u274C \uC6D0\uBCF8 \uD615\uC2DD \uC720\uC9C0 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC624\uB958:", error);
          return {
            success: false,
            error: error instanceof Error ? error.message : "Unknown error"
          };
        }
      }
      /**
       * 기본 이메일 발송
       */
      async sendEmail(options) {
        try {
          console.log("\u{1F50D} POEmailService.sendEmail \uD638\uCD9C\uB428:", {
            to: options.to,
            cc: options.cc,
            subject: options.subject,
            attachmentsCount: options.attachments?.length || 0,
            smtpConfig: {
              host: process.env.SMTP_HOST || "smtp.gmail.com",
              port: parseInt(process.env.SMTP_PORT || "587"),
              user: process.env.SMTP_USER,
              initialized: this.isInitialized
            }
          });
          const toAddresses = Array.isArray(options.to) ? options.to : [options.to];
          const invalidEmails = toAddresses.filter((email) => !this.isValidEmail(email));
          if (invalidEmails.length > 0) {
            console.error("\u274C Invalid email addresses:", invalidEmails);
            return {
              success: false,
              error: `Invalid email addresses: ${invalidEmails.join(", ")}`
            };
          }
          const mailOptions = {
            from: `"\uBC1C\uC8FC \uC2DC\uC2A4\uD15C" <${process.env.SMTP_USER}>`,
            to: Array.isArray(options.to) ? options.to.join(", ") : options.to,
            cc: options.cc ? Array.isArray(options.cc) ? options.cc.join(", ") : options.cc : void 0,
            bcc: options.bcc ? Array.isArray(options.bcc) ? options.bcc.join(", ") : options.bcc : void 0,
            subject: options.subject,
            text: options.text,
            html: options.html,
            attachments: options.attachments?.map((att) => ({
              filename: att.filename,
              path: att.path,
              contentType: att.contentType
            }))
          };
          console.log("\u{1F4E8} Attempting to send email with options:", {
            from: mailOptions.from,
            to: mailOptions.to,
            subject: mailOptions.subject,
            attachmentsCount: mailOptions.attachments?.length || 0
          });
          const info = await this.transporter.sendMail(mailOptions);
          console.log("\u2705 POEmailService.sendEmail \uC131\uACF5:", {
            messageId: info.messageId,
            accepted: info.accepted,
            rejected: info.rejected,
            response: info.response,
            envelope: info.envelope
          });
          return {
            success: true,
            messageId: info.messageId
          };
        } catch (error) {
          console.error("\u274C POEmailService.sendEmail \uC2E4\uD328:", {
            error: error instanceof Error ? error.message : error,
            stack: error instanceof Error ? error.stack : void 0,
            code: error.code,
            command: error.command,
            responseCode: error.responseCode
          });
          return {
            success: false,
            error: error instanceof Error ? error.message : "Unknown error"
          };
        }
      }
      /**
       * 이메일 내용 생성
       */
      generateEmailContent(options) {
        const formatCurrency = (amount) => {
          return new Intl.NumberFormat("ko-KR", {
            style: "currency",
            currency: "KRW"
          }).format(amount);
        };
        const formatDate = (dateString) => {
          try {
            const date2 = new Date(dateString);
            return date2.toLocaleDateString("ko-KR", {
              year: "numeric",
              month: "long",
              day: "numeric"
            });
          } catch {
            return dateString;
          }
        };
        return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <style>
            body {
              font-family: 'Malgun Gothic', Arial, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 600px;
              margin: 0 auto;
              padding: 20px;
            }
            
            .header {
              background-color: #007bff;
              color: white;
              padding: 20px;
              border-radius: 8px 8px 0 0;
            }
            
            .content {
              background-color: #f8f9fa;
              padding: 20px;
              border-radius: 0 0 8px 8px;
            }
            
            .detail-table {
              background-color: white;
              border-radius: 4px;
              padding: 15px;
              margin: 15px 0;
            }
            
            .detail-table table {
              width: 100%;
              border-collapse: collapse;
            }
            
            .detail-table th {
              text-align: left;
              padding: 8px;
              color: #6c757d;
              font-weight: normal;
              width: 30%;
            }
            
            .detail-table td {
              padding: 8px;
              font-weight: bold;
            }
            
            .footer {
              margin-top: 20px;
              padding-top: 20px;
              border-top: 1px solid #dee2e6;
              color: #6c757d;
              font-size: 14px;
            }
            
            .additional-message {
              background-color: #fff3cd;
              border-left: 4px solid #ffc107;
              padding: 15px;
              margin: 15px 0;
              border-radius: 4px;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h2 style="margin: 0;">\uBC1C\uC8FC\uC11C \uC804\uC1A1</h2>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">Purchase Order</p>
          </div>
          
          <div class="content">
            <p>\uC548\uB155\uD558\uC138\uC694, <strong>${options.vendorName || "\uAC70\uB798\uCC98"}</strong> \uB2F4\uB2F9\uC790\uB2D8</p>
            <p>\uC544\uB798\uC640 \uAC19\uC774 \uBC1C\uC8FC\uC11C\uB97C \uC804\uC1A1\uB4DC\uB9AC\uC624\uB2C8 \uD655\uC778 \uBD80\uD0C1\uB4DC\uB9BD\uB2C8\uB2E4.</p>
            
            <div class="detail-table">
              <table>
                <tr>
                  <th>\uBC1C\uC8FC\uBC88\uD638</th>
                  <td>${options.orderNumber || "-"}</td>
                </tr>
                <tr>
                  <th>\uBC1C\uC8FC\uC77C\uC790</th>
                  <td>${options.orderDate ? formatDate(options.orderDate) : "-"}</td>
                </tr>
                ${options.dueDate ? `
                <tr>
                  <th>\uB0A9\uAE30\uC77C\uC790</th>
                  <td>${formatDate(options.dueDate)}</td>
                </tr>
                ` : ""}
                ${options.totalAmount ? `
                <tr>
                  <th>\uBC1C\uC8FC\uAE08\uC561</th>
                  <td>${formatCurrency(options.totalAmount)}</td>
                </tr>
                ` : ""}
              </table>
            </div>
            
            ${options.additionalMessage ? `
            <div class="additional-message">
              <p style="margin: 0;"><strong>\uCD94\uAC00 \uC804\uB2EC\uC0AC\uD56D</strong></p>
              <p style="margin: 10px 0 0 0;">${options.additionalMessage}</p>
            </div>
            ` : ""}
            
            <p>\uCCA8\uBD80\uB41C \uBC1C\uC8FC\uC11C\uB97C \uD655\uC778\uD558\uC2DC\uACE0, \uBB38\uC758\uC0AC\uD56D\uC774 \uC788\uC73C\uC2DC\uBA74 \uC5F0\uB77D \uBD80\uD0C1\uB4DC\uB9BD\uB2C8\uB2E4.</p>
            <p>\uAC10\uC0AC\uD569\uB2C8\uB2E4.</p>
            
            <div class="footer">
              <p>\uBCF8 \uBA54\uC77C\uC740 \uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C\uC5D0\uC11C \uC790\uB3D9 \uBC1C\uC1A1\uB41C \uBA54\uC77C\uC785\uB2C8\uB2E4.</p>
              <p>\xA9 2024 Purchase Order Management System</p>
            </div>
          </div>
        </body>
      </html>
    `;
      }
      /**
       * 임시 파일 정리
       */
      cleanupTempFiles(filePaths) {
        setTimeout(() => {
          filePaths.forEach((filePath) => {
            try {
              if (fs18.existsSync(filePath)) {
                fs18.unlinkSync(filePath);
                console.log(`\u{1F5D1}\uFE0F \uC784\uC2DC \uD30C\uC77C \uC0AD\uC81C: ${path15.basename(filePath)}`);
              }
            } catch (error) {
              console.warn(`\u26A0\uFE0F \uC784\uC2DC \uD30C\uC77C \uC0AD\uC81C \uC2E4\uD328: ${path15.basename(filePath)}`, error);
            }
          });
        }, 5e3);
      }
    };
  }
});

// server/production.ts
import dotenv2 from "dotenv";
import express4 from "express";
import session from "express-session";
import cookieParser from "cookie-parser";
import crypto4 from "crypto";

// server/routes/index.ts
import { Router as Router38 } from "express";

// server/routes/auth.ts
import { Router } from "express";

// server/storage.ts
init_schema();
init_db();
import { eq, desc, asc, ilike, and, or, between, count, sum, sql as sql2, gte, lte, isNotNull, notInArray } from "drizzle-orm";
var DatabaseStorage = class {
  // User operations
  async getUser(id) {
    if (!db) {
      console.error("\u274C Database connection not available - DATABASE_URL not configured");
      throw new Error("Database connection not available. Please configure DATABASE_URL environment variable.");
    }
    const [user] = await db.select().from(users).where(eq(users.id, id));
    return user;
  }
  async getUserById(id) {
    return this.getUser(id);
  }
  // Generate standardized user ID
  async generateStandardizedUserId() {
    const today = /* @__PURE__ */ new Date();
    const datePrefix = today.toISOString().slice(0, 10).replace(/-/g, "");
    const existingUsers = await db.select({ id: users.id }).from(users).where(sql2`${users.id} LIKE ${"USR_" + datePrefix + "_%"}`);
    let maxSequence = 0;
    for (const user of existingUsers) {
      const match = user.id.match(/USR_\d{8}_(\d{3})$/);
      if (match) {
        const sequence = parseInt(match[1], 10);
        if (sequence > maxSequence) {
          maxSequence = sequence;
        }
      }
    }
    const nextSequence = (maxSequence + 1).toString().padStart(3, "0");
    return `USR_${datePrefix}_${nextSequence}`;
  }
  async upsertUser(userData) {
    let existingUser = [];
    if (userData.id) {
      existingUser = await db.select().from(users).where(eq(users.id, userData.id)).limit(1);
    } else if (userData.email) {
      existingUser = await db.select().from(users).where(eq(users.email, userData.email)).limit(1);
    }
    if (existingUser.length > 0) {
      const updateData = {
        updatedAt: /* @__PURE__ */ new Date()
      };
      if (userData.name !== void 0) updateData.name = userData.name;
      if (userData.phoneNumber !== void 0) updateData.phoneNumber = userData.phoneNumber;
      if (userData.role !== void 0) updateData.role = userData.role;
      if (userData.profileImageUrl !== void 0) updateData.profileImageUrl = userData.profileImageUrl;
      const whereCondition = userData.id ? eq(users.id, userData.id) : eq(users.email, userData.email);
      const [user2] = await db.update(users).set(updateData).where(whereCondition).returning();
      return user2;
    }
    const userDataWithId = {
      ...userData,
      id: userData.id || await this.generateStandardizedUserId()
    };
    const [user] = await db.insert(users).values(userDataWithId).returning();
    return user;
  }
  async updateUserProfile(id, profile) {
    const [user] = await db.update(users).set({
      ...profile,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq(users.id, id)).returning();
    return user;
  }
  async getUsers() {
    return await db.select().from(users).orderBy(asc(users.createdAt));
  }
  async getUserByEmail(email) {
    console.log("\u{1F50D} Searching for user with email:", email);
    if (!db) {
      console.error("\u274C Database connection not available - DATABASE_URL not configured");
      throw new Error("Database connection not available. Please configure DATABASE_URL environment variable.");
    }
    try {
      const result = await db.select().from(users).where(eq(users.email, email));
      console.log("\u{1F50D} Database query result:", result);
      const [user] = result;
      console.log("\u{1F50D} Found user:", user ? `${user.email} (${user.role})` : "null");
      return user;
    } catch (error) {
      console.error("\u{1F6A8} Database query error:", error);
      throw error;
    }
  }
  async updateUser(id, updates) {
    const [user] = await db.update(users).set({ ...updates, updatedAt: /* @__PURE__ */ new Date() }).where(eq(users.id, id)).returning();
    return user;
  }
  async updateUserRole(id, role) {
    const [user] = await db.update(users).set({ role, updatedAt: /* @__PURE__ */ new Date() }).where(eq(users.id, id)).returning();
    return user;
  }
  async toggleUserActive(id, isActive) {
    const [user] = await db.update(users).set({
      isActive,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq(users.id, id)).returning();
    return user;
  }
  async checkUserReferences(id) {
    try {
      const projectsAsManager = await db.select({
        id: projects.id,
        name: projects.projectName,
        type: sql2`'project_manager'`
      }).from(projects).where(eq(projects.projectManagerId, id));
      const ordersByUser = await db.select({
        id: purchaseOrders.id,
        orderNumber: purchaseOrders.orderNumber
      }).from(purchaseOrders).where(eq(purchaseOrders.userId, id));
      const projectMemberships = await db.select({
        id: projects.id,
        name: projects.projectName,
        type: sql2`'project_member'`
      }).from(projectMembers).leftJoin(projects, eq(projectMembers.projectId, projects.id)).where(eq(projectMembers.userId, id));
      const projectMembersAssignedBy = await db.select({
        id: projects.id,
        name: projects.projectName,
        type: sql2`'assigned_by'`
      }).from(projectMembers).leftJoin(projects, eq(projectMembers.projectId, projects.id)).where(eq(projectMembers.assignedBy, id));
      const projectHistoryChanges = await db.select({
        id: projects.id,
        name: projects.projectName || sql2`'Unknown Project'`,
        type: sql2`'history_changed_by'`
      }).from(projectHistory).leftJoin(projects, eq(projectHistory.projectId, projects.id)).where(eq(projectHistory.changedBy, id));
      const allProjects = [...projectsAsManager, ...projectMemberships, ...projectMembersAssignedBy, ...projectHistoryChanges].filter((p) => p.id !== null).map((p) => ({
        id: p.id,
        name: p.name || "Unknown Project",
        type: p.type
      }));
      const canDelete = allProjects.length === 0 && ordersByUser.length === 0;
      return {
        canDelete,
        references: {
          projects: allProjects,
          orders: ordersByUser
        }
      };
    } catch (error) {
      console.error("Error checking user references:", error);
      return {
        canDelete: false,
        references: { projects: [], orders: [] }
      };
    }
  }
  async deleteUser(id) {
    const refCheck = await this.checkUserReferences(id);
    if (!refCheck.canDelete) {
      const errorDetails = [];
      if (refCheck.references.projects.length > 0) {
        errorDetails.push(`${refCheck.references.projects.length}\uAC1C \uD504\uB85C\uC81D\uD2B8\uC640 \uC5F0\uACB0\uB428`);
      }
      if (refCheck.references.orders.length > 0) {
        errorDetails.push(`${refCheck.references.orders.length}\uAC1C \uBC1C\uC8FC\uC11C\uC640 \uC5F0\uACB0\uB428`);
      }
      throw new Error(`\uC0AC\uC6A9\uC790\uB97C \uC0AD\uC81C\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4: ${errorDetails.join(", ")}`);
    }
    await db.delete(users).where(eq(users.id, id));
  }
  async reassignUserProjects(fromUserId, toUserId) {
    await db.update(projects).set({ projectManagerId: toUserId, updatedAt: /* @__PURE__ */ new Date() }).where(eq(projects.projectManagerId, fromUserId));
    await db.update(projectMembers).set({ assignedBy: toUserId, assignedAt: /* @__PURE__ */ new Date() }).where(eq(projectMembers.assignedBy, fromUserId));
    await db.update(projectHistory).set({ changedBy: toUserId }).where(eq(projectHistory.changedBy, fromUserId));
    await db.delete(projectMembers).where(eq(projectMembers.userId, fromUserId));
  }
  // Vendor operations
  async getVendors() {
    try {
      console.log("\u{1F50D} Storage: Executing getVendors query...");
      const result = await db.select().from(vendors).where(eq(vendors.isActive, true)).orderBy(asc(vendors.name));
      console.log(`\u{1F50D} Storage: getVendors returned ${result.length} vendors`);
      return result;
    } catch (error) {
      console.error("\u{1F4A5} Storage: getVendors failed:", error);
      throw error;
    }
  }
  async getVendor(id) {
    const [vendor] = await db.select().from(vendors).where(eq(vendors.id, id));
    return vendor;
  }
  async createVendor(vendor) {
    const [newVendor] = await db.insert(vendors).values(vendor).returning();
    return newVendor;
  }
  async updateVendor(id, vendor) {
    const [updatedVendor] = await db.update(vendors).set({ ...vendor, updatedAt: /* @__PURE__ */ new Date() }).where(eq(vendors.id, id)).returning();
    return updatedVendor;
  }
  async deleteVendor(id) {
    await db.update(vendors).set({ isActive: false }).where(eq(vendors.id, id));
  }
  // Order template operations
  async getOrderTemplates() {
    return await db.select().from(orderTemplates).orderBy(asc(orderTemplates.templateName));
  }
  async getActiveOrderTemplates() {
    return await db.select().from(orderTemplates).where(eq(orderTemplates.isActive, true)).orderBy(asc(orderTemplates.templateName));
  }
  async getOrderTemplate(id) {
    const [template] = await db.select().from(orderTemplates).where(eq(orderTemplates.id, id));
    return template;
  }
  async createOrderTemplate(template) {
    const [newTemplate] = await db.insert(orderTemplates).values(template).returning();
    return newTemplate;
  }
  async updateOrderTemplate(id, template) {
    const [updatedTemplate] = await db.update(orderTemplates).set({ ...template, updatedAt: /* @__PURE__ */ new Date() }).where(eq(orderTemplates.id, id)).returning();
    return updatedTemplate;
  }
  async deleteOrderTemplate(id) {
    await db.delete(orderTemplates).where(eq(orderTemplates.id, id));
  }
  async toggleOrderTemplateStatus(id, isActive) {
    const [updatedTemplate] = await db.update(orderTemplates).set({ isActive, updatedAt: /* @__PURE__ */ new Date() }).where(eq(orderTemplates.id, id)).returning();
    return updatedTemplate;
  }
  // Note: Project status and type operations removed - using ENUM types directly for better performance
  // Project operations
  async getProjects() {
    const projectList = await db.select({
      id: projects.id,
      projectName: projects.projectName,
      projectCode: projects.projectCode,
      clientName: projects.clientName,
      projectType: projects.projectType,
      location: projects.location,
      startDate: projects.startDate,
      endDate: projects.endDate,
      status: projects.status,
      totalBudget: projects.totalBudget,
      projectManagerId: projects.projectManagerId,
      orderManagerId: projects.orderManagerId,
      description: projects.description,
      isActive: projects.isActive,
      createdAt: projects.createdAt,
      updatedAt: projects.updatedAt,
      // Manager contact info from users table via foreign key
      projectManager: users.name,
      managerPhone: users.phoneNumber,
      managerEmail: users.email
    }).from(projects).leftJoin(users, eq(projects.projectManagerId, users.id)).where(eq(projects.isActive, true)).orderBy(desc(projects.createdAt));
    return projectList;
  }
  async getProject(id) {
    const [project] = await db.select().from(projects).where(eq(projects.id, id));
    return project;
  }
  async createProject(projectData) {
    const [project] = await db.insert(projects).values(projectData).returning();
    return project;
  }
  async updateProject(id, projectData) {
    const [updatedProject] = await db.update(projects).set({ ...projectData, updatedAt: /* @__PURE__ */ new Date() }).where(eq(projects.id, id)).returning();
    return updatedProject;
  }
  async deleteProject(id) {
    await db.update(projects).set({ isActive: false }).where(eq(projects.id, id));
  }
  // Order status operations - using display view approach
  async getOrderStatuses() {
    const result = await db.execute(sql2`
      SELECT 
        ROW_NUMBER() OVER (ORDER BY sort_order) as id,
        status_code as code,
        status_name as name,
        status_color as color,
        sort_order as "sortOrder"
      FROM purchase_order_status_display
      ORDER BY sort_order
    `);
    return result.rows;
  }
  // Item operations
  async getItems(filters = {}) {
    try {
      console.log("\u{1F50D} Storage: Executing getItems query...");
      console.log("\u{1F50D} Storage: DB instance check:", typeof db, !!db);
      console.log("\u{1F50D} Storage: Items table check:", typeof items);
      console.log("\u{1F50D} Storage: Filters:", filters);
      console.log("\u{1F50D} Storage: Testing basic query first...");
      const testResult = await db.execute(sql2`SELECT 1 as test`);
      console.log("\u{1F50D} Storage: Basic query test result:", testResult);
      console.log("\u{1F50D} Storage: Testing items table exists...");
      const tableCheck = await db.execute(sql2`SELECT COUNT(*) FROM items`);
      console.log("\u{1F50D} Storage: Items table count:", tableCheck);
    } catch (error) {
      console.error("\u{1F4A5} Storage: getItems pre-check failed:", error);
      console.error("\u{1F4A5} Storage: Error name:", error?.name);
      console.error("\u{1F4A5} Storage: Error code:", error?.code);
      console.error("\u{1F4A5} Storage: Error message:", error?.message);
      throw error;
    }
    const {
      category,
      searchText,
      isActive = true,
      page = 1,
      limit = 50
    } = filters;
    let query = db.select({
      id: items.id,
      name: items.name,
      specification: items.specification,
      unit: items.unit,
      unitPrice: items.unitPrice,
      category: items.category,
      majorCategory: items.majorCategory,
      middleCategory: items.middleCategory,
      minorCategory: items.minorCategory,
      description: items.description,
      isActive: items.isActive,
      createdAt: items.createdAt,
      updatedAt: items.updatedAt
    }).from(items);
    let countQuery = db.select({ count: count() }).from(items);
    const conditions = [];
    if (isActive !== void 0) {
      conditions.push(eq(items.isActive, isActive));
    }
    if (category) {
      conditions.push(eq(items.category, category));
    }
    if (searchText) {
      conditions.push(
        or(
          ilike(items.name, `%${searchText}%`),
          ilike(items.specification, `%${searchText}%`),
          ilike(items.description, `%${searchText}%`)
        )
      );
    }
    if (conditions.length > 0) {
      query = query.where(and(...conditions));
      countQuery = countQuery.where(and(...conditions));
    }
    const offset = (page - 1) * limit;
    query = query.orderBy(asc(items.name)).limit(limit).offset(offset);
    const [itemsResult, totalResult] = await Promise.all([
      query,
      countQuery
    ]);
    return {
      items: itemsResult,
      total: totalResult[0]?.count || 0
    };
  }
  async getItem(id) {
    const [item] = await db.select({
      id: items.id,
      name: items.name,
      specification: items.specification,
      unit: items.unit,
      unitPrice: items.unitPrice,
      category: items.category,
      majorCategory: items.majorCategory,
      middleCategory: items.middleCategory,
      minorCategory: items.minorCategory,
      description: items.description,
      isActive: items.isActive,
      createdAt: items.createdAt,
      updatedAt: items.updatedAt
    }).from(items).where(eq(items.id, id));
    return item;
  }
  async createItem(itemData) {
    const [item] = await db.insert(items).values(itemData).returning();
    return item;
  }
  async updateItem(id, itemData) {
    const [item] = await db.update(items).set({ ...itemData, updatedAt: /* @__PURE__ */ new Date() }).where(eq(items.id, id)).returning();
    return item;
  }
  async deleteItem(id) {
    await db.update(items).set({ isActive: false }).where(eq(items.id, id));
  }
  async getCategories() {
    const result = await db.selectDistinct({ category: items.category }).from(items).where(and(isNotNull(items.category), eq(items.isActive, true))).orderBy(items.category);
    return result.map((row) => row.category);
  }
  // Purchase order operations
  async getPurchaseOrders(filters = {}) {
    const { userId, status, orderStatus, vendorId, templateId, projectId, startDate, endDate, minAmount, maxAmount, searchText, majorCategory, middleCategory, minorCategory, page = 1, limit = 50 } = filters;
    let whereConditions = [];
    if (userId && userId !== "all") {
      whereConditions.push(eq(purchaseOrders.userId, userId));
    }
    const statusParam = orderStatus || status;
    if (statusParam && statusParam !== "all" && statusParam !== "") {
      whereConditions.push(sql2`${purchaseOrders.orderStatus} = ${statusParam}`);
    }
    if (vendorId && vendorId !== "all") {
      whereConditions.push(eq(purchaseOrders.vendorId, vendorId));
    }
    if (templateId && templateId !== "all") {
      whereConditions.push(eq(purchaseOrders.templateId, templateId));
    }
    if (projectId && projectId !== "all") {
      whereConditions.push(eq(purchaseOrders.projectId, projectId));
    }
    if (startDate && endDate) {
      whereConditions.push(between(purchaseOrders.orderDate, startDate, endDate));
    }
    let baseWhereClause = whereConditions.length > 0 ? and(...whereConditions) : void 0;
    const [{ count: totalCountResult }] = await db.select({ count: count() }).from(purchaseOrders).where(baseWhereClause);
    let allOrders = await db.select({
      purchase_orders: purchaseOrders,
      vendors,
      users,
      order_templates: orderTemplates,
      projects
    }).from(purchaseOrders).leftJoin(vendors, eq(purchaseOrders.vendorId, vendors.id)).leftJoin(users, eq(purchaseOrders.userId, users.id)).leftJoin(orderTemplates, eq(purchaseOrders.templateId, orderTemplates.id)).leftJoin(projects, eq(purchaseOrders.projectId, projects.id)).where(baseWhereClause).orderBy(desc(purchaseOrders.createdAt));
    let filteredOrders = allOrders;
    if (searchText) {
      const allOrderItems = await db.select().from(purchaseOrderItems);
      const orderItemsMap = /* @__PURE__ */ new Map();
      allOrderItems.forEach((item) => {
        if (!orderItemsMap.has(item.orderId)) {
          orderItemsMap.set(item.orderId, []);
        }
        orderItemsMap.get(item.orderId).push(item);
      });
      filteredOrders = allOrders.filter((orderRow) => {
        const order = orderRow.purchase_orders;
        const vendor = orderRow.vendors;
        const items3 = orderItemsMap.get(order.id) || [];
        const searchLower = searchText.toLowerCase();
        if (order.orderNumber && order.orderNumber.toLowerCase().includes(searchLower)) {
          return true;
        }
        if (vendor && vendor.name && vendor.name.toLowerCase().includes(searchLower)) {
          return true;
        }
        if (order.notes && order.notes.toLowerCase().includes(searchLower)) {
          return true;
        }
        for (const item of items3) {
          if (item.itemName && item.itemName.toLowerCase().includes(searchLower)) {
            return true;
          }
        }
        return false;
      });
    }
    if (minAmount !== void 0 || maxAmount !== void 0) {
      filteredOrders = filteredOrders.filter((orderRow) => {
        const order = orderRow.purchase_orders;
        const totalAmount = parseFloat(order.totalAmount) || 0;
        if (minAmount !== void 0 && totalAmount < minAmount) {
          return false;
        }
        if (maxAmount !== void 0 && totalAmount > maxAmount) {
          return false;
        }
        return true;
      });
    }
    if (majorCategory || middleCategory || minorCategory) {
      const categoryConditions = [];
      if (majorCategory) {
        categoryConditions.push(eq(purchaseOrderItems.majorCategory, majorCategory));
      }
      if (middleCategory) {
        categoryConditions.push(eq(purchaseOrderItems.middleCategory, middleCategory));
      }
      if (minorCategory) {
        categoryConditions.push(eq(purchaseOrderItems.minorCategory, minorCategory));
      }
      const matchingItems = await db.select({ orderId: purchaseOrderItems.orderId }).from(purchaseOrderItems).where(and(...categoryConditions)).groupBy(purchaseOrderItems.orderId);
      const matchingOrderIds = new Set(matchingItems.map((item) => item.orderId));
      filteredOrders = filteredOrders.filter((orderRow) => {
        return matchingOrderIds.has(orderRow.purchase_orders.id);
      });
    }
    const totalCount = filteredOrders.length;
    const orders = filteredOrders.slice((page - 1) * limit, page * limit);
    const ordersWithItems = await Promise.all(
      orders.map(async (order) => {
        const items3 = await db.select().from(purchaseOrderItems).where(eq(purchaseOrderItems.orderId, order.purchase_orders.id));
        return {
          ...order.purchase_orders,
          vendor: order.vendors || void 0,
          user: order.users || void 0,
          project: order.projects || void 0,
          projectName: order.projects?.projectName || "Unknown Project",
          projectCode: order.projects?.projectCode || "",
          templateName: order.order_templates?.templateName || void 0,
          statusName: order.purchase_orders.status,
          items: items3
        };
      })
    );
    return {
      orders: ordersWithItems,
      total: totalCount
    };
  }
  async getPurchaseOrder(id) {
    const [order] = await db.select().from(purchaseOrders).leftJoin(vendors, eq(purchaseOrders.vendorId, vendors.id)).leftJoin(users, eq(purchaseOrders.userId, users.id)).leftJoin(projects, eq(purchaseOrders.projectId, projects.id)).leftJoin(companies, eq(companies.id, 1)).where(eq(purchaseOrders.id, id));
    if (!order) return void 0;
    const items3 = await db.select().from(purchaseOrderItems).where(eq(purchaseOrderItems.orderId, id));
    console.log("Debug: Items found:", items3);
    const orderAttachments = await db.select({
      id: attachments.id,
      orderId: attachments.orderId,
      originalName: attachments.originalName,
      storedName: attachments.storedName,
      filePath: attachments.filePath,
      fileSize: attachments.fileSize,
      mimeType: attachments.mimeType,
      uploadedBy: attachments.uploadedBy,
      uploadedAt: attachments.uploadedAt
    }).from(attachments).where(eq(attachments.orderId, id));
    console.log(`\u{1F4CE} Storage - Attachments found for order ID ${id}:`, orderAttachments);
    const result = {
      ...order.purchase_orders,
      vendor: order.vendors || void 0,
      user: order.users || void 0,
      project: order.projects || void 0,
      company: order.companies || void 0,
      items: items3,
      attachments: orderAttachments
    };
    console.log("Debug: Final result:", result);
    console.log("Debug: Final result items:", result.items);
    return result;
  }
  async createPurchaseOrder(orderData) {
    const { items: items3, ...order } = orderData;
    const orderNumber = await this.generateOrderNumber();
    const orderAmount = order.totalAmount || 0;
    const nextApprover = await this.calculateNextApprover(orderAmount, 1);
    const orderWithWorkflow = {
      ...order,
      orderNumber,
      status: nextApprover ? "pending" : "approved",
      currentApproverRole: nextApprover,
      approvalLevel: 1
    };
    const [newOrder] = await db.insert(purchaseOrders).values(orderWithWorkflow).returning();
    if (items3 && items3.length > 0) {
      await this.createPurchaseOrderItems(
        items3.map((item) => ({
          ...item,
          orderId: newOrder.id
        }))
      );
    }
    await this.createOrderHistory({
      orderId: newOrder.id,
      userId: order.userId,
      action: "created",
      changes: {
        order: newOrder,
        approvalRequired: !!nextApprover,
        nextApprover
      }
    });
    return newOrder;
  }
  async updatePurchaseOrder(id, orderData) {
    const [updatedOrder] = await db.update(purchaseOrders).set({ ...orderData, updatedAt: /* @__PURE__ */ new Date() }).where(eq(purchaseOrders.id, id)).returning();
    await this.createOrderHistory({
      orderId: id,
      userId: updatedOrder.userId,
      action: "updated",
      changes: { changes: orderData }
    });
    return updatedOrder;
  }
  async recalculateOrderTotal(orderId) {
    const items3 = await db.select().from(purchaseOrderItems).where(eq(purchaseOrderItems.orderId, orderId));
    const totalAmount = items3.reduce((sum2, item) => sum2 + Number(item.totalAmount || 0), 0);
    await db.update(purchaseOrders).set({
      totalAmount: totalAmount.toString(),
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq(purchaseOrders.id, orderId));
  }
  async deletePurchaseOrder(id) {
    console.log(`\u{1F5D1}\uFE0F [storage.deletePurchaseOrder] Starting deletion for order ID: ${id}`);
    const order = await this.getPurchaseOrder(id);
    if (!order) {
      console.log(`\u26A0\uFE0F [storage.deletePurchaseOrder] Order ${id} not found, skipping deletion`);
      return;
    }
    console.log(`\u{1F4DD} [storage.deletePurchaseOrder] Found order: ${order.orderNumber}, status: ${order.status}`);
    try {
      console.log(`\u{1F517} [storage.deletePurchaseOrder] Deleting purchaseOrderItems for order ${id}`);
      await db.delete(purchaseOrderItems).where(eq(purchaseOrderItems.orderId, id));
      console.log(`\u{1F517} [storage.deletePurchaseOrder] Deleting attachments for order ${id}`);
      await db.delete(attachments).where(eq(attachments.orderId, id));
      console.log(`\u{1F517} [storage.deletePurchaseOrder] Deleting orderHistory for order ${id}`);
      await db.delete(orderHistory).where(eq(orderHistory.orderId, id));
      console.log(`\u{1F517} [storage.deletePurchaseOrder] Deleting purchaseOrder ${id}`);
      await db.delete(purchaseOrders).where(eq(purchaseOrders.id, id));
      console.log(`\u2705 [storage.deletePurchaseOrder] Successfully deleted order ${id}`);
    } catch (error) {
      console.error(`\u274C [storage.deletePurchaseOrder] Failed to delete order ${id}:`, error);
      throw error;
    }
  }
  async bulkDeleteOrders(orderIds, deletedBy) {
    if (!orderIds || orderIds.length === 0) {
      return [];
    }
    console.log(`\u{1F5D1}\uFE0F Starting bulk delete for ${orderIds.length} orders by ${deletedBy}:`, orderIds);
    return await db.transaction(async (tx) => {
      try {
        const existingOrders = [];
        for (const orderId of orderIds) {
          const [order] = await tx.select().from(purchaseOrders).where(eq(purchaseOrders.id, orderId));
          if (order) {
            existingOrders.push(order);
          }
        }
        if (existingOrders.length === 0) {
          console.log("\u26A0\uFE0F No orders found to delete");
          return [];
        }
        const existingOrderIds = existingOrders.map((o) => o.id);
        console.log(`\u{1F50D} Found ${existingOrders.length} orders to delete:`, existingOrderIds);
        for (const orderId of existingOrderIds) {
          console.log(`\u{1F5D1}\uFE0F Deleting related records for order ${orderId}...`);
          const deletedApprovalSteps = await tx.delete(approvalStepInstances).where(eq(approvalStepInstances.orderId, orderId)).returning();
          console.log(`   \u{1F5D1}\uFE0F Deleted ${deletedApprovalSteps.length} approval step instances`);
          const deletedItems = await tx.delete(purchaseOrderItems).where(eq(purchaseOrderItems.orderId, orderId)).returning();
          console.log(`   \u{1F5D1}\uFE0F Deleted ${deletedItems.length} purchase order items`);
          const deletedAttachments = await tx.delete(attachments).where(eq(attachments.orderId, orderId)).returning();
          console.log(`   \u{1F5D1}\uFE0F Deleted ${deletedAttachments.length} attachments`);
          const deletedHistory = await tx.delete(orderHistory).where(eq(orderHistory.orderId, orderId)).returning();
          console.log(`   \u{1F5D1}\uFE0F Deleted ${deletedHistory.length} order history entries`);
          await tx.delete(purchaseOrders).where(eq(purchaseOrders.id, orderId));
          console.log(`\u2705 Deleted order ${orderId} and all related records`);
        }
        console.log(`\u2705 Bulk deleted ${existingOrders.length} orders successfully`);
        return existingOrders;
      } catch (error) {
        console.error("\u274C Bulk delete error:", error);
        console.error("\u274C Error details:", {
          message: error?.message,
          code: error?.code,
          detail: error?.detail,
          constraint: error?.constraint,
          table: error?.table,
          stack: error?.stack
        });
        throw error;
      }
    });
  }
  async approvePurchaseOrder(id, approvedBy) {
    const [approvedOrder] = await db.update(purchaseOrders).set({
      isApproved: true,
      approvedBy,
      approvedAt: /* @__PURE__ */ new Date(),
      status: sql2`'approved'::purchase_order_status`,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq(purchaseOrders.id, id)).returning();
    await this.createOrderHistory({
      orderId: id,
      userId: approvedBy,
      action: "approved",
      changes: { approvedBy, approvedAt: /* @__PURE__ */ new Date() }
    });
    return approvedOrder;
  }
  // Purchase order item operations
  async createPurchaseOrderItems(items3) {
    if (items3.length === 0) return [];
    return await db.insert(purchaseOrderItems).values(items3).returning();
  }
  async updatePurchaseOrderItems(orderId, items3) {
    await db.delete(purchaseOrderItems).where(eq(purchaseOrderItems.orderId, orderId));
    if (items3.length === 0) return [];
    return await db.insert(purchaseOrderItems).values(items3).returning();
  }
  // Attachment operations
  async createAttachment(attachment) {
    console.log("\u{1F48E}\u{1F48E}\u{1F48E} CREATE ATTACHMENT CALLED \u{1F48E}\u{1F48E}\u{1F48E}", attachment.originalName);
    if (attachment.originalName) {
      console.log("\u{1F48E}\u{1F48E}\u{1F48E} BEFORE DECODE \u{1F48E}\u{1F48E}\u{1F48E}", attachment.originalName);
      attachment.originalName = this.decodeKoreanFilename(attachment.originalName);
      console.log("\u{1F48E}\u{1F48E}\u{1F48E} AFTER DECODE \u{1F48E}\u{1F48E}\u{1F48E}", attachment.originalName);
    }
    const [newAttachment] = await db.insert(attachments).values(attachment).returning();
    return newAttachment;
  }
  // Korean filename decoder
  decodeKoreanFilename(originalName) {
    console.log("\u{1F527}\u{1F527}\u{1F527} KOREAN FILENAME FIX START \u{1F527}\u{1F527}\u{1F527}", originalName);
    try {
      const latin1Buffer = Buffer.from(originalName, "latin1");
      const utf8Decoded = latin1Buffer.toString("utf8");
      if (/[가-힣]/.test(utf8Decoded)) {
        console.log("\u2705 Fixed Korean filename:", utf8Decoded);
        return utf8Decoded;
      }
    } catch (e) {
      console.log("\u274C Method 1 failed:", e);
    }
    try {
      const doubleDecoded = decodeURIComponent(escape(originalName));
      if (/[가-힣]/.test(doubleDecoded)) {
        console.log("\u2705 Fixed Korean filename (method 2):", doubleDecoded);
        return doubleDecoded;
      }
    } catch (e) {
      console.log("\u274C Method 2 failed:", e);
    }
    try {
      const binaryDecoded = Buffer.from(originalName, "binary").toString("utf8");
      if (/[가-힣]/.test(binaryDecoded)) {
        console.log("\u2705 Fixed Korean filename (method 3):", binaryDecoded);
        return binaryDecoded;
      }
    } catch (e) {
      console.log("\u274C Method 3 failed:", e);
    }
    console.log("\u274C Could not fix Korean filename, using original");
    return originalName;
  }
  async getAttachment(id) {
    const [attachment] = await db.select({
      id: attachments.id,
      orderId: attachments.orderId,
      originalName: attachments.originalName,
      storedName: attachments.storedName,
      filePath: attachments.filePath,
      fileSize: attachments.fileSize,
      mimeType: attachments.mimeType,
      uploadedBy: attachments.uploadedBy,
      uploadedAt: attachments.uploadedAt
    }).from(attachments).where(eq(attachments.id, id));
    return attachment || void 0;
  }
  async getOrderAttachments(orderId) {
    return await db.select({
      id: attachments.id,
      orderId: attachments.orderId,
      originalName: attachments.originalName,
      storedName: attachments.storedName,
      filePath: attachments.filePath,
      fileSize: attachments.fileSize,
      mimeType: attachments.mimeType,
      uploadedBy: attachments.uploadedBy,
      uploadedAt: attachments.uploadedAt
    }).from(attachments).where(eq(attachments.orderId, orderId));
  }
  async deleteAttachment(id) {
    await db.delete(attachments).where(eq(attachments.id, id));
  }
  // Order history operations
  async createOrderHistory(history) {
    const [newHistory] = await db.insert(orderHistory).values(history).returning();
    return newHistory;
  }
  async getOrderHistory(orderId) {
    return await db.select().from(orderHistory).where(eq(orderHistory.orderId, orderId)).orderBy(desc(orderHistory.createdAt));
  }
  // Statistics
  async getDashboardStats(userId) {
    const now = /* @__PURE__ */ new Date();
    const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const firstDayOfYear = new Date(now.getFullYear(), 0, 1);
    let whereClause = userId ? eq(purchaseOrders.userId, userId) : void 0;
    const [totalOrders] = await db.select({ count: count() }).from(purchaseOrders).where(whereClause);
    const [monthlyOrders] = await db.select({ count: count() }).from(purchaseOrders).where(
      userId ? and(eq(purchaseOrders.userId, userId), gte(purchaseOrders.orderDate, firstDayOfMonth)) : gte(purchaseOrders.orderDate, firstDayOfMonth)
    );
    const [yearlyOrders] = await db.select({ count: count() }).from(purchaseOrders).where(
      userId ? and(eq(purchaseOrders.userId, userId), gte(purchaseOrders.orderDate, firstDayOfYear)) : gte(purchaseOrders.orderDate, firstDayOfYear)
    );
    const [monthlyAmountResult] = await db.select({ total: sql2`COALESCE(SUM(CAST(${purchaseOrders.totalAmount} AS NUMERIC)), 0)` }).from(purchaseOrders).where(
      userId ? and(eq(purchaseOrders.userId, userId), gte(purchaseOrders.orderDate, firstDayOfMonth)) : gte(purchaseOrders.orderDate, firstDayOfMonth)
    );
    const [pendingOrders] = await db.select({ count: count() }).from(purchaseOrders).where(
      userId ? and(eq(purchaseOrders.userId, userId), sql2`${purchaseOrders.status} = 'pending'`) : sql2`${purchaseOrders.status} = 'pending'`
    );
    const [totalVendors] = await db.select({ count: count() }).from(vendors).where(eq(vendors.isActive, true));
    const [awaitingApprovalOrders] = await db.select({ count: count() }).from(purchaseOrders).where(
      userId ? and(eq(purchaseOrders.userId, userId), sql2`${purchaseOrders.status} = 'pending'`) : sql2`${purchaseOrders.status} = 'pending'`
    );
    return {
      totalOrders: totalOrders.count,
      monthlyOrders: monthlyOrders.count,
      yearlyOrders: yearlyOrders.count,
      monthlyAmount: monthlyAmountResult.total,
      pendingOrders: pendingOrders.count,
      awaitingApprovalOrders: awaitingApprovalOrders.count,
      totalVendors: totalVendors.count
    };
  }
  async getMonthlyOrderStats(userId) {
    const sixMonthsAgo = /* @__PURE__ */ new Date();
    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
    const orders = await db.select().from(purchaseOrders).where(
      and(
        gte(purchaseOrders.orderDate, sixMonthsAgo),
        userId ? eq(purchaseOrders.userId, userId) : void 0
      )
    );
    const monthlyData = /* @__PURE__ */ new Map();
    orders.forEach((order) => {
      const month = order.orderDate.toISOString().substring(0, 7);
      const existing = monthlyData.get(month) || { orders: 0, amount: 0 };
      monthlyData.set(month, {
        orders: existing.orders + 1,
        amount: existing.amount + Number(order.totalAmount)
      });
    });
    return Array.from(monthlyData.entries()).map(([month, data]) => ({
      month,
      orders: data.orders,
      amount: data.amount
    })).sort((a, b) => a.month.localeCompare(b.month));
  }
  async getVendorOrderStats(userId) {
    const whereClause = userId ? eq(purchaseOrders.userId, userId) : void 0;
    const results = await db.select({
      vendorName: vendors.name,
      orders: count(purchaseOrders.id).as("orders"),
      amount: sum(purchaseOrders.totalAmount).as("amount")
    }).from(purchaseOrders).leftJoin(vendors, eq(purchaseOrders.vendorId, vendors.id)).where(whereClause).groupBy(vendors.name).orderBy(desc(count(purchaseOrders.id))).limit(10);
    return results.map((row) => ({
      vendorName: row.vendorName || "\uC54C \uC218 \uC5C6\uC74C",
      orders: Number(row.orders),
      amount: Number(row.amount) || 0
    }));
  }
  async getStatusOrderStats(userId) {
    const whereClause = userId ? eq(purchaseOrders.userId, userId) : void 0;
    const results = await db.select({
      status: purchaseOrders.status,
      orders: count(purchaseOrders.id).as("orders"),
      amount: sum(purchaseOrders.totalAmount).as("amount")
    }).from(purchaseOrders).where(whereClause).groupBy(purchaseOrders.status).orderBy(desc(count(purchaseOrders.id)));
    return results.map((row) => ({
      status: row.status,
      orders: Number(row.orders),
      amount: Number(row.amount) || 0
    }));
  }
  async getProjectOrderStats(userId) {
    const whereClause = userId ? eq(purchaseOrders.userId, userId) : void 0;
    const results = await db.select({
      projectName: projects.projectName,
      projectCode: projects.projectCode,
      orderCount: count(purchaseOrders.id).as("orderCount"),
      totalAmount: sum(purchaseOrders.totalAmount).as("totalAmount")
    }).from(purchaseOrders).innerJoin(projects, eq(purchaseOrders.projectId, projects.id)).where(whereClause).groupBy(projects.id, projects.projectName, projects.projectCode).orderBy(desc(count(purchaseOrders.id)));
    return results.map((row) => ({
      projectName: row.projectName,
      projectCode: row.projectCode,
      orderCount: Number(row.orderCount),
      totalAmount: Number(row.totalAmount) || 0
    }));
  }
  // Generate order number
  async generateOrderNumber() {
    const year = (/* @__PURE__ */ new Date()).getFullYear();
    const prefix = `PO-${year}-`;
    const [lastOrder] = await db.select().from(purchaseOrders).where(ilike(purchaseOrders.orderNumber, `${prefix}%`)).orderBy(desc(purchaseOrders.orderNumber)).limit(1);
    let nextNumber = 1;
    if (lastOrder) {
      const lastNumber = parseInt(lastOrder.orderNumber.split("-")[2] || "0");
      nextNumber = lastNumber + 1;
    }
    return `${prefix}${nextNumber.toString().padStart(3, "0")}`;
  }
  // Invoice operations
  async getInvoices(orderId) {
    const query = db.select().from(invoices).orderBy(desc(invoices.createdAt));
    if (orderId) {
      return await query.where(eq(invoices.orderId, orderId));
    }
    return await query;
  }
  async getInvoice(id) {
    const [invoice] = await db.select().from(invoices).where(eq(invoices.id, id));
    return invoice;
  }
  async createInvoice(invoiceData) {
    const [invoice] = await db.insert(invoices).values(invoiceData).returning();
    await this.createVerificationLog({
      orderId: invoice.orderId,
      invoiceId: invoice.id,
      action: "invoice_uploaded",
      details: `\uCCAD\uAD6C\uC11C ${invoice.invoiceNumber} \uC5C5\uB85C\uB4DC\uB428`,
      performedBy: invoice.uploadedBy
    });
    return invoice;
  }
  async updateInvoice(id, invoiceData) {
    const [invoice] = await db.update(invoices).set({ ...invoiceData, updatedAt: /* @__PURE__ */ new Date() }).where(eq(invoices.id, id)).returning();
    return invoice;
  }
  async deleteInvoice(id) {
    await db.delete(invoices).where(eq(invoices.id, id));
  }
  async verifyInvoice(id, verifiedBy) {
    const [invoice] = await db.update(invoices).set({
      status: "verified",
      verifiedBy,
      verifiedAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq(invoices.id, id)).returning();
    await this.createVerificationLog({
      orderId: invoice.orderId,
      invoiceId: invoice.id,
      action: "invoice_verified",
      details: `\uCCAD\uAD6C\uC11C ${invoice.invoiceNumber} \uAC80\uC99D \uC644\uB8CC`,
      performedBy: verifiedBy
    });
    return invoice;
  }
  // Item receipt operations
  async getItemReceipts(orderItemId) {
    const query = db.select().from(itemReceipts).orderBy(desc(itemReceipts.createdAt));
    if (orderItemId) {
      return await query.where(eq(itemReceipts.orderItemId, orderItemId));
    }
    return await query;
  }
  async getItemReceipt(id) {
    const [receipt] = await db.select().from(itemReceipts).where(eq(itemReceipts.id, id));
    return receipt;
  }
  async createItemReceipt(receiptData) {
    const [receipt] = await db.insert(itemReceipts).values(receiptData).returning();
    const [orderItem] = await db.select().from(purchaseOrderItems).where(eq(purchaseOrderItems.id, receipt.orderItemId));
    if (orderItem) {
      await this.createVerificationLog({
        orderId: orderItem.orderId,
        itemReceiptId: receipt.id,
        invoiceId: receipt.invoiceId,
        action: "item_received",
        details: `\uD56D\uBAA9 \uC218\uB839 \uD655\uC778: ${receipt.receivedQuantity}\uAC1C`,
        performedBy: receipt.verifiedBy
      });
    }
    return receipt;
  }
  async updateItemReceipt(id, receiptData) {
    const [receipt] = await db.update(itemReceipts).set({ ...receiptData, updatedAt: /* @__PURE__ */ new Date() }).where(eq(itemReceipts.id, id)).returning();
    return receipt;
  }
  async deleteItemReceipt(id) {
    await db.delete(itemReceipts).where(eq(itemReceipts.id, id));
  }
  // Verification log operations
  async getVerificationLogs(orderId, invoiceId) {
    const conditions = [];
    if (orderId) conditions.push(eq(verificationLogs.orderId, orderId));
    if (invoiceId) conditions.push(eq(verificationLogs.invoiceId, invoiceId));
    if (conditions.length > 0) {
      return await db.select().from(verificationLogs).where(and(...conditions)).orderBy(desc(verificationLogs.createdAt));
    }
    return await db.select().from(verificationLogs).orderBy(desc(verificationLogs.createdAt));
  }
  async createVerificationLog(logData) {
    const [log] = await db.insert(verificationLogs).values(logData).returning();
    return log;
  }
  // UI terms operations
  async getUiTerms(category) {
    try {
      if (category) {
        return await db.select().from(uiTerms).where(and(eq(uiTerms.category, category), eq(uiTerms.isActive, true))).orderBy(asc(uiTerms.termKey));
      }
      return await db.select().from(uiTerms).where(eq(uiTerms.isActive, true)).orderBy(asc(uiTerms.termKey));
    } catch (error) {
      console.error("Database error in getUiTerms:", error);
      return [];
    }
  }
  async getUiTerm(termKey) {
    const [term] = await db.select().from(uiTerms).where(and(eq(uiTerms.termKey, termKey), eq(uiTerms.isActive, true)));
    return term;
  }
  async createUiTerm(termData) {
    const [term] = await db.insert(uiTerms).values(termData).returning();
    return term;
  }
  async updateUiTerm(termKey, termData) {
    const [term] = await db.update(uiTerms).set({ ...termData, updatedAt: /* @__PURE__ */ new Date() }).where(eq(uiTerms.termKey, termKey)).returning();
    return term;
  }
  async deleteUiTerm(termKey) {
    await db.update(uiTerms).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where(eq(uiTerms.termKey, termKey));
  }
  // Terminology operations
  async getTerminology() {
    return await db.select().from(terminology).orderBy(asc(terminology.category), asc(terminology.termKey));
  }
  async getTerm(id) {
    const [term] = await db.select().from(terminology).where(eq(terminology.id, id));
    return term || void 0;
  }
  async createTerm(termData) {
    const [term] = await db.insert(terminology).values(termData).returning();
    return term;
  }
  async updateTerm(id, termData) {
    const [term] = await db.update(terminology).set({ ...termData, updatedAt: /* @__PURE__ */ new Date() }).where(eq(terminology.id, id)).returning();
    return term;
  }
  async deleteTerm(id) {
    await db.delete(terminology).where(eq(terminology.id, id));
  }
  // Company operations
  async getCompanies() {
    try {
      console.log("\u{1F50D} Storage: Executing getCompanies query...");
      console.log("\u{1F50D} Storage: DB instance check:", typeof db, !!db);
      console.log("\u{1F50D} Storage: Companies table check:", typeof companies);
      console.log("\u{1F50D} Storage: Testing basic query first...");
      const testResult = await db.execute(sql2`SELECT 1 as test`);
      console.log("\u{1F50D} Storage: Basic query test result:", testResult);
      console.log("\u{1F50D} Storage: Testing companies table exists...");
      const tableCheck = await db.execute(sql2`SELECT COUNT(*) FROM companies`);
      console.log("\u{1F50D} Storage: Companies table count:", tableCheck);
      console.log("\u{1F50D} Storage: Trying simplified companies query...");
      const result = await db.select().from(companies).limit(10);
      console.log(`\u{1F50D} Storage: getCompanies returned ${result.length} companies`);
      return result;
    } catch (error) {
      console.error("\u{1F4A5} Storage: getCompanies failed:", error);
      console.error("\u{1F4A5} Storage: Error name:", error?.name);
      console.error("\u{1F4A5} Storage: Error code:", error?.code);
      console.error("\u{1F4A5} Storage: Error message:", error?.message);
      console.error("\u{1F4A5} Storage: Error stack:", error?.stack);
      throw error;
    }
  }
  async getCompany(id) {
    const [company] = await db.select().from(companies).where(and(eq(companies.id, id), eq(companies.isActive, true)));
    return company;
  }
  async createCompany(companyData) {
    const [company] = await db.insert(companies).values({
      ...companyData,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    }).returning();
    return company;
  }
  async updateCompany(id, companyData) {
    const [company] = await db.update(companies).set({ ...companyData, updatedAt: /* @__PURE__ */ new Date() }).where(eq(companies.id, id)).returning();
    return company;
  }
  async deleteCompany(id) {
    await db.update(companies).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where(eq(companies.id, id));
  }
  // Enhanced dashboard statistics
  async getActiveProjectsCount(userId) {
    try {
      const conditions = [
        eq(projects.isActive, true),
        eq(projects.status, "active")
      ];
      if (userId) {
        conditions.push(or(
          eq(projects.projectManagerId, userId),
          eq(projects.orderManagerId, userId)
        ));
      }
      const [result] = await db.select({ count: sql2`count(*)` }).from(projects).where(and(...conditions));
      return Number(result.count);
    } catch (error) {
      console.error("Error getting active projects count:", error);
      return 0;
    }
  }
  async getNewProjectsThisMonth(userId) {
    try {
      const startOfMonth = /* @__PURE__ */ new Date();
      startOfMonth.setDate(1);
      startOfMonth.setHours(0, 0, 0, 0);
      const conditions = [
        eq(projects.isActive, true),
        gte(projects.startDate, startOfMonth)
      ];
      if (userId) {
        conditions.push(or(
          eq(projects.projectManagerId, userId),
          eq(projects.orderManagerId, userId)
        ));
      }
      const [result] = await db.select({ count: sql2`count(*)` }).from(projects).where(and(...conditions));
      return Number(result.count);
    } catch (error) {
      console.error("Error getting new projects this month:", error);
      return 0;
    }
  }
  async getRecentProjectsThisMonth(userId) {
    try {
      const startOfMonth = /* @__PURE__ */ new Date();
      startOfMonth.setDate(1);
      startOfMonth.setHours(0, 0, 0, 0);
      const conditions = [
        eq(projects.isActive, true),
        gte(projects.startDate, startOfMonth)
      ];
      if (userId) {
        conditions.push(or(
          eq(projects.projectManagerId, userId),
          eq(projects.orderManagerId, userId)
        ));
      }
      return await db.select({
        id: projects.id,
        projectName: projects.projectName,
        projectCode: projects.projectCode,
        startDate: projects.startDate,
        status: projects.status,
        clientName: projects.clientName
      }).from(projects).where(and(...conditions)).orderBy(desc(projects.startDate)).limit(10);
    } catch (error) {
      console.error("Error getting recent projects this month:", error);
      return [];
    }
  }
  async getUrgentOrders(userId) {
    try {
      const today = /* @__PURE__ */ new Date();
      const urgentDate = /* @__PURE__ */ new Date();
      urgentDate.setDate(today.getDate() + 7);
      const conditions = [
        lte(purchaseOrders.deliveryDate, urgentDate),
        gte(purchaseOrders.deliveryDate, today),
        notInArray(purchaseOrders.status, ["completed"])
      ];
      if (userId) {
        conditions.push(eq(purchaseOrders.userId, userId));
      }
      return await db.select({
        id: purchaseOrders.id,
        orderNumber: purchaseOrders.orderNumber,
        requestedDeliveryDate: purchaseOrders.deliveryDate,
        totalAmount: purchaseOrders.totalAmount,
        status: purchaseOrders.status,
        vendorId: purchaseOrders.vendorId
      }).from(purchaseOrders).where(and(...conditions)).orderBy(asc(purchaseOrders.deliveryDate)).limit(10);
    } catch (error) {
      console.error("Error getting urgent orders:", error);
      return [];
    }
  }
  // Project status and type methods
  async getProjectStatuses() {
    try {
      return [
        { id: "active", name: "\uC9C4\uD589\uC911", code: "active" },
        { id: "completed", name: "\uC644\uB8CC", code: "completed" },
        { id: "on_hold", name: "\uBCF4\uB958", code: "on_hold" },
        { id: "cancelled", name: "\uCDE8\uC18C", code: "cancelled" }
      ];
    } catch (error) {
      console.error("Error getting project statuses:", error);
      return [];
    }
  }
  async getProjectTypes() {
    try {
      return [
        { id: "commercial", name: "\uC0C1\uC5C5\uC2DC\uC124", code: "commercial" },
        { id: "residential", name: "\uC8FC\uAC70\uC2DC\uC124", code: "residential" },
        { id: "industrial", name: "\uC0B0\uC5C5\uC2DC\uC124", code: "industrial" },
        { id: "infrastructure", name: "\uC778\uD504\uB77C", code: "infrastructure" }
      ];
    } catch (error) {
      console.error("Error getting project types:", error);
      return [];
    }
  }
  // Project members operations
  async getProjectMembers(projectId) {
    try {
      let query = db.select({
        id: projectMembers.id,
        projectId: projectMembers.projectId,
        userId: projectMembers.userId,
        role: projectMembers.role,
        user: {
          id: users.id,
          name: users.name,
          email: users.email
        }
      }).from(projectMembers).leftJoin(users, eq(projectMembers.userId, users.id));
      if (projectId) {
        query = query.where(eq(projectMembers.projectId, projectId));
      }
      return await query;
    } catch (error) {
      console.error("Error getting project members:", error);
      return [];
    }
  }
  async createProjectMember(member) {
    try {
      const [newMember] = await db.insert(projectMembers).values(member).returning();
      return newMember;
    } catch (error) {
      console.error("Error creating project member:", error);
      throw error;
    }
  }
  async deleteProjectMember(id) {
    try {
      await db.delete(projectMembers).where(eq(projectMembers.id, id));
    } catch (error) {
      console.error("Error deleting project member:", error);
      throw error;
    }
  }
  // Approval management methods
  async getApprovalStats() {
    try {
      const pendingOrders = await db.select().from(purchaseOrders).where(eq(purchaseOrders.status, "pending"));
      const pendingCount = pendingOrders.length;
      const threeDaysAgo = /* @__PURE__ */ new Date();
      threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
      const urgentCount = pendingOrders.filter(
        (order) => order.createdAt && new Date(order.createdAt) < threeDaysAgo
      ).length;
      const waitDays = pendingOrders.filter((order) => order.createdAt).map((order) => {
        const diffTime = Math.abs((/* @__PURE__ */ new Date()).getTime() - new Date(order.createdAt).getTime());
        return Math.ceil(diffTime / (1e3 * 60 * 60 * 24));
      });
      const averageWaitDays = waitDays.length > 0 ? Math.round(waitDays.reduce((a, b) => a + b, 0) / waitDays.length) : 0;
      const pendingAmount = pendingOrders.reduce((total, order) => total + order.totalAmount, 0);
      return {
        pendingCount,
        urgentCount,
        averageWaitDays,
        pendingAmount
      };
    } catch (error) {
      console.error("Error getting approval stats:", error);
      throw error;
    }
  }
  async getPendingApprovals(userRole, userId) {
    try {
      let query = db.select().from(purchaseOrders).where(eq(purchaseOrders.status, "pending")).orderBy(asc(purchaseOrders.createdAt));
      return await query;
    } catch (error) {
      console.error("Error getting pending approvals:", error);
      throw error;
    }
  }
  async getApprovalHistory() {
    try {
      return await db.select().from(purchaseOrders).where(or(
        eq(purchaseOrders.status, "approved"),
        eq(purchaseOrders.status, "completed"),
        eq(purchaseOrders.status, "sent")
      )).orderBy(desc(purchaseOrders.updatedAt)).limit(50);
    } catch (error) {
      console.error("Error getting approval history:", error);
      throw error;
    }
  }
  async getOrdersForApproval(role) {
    try {
      return await db.select().from(purchaseOrders).where(and(
        eq(purchaseOrders.status, "pending"),
        eq(purchaseOrders.currentApproverRole, role)
      )).orderBy(desc(purchaseOrders.orderDate));
    } catch (error) {
      console.error("Error getting orders for approval:", error);
      throw error;
    }
  }
  async approveOrder(orderId, approverId, note) {
    try {
      const [updatedOrder] = await db.update(purchaseOrders).set({
        status: "approved",
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq(purchaseOrders.id, orderId)).returning();
      await db.insert(orderHistory).values({
        orderId,
        userId: approverId,
        action: "approved",
        notes: note || "\uBC1C\uC8FC\uC11C\uAC00 \uC2B9\uC778\uB418\uC5C8\uC2B5\uB2C8\uB2E4.",
        timestamp: /* @__PURE__ */ new Date()
      });
      return updatedOrder;
    } catch (error) {
      console.error("Error approving order:", error);
      throw error;
    }
  }
  async rejectOrder(orderId, rejectedBy, note) {
    try {
      const [updatedOrder] = await db.update(purchaseOrders).set({
        status: "draft",
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq(purchaseOrders.id, orderId)).returning();
      await db.insert(orderHistory).values({
        orderId,
        userId: rejectedBy,
        action: "rejected",
        notes: note || "\uBC1C\uC8FC\uC11C\uAC00 \uBC18\uB824\uB418\uC5C8\uC2B5\uB2C8\uB2E4.",
        timestamp: /* @__PURE__ */ new Date()
      });
      return updatedOrder;
    } catch (error) {
      console.error("Error rejecting order:", error);
      throw error;
    }
  }
  // Approval authority management methods
  async getApprovalAuthorities() {
    try {
      return await db.select().from(approvalAuthorities).where(eq(approvalAuthorities.isActive, true)).orderBy(asc(approvalAuthorities.role));
    } catch (error) {
      console.error("Error getting approval authorities:", error);
      throw error;
    }
  }
  // Order approval workflow methods
  async getOrdersForApproval(userRole) {
    try {
      const orders = await db.select().from(purchaseOrders).where(and(
        eq(purchaseOrders.status, "pending"),
        eq(purchaseOrders.currentApproverRole, userRole)
      )).orderBy(desc(purchaseOrders.createdAt));
      return orders;
    } catch (error) {
      console.error("Error getting orders for approval:", error);
      throw error;
    }
  }
  async approveOrderWorkflow(orderId, userId) {
    try {
      const order = await this.getPurchaseOrder(orderId);
      if (!order) {
        throw new Error("Order not found");
      }
      const user = await this.getUserById(userId);
      if (!user) {
        throw new Error("User not found");
      }
      const nextApprover = await this.calculateNextApprover(order.totalAmount || 0, order.approvalLevel || 1);
      const updateData = {
        updatedAt: /* @__PURE__ */ new Date(),
        approvalLevel: (order.approvalLevel || 1) + 1
      };
      if (nextApprover) {
        updateData.currentApproverRole = nextApprover;
      } else {
        updateData.approvalStatus = "approved";
        updateData.currentApproverRole = null;
        updateData.isApproved = true;
        updateData.approvedBy = userId;
        updateData.approvedAt = /* @__PURE__ */ new Date();
      }
      const [updatedOrder] = await db.update(purchaseOrders).set(updateData).where(eq(purchaseOrders.id, orderId)).returning();
      await db.insert(orderHistory).values({
        orderId,
        userId,
        action: nextApprover ? "approved_partial" : "approved_final",
        notes: nextApprover ? "\uB2E8\uACC4\uBCC4 \uC2B9\uC778 \uC644\uB8CC" : "\uCD5C\uC885 \uC2B9\uC778 \uC644\uB8CC",
        timestamp: /* @__PURE__ */ new Date()
      });
      return updatedOrder;
    } catch (error) {
      console.error("Error in approval workflow:", error);
      throw error;
    }
  }
  async calculateNextApprover(amount, currentLevel) {
    try {
      const authorities = await this.getApprovalAuthorities();
      const sortedAuthorities = authorities.filter((auth) => parseFloat(auth.maxAmount) >= amount).sort((a, b) => parseFloat(a.maxAmount) - parseFloat(b.maxAmount));
      if (currentLevel >= sortedAuthorities.length) {
        return null;
      }
      return sortedAuthorities[currentLevel]?.role || null;
    } catch (error) {
      console.error("Error calculating next approver:", error);
      return null;
    }
  }
  async createApprovalAuthority(data) {
    try {
      const [authority] = await db.insert(approvalAuthorities).values(data).returning();
      return authority;
    } catch (error) {
      console.error("Error creating approval authority:", error);
      throw error;
    }
  }
  async updateApprovalAuthority(role, data) {
    try {
      const [authority] = await db.update(approvalAuthorities).set({ ...data, updatedAt: /* @__PURE__ */ new Date() }).where(eq(approvalAuthorities.role, role)).returning();
      return authority;
    } catch (error) {
      console.error("Error updating approval authority:", error);
      throw error;
    }
  }
  async canUserApproveOrder(userId, userRole, orderAmount) {
    try {
      if (userRole === "admin") {
        return true;
      }
      const [authority] = await db.select().from(approvalAuthorities).where(and(
        eq(approvalAuthorities.role, userRole),
        eq(approvalAuthorities.isActive, true)
      ));
      if (!authority) {
        return false;
      }
      return parseFloat(authority.maxAmount) >= orderAmount;
    } catch (error) {
      console.error("Error checking user approval authority:", error);
      return false;
    }
  }
  // Item Categories Management
  async getItemCategories() {
    try {
      console.log("\u{1F50D} Storage: Executing getItemCategories query...");
      console.log("\u{1F50D} Storage: DB instance check:", typeof db, !!db);
      console.log("\u{1F50D} Storage: ItemCategories table check:", typeof itemCategories);
      console.log("\u{1F50D} Storage: Testing basic query first...");
      const testResult = await db.execute(sql2`SELECT 1 as test`);
      console.log("\u{1F50D} Storage: Basic query test result:", testResult);
      console.log("\u{1F50D} Storage: Testing itemCategories table exists...");
      const tableCheck = await db.execute(sql2`SELECT COUNT(*) FROM item_categories`);
      console.log("\u{1F50D} Storage: ItemCategories table count:", tableCheck);
      console.log("\u{1F50D} Storage: Trying simplified itemCategories query...");
      const result = await db.select().from(itemCategories).where(eq(itemCategories.isActive, true)).orderBy(itemCategories.categoryType, itemCategories.displayOrder);
      console.log(`\u{1F50D} Storage: getItemCategories returned ${result.length} categories`);
      return result;
    } catch (error) {
      console.error("\u{1F4A5} Storage: getItemCategories failed:", error);
      console.error("\u{1F4A5} Storage: Error name:", error?.name);
      console.error("\u{1F4A5} Storage: Error code:", error?.code);
      console.error("\u{1F4A5} Storage: Error message:", error?.message);
      console.error("\u{1F4A5} Storage: Error stack:", error?.stack);
      throw error;
    }
  }
  async getItemCategoriesByType(type, parentId) {
    try {
      const conditions = [
        eq(itemCategories.categoryType, type),
        eq(itemCategories.isActive, true)
      ];
      if (parentId !== void 0) {
        conditions.push(eq(itemCategories.parentId, parentId));
      }
      return await db.select().from(itemCategories).where(and(...conditions)).orderBy(itemCategories.displayOrder);
    } catch (error) {
      console.error("Error getting item categories by type:", error);
      throw error;
    }
  }
  async createItemCategory(data) {
    try {
      const [category] = await db.insert(itemCategories).values(data).returning();
      return category;
    } catch (error) {
      console.error("Error creating item category:", error);
      throw error;
    }
  }
  async updateItemCategory(id, data) {
    try {
      const [category] = await db.update(itemCategories).set({ ...data, updatedAt: /* @__PURE__ */ new Date() }).where(eq(itemCategories.id, id)).returning();
      return category;
    } catch (error) {
      console.error("Error updating item category:", error);
      throw error;
    }
  }
  async deleteItemCategory(id) {
    try {
      await db.update(itemCategories).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where(eq(itemCategories.id, id));
    } catch (error) {
      console.error("Error deleting item category:", error);
      throw error;
    }
  }
  // Missing methods for API endpoints
  async getActiveProjects() {
    try {
      return await db.select().from(projects).where(and(
        eq(projects.isActive, true),
        eq(projects.status, "active")
      )).orderBy(projects.projectName);
    } catch (error) {
      console.error("Error getting active projects:", error);
      throw error;
    }
  }
  async getMajorCategories() {
    try {
      return await this.getItemCategoriesByType("major");
    } catch (error) {
      console.error("Error getting major categories:", error);
      throw error;
    }
  }
  async getMiddleCategories(majorId) {
    try {
      return await this.getItemCategoriesByType("middle", majorId);
    } catch (error) {
      console.error("Error getting middle categories:", error);
      throw error;
    }
  }
  async getMinorCategories(middleId) {
    try {
      return await this.getItemCategoriesByType("minor", middleId);
    } catch (error) {
      console.error("Error getting minor categories:", error);
      throw error;
    }
  }
  async getPositions() {
    try {
      return [
        { id: 1, name: "\uD604\uC7A5\uC18C\uC7A5", code: "site_manager", level: 1 },
        { id: 2, name: "\uD604\uC7A5\uB300\uB9AC", code: "site_deputy", level: 2 },
        { id: 3, name: "\uD604\uC7A5\uD300\uC7A5", code: "site_team_leader", level: 3 },
        { id: 4, name: "\uD604\uC7A5\uAE30\uC0AC", code: "site_engineer", level: 4 },
        { id: 5, name: "\uD604\uC7A5\uAE30\uB2A5\uACF5", code: "site_worker", level: 5 }
      ];
    } catch (error) {
      console.error("Error getting positions:", error);
      throw error;
    }
  }
  // Item hierarchy methods for filters
  async getDistinctMajorCategories() {
    try {
      const result = await db.selectDistinct({ majorCategory: purchaseOrderItems.majorCategory }).from(purchaseOrderItems).where(isNotNull(purchaseOrderItems.majorCategory)).orderBy(purchaseOrderItems.majorCategory);
      return result.map((row) => row.majorCategory).filter((cat) => cat !== null && cat !== "");
    } catch (error) {
      console.error("Error getting distinct major categories:", error);
      throw error;
    }
  }
  async getDistinctMiddleCategories(majorCategory) {
    try {
      let query = db.selectDistinct({ middleCategory: purchaseOrderItems.middleCategory }).from(purchaseOrderItems).where(isNotNull(purchaseOrderItems.middleCategory));
      if (majorCategory) {
        query = query.where(eq(purchaseOrderItems.majorCategory, majorCategory));
      }
      const result = await query.orderBy(purchaseOrderItems.middleCategory);
      return result.map((row) => row.middleCategory).filter((cat) => cat !== null && cat !== "");
    } catch (error) {
      console.error("Error getting distinct middle categories:", error);
      throw error;
    }
  }
  async getDistinctMinorCategories(majorCategory, middleCategory) {
    try {
      let conditions = [isNotNull(purchaseOrderItems.minorCategory)];
      if (majorCategory) {
        conditions.push(eq(purchaseOrderItems.majorCategory, majorCategory));
      }
      if (middleCategory) {
        conditions.push(eq(purchaseOrderItems.middleCategory, middleCategory));
      }
      const result = await db.selectDistinct({ minorCategory: purchaseOrderItems.minorCategory }).from(purchaseOrderItems).where(and(...conditions)).orderBy(purchaseOrderItems.minorCategory);
      return result.map((row) => row.minorCategory).filter((cat) => cat !== null && cat !== "");
    } catch (error) {
      console.error("Error getting distinct minor categories:", error);
      throw error;
    }
  }
  // Category statistics
  async getCategoryOrderStats(userId) {
    try {
      const whereClause = userId ? eq(purchaseOrders.userId, userId) : void 0;
      const results = await db.select({
        majorCategory: purchaseOrderItems.majorCategory,
        middleCategory: purchaseOrderItems.middleCategory,
        minorCategory: purchaseOrderItems.minorCategory,
        orderCount: count(purchaseOrderItems.id).as("orderCount"),
        totalAmount: sum(purchaseOrderItems.totalAmount).as("totalAmount")
      }).from(purchaseOrderItems).innerJoin(purchaseOrders, eq(purchaseOrderItems.orderId, purchaseOrders.id)).where(whereClause).groupBy(
        purchaseOrderItems.majorCategory,
        purchaseOrderItems.middleCategory,
        purchaseOrderItems.minorCategory
      ).orderBy(
        purchaseOrderItems.majorCategory,
        purchaseOrderItems.middleCategory,
        purchaseOrderItems.minorCategory
      );
      return results.map((row) => ({
        majorCategory: row.majorCategory || "\uBBF8\uBD84\uB958",
        middleCategory: row.middleCategory || "\uBBF8\uBD84\uB958",
        minorCategory: row.minorCategory || "\uBBF8\uBD84\uB958",
        orderCount: Number(row.orderCount) || 0,
        totalAmount: Number(row.totalAmount) || 0
      }));
    } catch (error) {
      console.error("Error getting category order stats:", error);
      return [];
    }
  }
  // Attachment methods
  async getAttachment(orderId, attachmentId) {
    try {
      const [attachment] = await db.select({
        id: attachments.id,
        orderId: attachments.orderId,
        originalName: attachments.originalName,
        storedName: attachments.storedName,
        filePath: attachments.filePath,
        fileSize: attachments.fileSize,
        mimeType: attachments.mimeType,
        uploadedBy: attachments.uploadedBy,
        uploadedAt: attachments.uploadedAt
        // fileData: attachments.fileData, // Temporarily commented out due to schema migration
      }).from(attachments).where(
        and(
          eq(attachments.id, attachmentId),
          eq(attachments.orderId, orderId)
        )
      );
      return attachment || void 0;
    } catch (error) {
      console.error("Error getting attachment:", error);
      return void 0;
    }
  }
  async getOrderAttachments(orderId) {
    try {
      return await db.select({
        id: attachments.id,
        orderId: attachments.orderId,
        originalName: attachments.originalName,
        storedName: attachments.storedName,
        filePath: attachments.filePath,
        fileSize: attachments.fileSize,
        mimeType: attachments.mimeType,
        uploadedBy: attachments.uploadedBy,
        uploadedAt: attachments.uploadedAt
      }).from(attachments).where(eq(attachments.orderId, orderId));
    } catch (error) {
      console.error("Error getting order attachments:", error);
      return [];
    }
  }
  /**
   * Get attachment by file path (for database-stored PDFs)
   */
  async getAttachmentByPath(filePath) {
    try {
      const [attachment] = await db.select({
        id: attachments.id,
        orderId: attachments.orderId,
        originalName: attachments.originalName,
        storedName: attachments.storedName,
        filePath: attachments.filePath,
        fileSize: attachments.fileSize,
        mimeType: attachments.mimeType,
        uploadedBy: attachments.uploadedBy,
        uploadedAt: attachments.uploadedAt
        // fileData: attachments.fileData, // Temporarily commented out due to schema migration
      }).from(attachments).where(eq(attachments.filePath, filePath));
      return attachment || void 0;
    } catch (error) {
      console.error("Error getting attachment by path:", error);
      return void 0;
    }
  }
};
var storage = new DatabaseStorage();

// server/auth-utils.ts
import bcrypt from "bcrypt";
async function comparePasswords(supplied, stored) {
  try {
    return await bcrypt.compare(supplied, stored);
  } catch (error) {
    console.error("Password comparison error:", error);
    return false;
  }
}

// server/middleware/audit-logger.ts
init_db();
init_schema();
var cachedSettings = null;
var settingsCacheTime = 0;
var CACHE_TTL = 6e4;
async function getAuditSettings() {
  const now = Date.now();
  if (cachedSettings && now - settingsCacheTime < CACHE_TTL) {
    return cachedSettings;
  }
  try {
    const settings = await db.select().from(auditSettings).limit(1);
    cachedSettings = settings[0] || {
      logLevel: "INFO",
      enableAuth: true,
      enableData: true,
      enableSystem: true,
      enableSecurity: true
    };
    settingsCacheTime = now;
    return cachedSettings;
  } catch (error) {
    console.error("Failed to load audit settings:", error);
    return cachedSettings || {
      logLevel: "INFO",
      enableAuth: true,
      enableData: true,
      enableSystem: true,
      enableSecurity: true
    };
  }
}
async function logAuditEvent(eventType, eventCategory, details) {
  try {
    const settings = await getAuditSettings();
    if (settings.logLevel === "OFF") return;
    const categoryEnabled = eventCategory === "auth" && settings.enableAuth || eventCategory === "data" && settings.enableData || eventCategory === "system" && settings.enableSystem || eventCategory === "security" && settings.enableSecurity;
    if (!categoryEnabled) return;
    await db.insert(systemAuditLogs).values({
      userId: details.userId || null,
      userName: details.userName || null,
      userRole: details.userRole || null,
      eventType,
      eventCategory,
      entityType: details.entityType,
      entityId: details.entityId,
      action: details.action,
      additionalDetails: details.additionalDetails ? JSON.stringify(details.additionalDetails) : null,
      oldData: details.oldValue ? JSON.stringify(details.oldValue) : null,
      newData: details.newValue ? JSON.stringify(details.newValue) : null,
      ipAddress: details.ipAddress,
      userAgent: details.userAgent,
      sessionId: details.sessionId
    });
  } catch (error) {
    console.error("Failed to log audit event:", error);
  }
}

// server/jwt-utils.ts
import jwt from "jsonwebtoken";
var JWT_SECRET = process.env.JWT_SECRET || "ikjin-po-mgmt-jwt-secret-2025-secure-key";
var JWT_EXPIRY = "7d";
function generateToken(payload) {
  try {
    console.log("\u{1F527} JWT: Generating token with secret length:", JWT_SECRET.length);
    const token = jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRY });
    console.log("\u2705 JWT: Token generated successfully, length:", token.length);
    return token;
  } catch (error) {
    console.error("\u{1F6A8} JWT: Token generation failed:", error);
    throw new Error(`JWT token generation failed: ${error instanceof Error ? error.message : String(error)}`);
  }
}
function verifyToken(token) {
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    return decoded;
  } catch (error) {
    console.error("JWT verification failed:", error);
    return null;
  }
}
function extractToken(authHeader, cookies) {
  if (authHeader && authHeader.startsWith("Bearer ")) {
    return authHeader.substring(7);
  }
  if (cookies && cookies.auth_token) {
    return cookies.auth_token;
  }
  return null;
}

// server/fallback-auth.ts
import bcrypt2 from "bcrypt";
var FALLBACK_USERS = [
  {
    id: "admin_fallback",
    email: "admin@company.com",
    name: "\uAD00\uB9AC\uC790 (Admin)",
    password: "$2b$10$RbLrxzWq3TQEx6UTrnRwCeWwOai9N0QzdeJxg8iUp71jGS8kKgwjC",
    // admin123
    role: "admin",
    phoneNumber: "010-1234-5678",
    profileImageUrl: null,
    position: "System Administrator",
    isActive: true,
    createdAt: /* @__PURE__ */ new Date("2025-01-01"),
    updatedAt: /* @__PURE__ */ new Date("2025-01-01")
  },
  {
    id: "manager_fallback",
    email: "manager@company.com",
    name: "\uAE40\uBD80\uC7A5 (Manager)",
    password: "$2b$10$0bKxzrV7FqK1V.kVKqMxAuVcB9bXEgEYqIzPxgKqMRPAzVzKQqFJu",
    // manager123
    role: "project_manager",
    phoneNumber: "010-2345-6789",
    profileImageUrl: null,
    position: "Project Manager",
    isActive: true,
    createdAt: /* @__PURE__ */ new Date("2025-01-01"),
    updatedAt: /* @__PURE__ */ new Date("2025-01-01")
  },
  {
    id: "user_fallback",
    email: "user@company.com",
    name: "\uC774\uAE30\uC0AC (Worker)",
    password: "$2b$10$xE3Q1TK0T6LgTjk0xvJQPuR1rg9TI7sEeJRJxQzKjzGRTMvhKaJNm",
    // user123
    role: "field_worker",
    phoneNumber: "010-3456-7890",
    profileImageUrl: null,
    position: "Field Worker",
    isActive: true,
    createdAt: /* @__PURE__ */ new Date("2025-01-01"),
    updatedAt: /* @__PURE__ */ new Date("2025-01-01")
  },
  {
    id: "hq_fallback",
    email: "hq@company.com",
    name: "\uBC15\uCC28\uC7A5 (HQ Manager)",
    password: "$2b$10$qY1PeNJSqcOMczP1P/HqueJRoXGGKwDwt1sGyHaZ9Yrxm.gZHqFdy",
    // hq123
    role: "hq_management",
    phoneNumber: "010-4567-8901",
    profileImageUrl: null,
    position: "HQ Management",
    isActive: true,
    createdAt: /* @__PURE__ */ new Date("2025-01-01"),
    updatedAt: /* @__PURE__ */ new Date("2025-01-01")
  },
  {
    id: "executive_fallback",
    email: "executive@company.com",
    name: "\uCD5C\uC774\uC0AC (Executive)",
    password: "$2b$10$VXKEC3DVtghz0xRWEsZ21.qFOQGsOPg6nYSEyGzx2HnFJz.qf0c5W",
    // exec123
    role: "executive",
    phoneNumber: "010-5678-9012",
    profileImageUrl: null,
    position: "Executive Director",
    isActive: true,
    createdAt: /* @__PURE__ */ new Date("2025-01-01"),
    updatedAt: /* @__PURE__ */ new Date("2025-01-01")
  }
];
async function getFallbackUserByEmail(email) {
  console.log("\u{1F527} Using fallback authentication for email:", email);
  return FALLBACK_USERS.find((u) => u.email === email);
}
async function getFallbackUserById(id) {
  console.log("\u{1F527} Using fallback authentication for ID:", id);
  return FALLBACK_USERS.find((u) => u.id === id);
}
async function verifyFallbackPassword(plainPassword, hashedPassword) {
  try {
    return await bcrypt2.compare(plainPassword, hashedPassword);
  } catch (error) {
    console.error("Password verification error:", error);
    return false;
  }
}
function shouldUseFallback() {
  const dbAvailable = !!process.env.DATABASE_URL;
  const isVercel = !!process.env.VERCEL;
  if (!dbAvailable && isVercel) {
    console.log("\u26A0\uFE0F Database not configured in Vercel - using fallback authentication");
    console.log("\u{1F4CC} To fix: Add DATABASE_URL to Vercel environment variables");
    return true;
  }
  return false;
}
function logFallbackUsage(action, email) {
  console.log(`\u{1F527} FALLBACK AUTH: ${action}${email ? ` for ${email}` : ""}`);
  console.log("\u26A0\uFE0F WARNING: Using fallback authentication - configure DATABASE_URL for production use");
}

// server/local-auth.ts
async function login(req, res) {
  try {
    const { email, password, username } = req.body;
    const loginIdentifier = email || username;
    console.log("=== LOGIN REQUEST START ===");
    console.log("\u{1F510} Attempting login with identifier:", loginIdentifier);
    console.log("\u{1F4CD} Environment:", {
      NODE_ENV: process.env.NODE_ENV,
      VERCEL: process.env.VERCEL,
      VERCEL_ENV: process.env.VERCEL_ENV,
      SESSION_SECRET_SET: !!process.env.SESSION_SECRET,
      DATABASE_URL_SET: !!process.env.DATABASE_URL,
      JWT_SECRET_SET: !!process.env.JWT_SECRET,
      DATABASE_URL_LENGTH: process.env.DATABASE_URL?.length || 0
    });
    console.log("\u{1F36A} Request headers:", {
      cookie: req.headers.cookie,
      origin: req.headers.origin,
      host: req.headers.host
    });
    console.log("\u{1F4CA} Session info BEFORE login:", {
      sessionExists: !!req.session,
      sessionID: req.sessionID,
      sessionCookie: req.session?.cookie,
      sessionData: req.session
    });
    if (!loginIdentifier || !password) {
      return res.status(400).json({ message: "Email/username and password are required" });
    }
    console.log("\u{1F510} Starting authentication process...");
    let user;
    try {
      if (shouldUseFallback()) {
        console.log("\u26A0\uFE0F Using fallback authentication (DATABASE_URL not configured)");
        logFallbackUsage("Login attempt", loginIdentifier);
        user = await getFallbackUserByEmail(loginIdentifier);
      } else {
        console.log("\u{1F50D} DB: Looking up user by email:", loginIdentifier);
        try {
          user = await storage.getUserByEmail(loginIdentifier);
          console.log("\u{1F50D} DB: User lookup result:", user ? "User found" : "User not found");
        } catch (dbError) {
          console.error("\u26A0\uFE0F Database error, falling back to test users:", dbError);
          user = await getFallbackUserByEmail(loginIdentifier);
          if (user) {
            logFallbackUsage("Database error fallback", loginIdentifier);
          }
        }
      }
      if (!user && loginIdentifier === "admin@company.com") {
        console.log("\u{1F527} Admin fallback: Using default admin user");
        user = await getFallbackUserByEmail("admin@company.com");
      }
      if (!user) {
        console.log("\u274C User not found in database:", loginIdentifier);
        return res.status(401).json({ message: "Invalid credentials" });
      }
      if (!user.isActive) {
        console.log("\u274C User account deactivated:", loginIdentifier);
        return res.status(401).json({ message: "Account is deactivated" });
      }
      let isValidPassword = false;
      if (shouldUseFallback() || user.id.includes("_fallback")) {
        isValidPassword = await verifyFallbackPassword(password, user.password);
      } else {
        isValidPassword = await comparePasswords(password, user.password);
      }
      if (!isValidPassword) {
        console.log("\u274C Invalid password for user:", loginIdentifier);
        await logAuditEvent("login_failed", "auth", {
          userName: loginIdentifier,
          action: "Failed login attempt",
          additionalDetails: { reason: "Invalid password" },
          ipAddress: req.ip || req.connection.remoteAddress,
          userAgent: req.headers["user-agent"],
          sessionId: req.sessionID
        });
        return res.status(401).json({ message: "Invalid credentials" });
      }
      const authMethod = shouldUseFallback() || user.id.includes("_fallback") ? "fallback" : "database";
      console.log(`\u2705 Authentication successful (${authMethod}) for user:`, user.name || user.email);
      if (!shouldUseFallback() && !user.id.includes("_fallback")) {
        try {
          await logAuditEvent("login", "auth", {
            userId: user.id,
            userName: user.name || user.email,
            userRole: user.role,
            action: "User logged in",
            ipAddress: req.ip || req.connection.remoteAddress,
            userAgent: req.headers["user-agent"],
            sessionId: req.sessionID
          });
        } catch (logError) {
          console.error("Failed to log audit event (non-fatal):", logError);
        }
      }
    } catch (authError) {
      console.error("\u{1F534} Authentication error:", authError);
      try {
        if (!user) {
          user = await getFallbackUserByEmail(loginIdentifier);
          if (user) {
            const isValidPassword = await verifyFallbackPassword(password, user.password);
            if (!isValidPassword) {
              return res.status(401).json({ message: "Invalid credentials" });
            }
            logFallbackUsage("Emergency fallback", loginIdentifier);
          } else {
            return res.status(401).json({ message: "Invalid credentials" });
          }
        } else {
          return res.status(500).json({ message: "Authentication error" });
        }
      } catch (fallbackError) {
        console.error("\u{1F534} Fallback authentication also failed:", fallbackError);
        return res.status(500).json({ message: "Authentication service unavailable" });
      }
    }
    try {
      console.log("\u{1F527} Starting JWT token generation for user:", {
        userId: user.id,
        email: user.email,
        role: user.role
      });
      const token = generateToken({
        userId: user.id,
        email: user.email,
        role: user.role
      });
      console.log("\u{1F527} JWT token generated successfully for user:", {
        userId: user.id,
        email: user.email,
        role: user.role,
        tokenLength: token.length,
        tokenPreview: token.substring(0, 20) + "..."
      });
      res.cookie("auth_token", token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production" || process.env.VERCEL === "1",
        sameSite: "lax",
        // Use 'lax' for same-site requests
        maxAge: 7 * 24 * 60 * 60 * 1e3,
        // 7 days
        path: "/",
        domain: process.env.COOKIE_DOMAIN || void 0
        // Allow setting custom domain if needed
      });
      console.log("\u2705 JWT token set as cookie for user:", user.id);
      console.log("=== LOGIN REQUEST END - SUCCESS (JWT) ===");
      const { password: _, ...userWithoutPassword } = user;
      res.json({
        message: "Login successful",
        user: userWithoutPassword,
        token
        // Also return token for client-side storage if needed
      });
    } catch (sessionError) {
      console.error("Session handling error (non-fatal):", sessionError);
      const { password: _, ...userWithoutPassword } = user;
      res.json({
        message: "Login successful (no session)",
        user: userWithoutPassword
      });
    }
  } catch (error) {
    console.error("\u{1F6A8} CRITICAL LOGIN ERROR:", error);
    console.error("\u{1F6A8} Error stack:", error instanceof Error ? error.stack : "No stack trace");
    console.error("\u{1F6A8} Error details:", {
      name: error instanceof Error ? error.name : typeof error,
      message: error instanceof Error ? error.message : String(error)
    });
    res.status(500).json({
      message: "Login failed",
      error: process.env.NODE_ENV === "development" ? {
        name: error instanceof Error ? error.name : typeof error,
        message: error instanceof Error ? error.message : String(error)
      } : void 0
    });
  }
}
async function logout(req, res) {
  const token = extractToken(req.headers.authorization, req.cookies);
  if (token) {
    const payload = verifyToken(token);
    if (payload) {
      try {
        const user = await storage.getUser(payload.userId);
        await logAuditEvent("logout", "auth", {
          userId: payload.userId,
          userName: user?.name || user?.email,
          userRole: user?.role,
          action: "User logged out",
          ipAddress: req.ip || req.connection.remoteAddress,
          userAgent: req.headers["user-agent"],
          sessionId: req.sessionID
        });
      } catch (error) {
        console.error("Failed to log logout event:", error);
      }
    }
  }
  res.clearCookie("auth_token", {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production" || process.env.VERCEL === "1",
    sameSite: "lax",
    // Match cookie setting
    path: "/",
    domain: process.env.COOKIE_DOMAIN || void 0
  });
  res.json({ message: "Logout successful" });
}
async function getCurrentUser(req, res) {
  try {
    console.log("=== GET CURRENT USER START (JWT) ===");
    const token = extractToken(req.headers.authorization, req.cookies);
    console.log("\u{1F50D} getCurrentUser - Token present:", !!token);
    console.log("\u{1F50D} getCurrentUser - Cookie header:", req.headers.cookie);
    console.log("\u{1F50D} getCurrentUser - Auth header:", req.headers.authorization);
    if (!token) {
      console.log("\u{1F534} getCurrentUser - No JWT token found");
      return res.status(401).json({
        message: "Not authenticated - no token",
        authenticated: false
      });
    }
    const payload = verifyToken(token);
    if (!payload) {
      console.log("\u{1F534} getCurrentUser - Invalid JWT token");
      return res.status(401).json({
        message: "Invalid token",
        authenticated: false
      });
    }
    console.log("\u{1F50D} getCurrentUser - JWT payload:", {
      userId: payload.userId,
      email: payload.email,
      role: payload.role
    });
    try {
      let user;
      if (shouldUseFallback()) {
        console.log("\u26A0\uFE0F getCurrentUser - Using fallback (DATABASE_URL not configured)");
        user = await getFallbackUserById(payload.userId);
      } else {
        try {
          user = await storage.getUser(payload.userId);
        } catch (dbError) {
          console.error("\u26A0\uFE0F getCurrentUser - Database error, trying fallback:", dbError);
          user = await getFallbackUserById(payload.userId);
        }
      }
      if (!user && (payload.userId === "dev_admin" || payload.userId === "admin_fallback")) {
        console.log("\u{1F527} getCurrentUser - Admin fallback");
        user = await getFallbackUserById("admin_fallback");
      }
      if (!user) {
        console.log("\u{1F534} getCurrentUser - Database user not found:", payload.userId);
        return res.status(401).json({
          message: "User not found",
          authenticated: false
        });
      }
      if (!user.isActive) {
        console.log("\u{1F534} getCurrentUser - User account deactivated:", user.email);
        return res.status(401).json({
          message: "Account is deactivated",
          authenticated: false
        });
      }
      console.log("\u{1F7E2} getCurrentUser - JWT user found:", user.name || user.email);
      req.user = user;
      const { password: _, ...userWithoutPassword } = user;
      res.json({
        ...userWithoutPassword,
        authenticated: true
      });
    } catch (dbError) {
      console.error("\u{1F534} Error in getCurrentUser:", dbError);
      try {
        const fallbackUser = await getFallbackUserById(payload.userId);
        if (fallbackUser && fallbackUser.isActive) {
          req.user = fallbackUser;
          const { password: _, ...userWithoutPassword } = fallbackUser;
          return res.json({
            ...userWithoutPassword,
            authenticated: true
          });
        }
      } catch (fallbackError) {
        console.error("\u{1F534} Fallback also failed:", fallbackError);
      }
      return res.status(401).json({
        message: "Authentication failed",
        authenticated: false
      });
    }
  } catch (error) {
    console.error("\u{1F534} Get current user error:", error);
    res.status(500).json({
      message: "Failed to get user data",
      authenticated: false
    });
  }
}
async function requireAuth(req, res, next) {
  try {
    const token = extractToken(req.headers.authorization, req.cookies);
    if (!token) {
      console.log("\u{1F534} JWT \uC778\uC99D \uC2E4\uD328 - \uD1A0\uD070 \uC5C6\uC74C");
      return res.status(401).json({ message: "Authentication required - no token" });
    }
    const payload = verifyToken(token);
    if (!payload) {
      console.log("\u{1F534} JWT \uC778\uC99D \uC2E4\uD328 - \uC720\uD6A8\uD558\uC9C0 \uC54A\uC740 \uD1A0\uD070");
      return res.status(401).json({ message: "Invalid token" });
    }
    let user;
    if (shouldUseFallback()) {
      console.log("\u{1F527} requireAuth - Using fallback authentication");
      user = await getFallbackUserById(payload.userId);
    } else {
      try {
        user = await storage.getUser(payload.userId);
      } catch (dbError) {
        console.error("\u26A0\uFE0F requireAuth - Database error, using fallback:", dbError);
        user = await getFallbackUserById(payload.userId);
      }
    }
    if (!user && (payload.userId === "dev_admin" || payload.userId === "admin_fallback")) {
      user = await getFallbackUserById("admin_fallback");
    }
    if (!user) {
      console.log("\u{1F534} JWT \uC778\uC99D \uC2E4\uD328 - \uC0AC\uC6A9\uC790 \uC5C6\uC74C:", payload.userId);
      return res.status(401).json({ message: "User not found" });
    }
    if (!user.isActive) {
      console.log("\u{1F534} JWT \uC778\uC99D \uC2E4\uD328 - \uBE44\uD65C\uC131 \uC0AC\uC6A9\uC790:", user.email);
      return res.status(401).json({ message: "Account deactivated" });
    }
    req.user = user;
    console.log("\u{1F7E2} JWT \uC778\uC99D \uC131\uACF5:", req.user.id);
    next();
  } catch (error) {
    console.error("JWT Authentication middleware error:", error);
    res.status(500).json({ message: "Authentication failed" });
  }
}
function requireRole(roles) {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({ message: "Authentication required" });
    }
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: "Insufficient permissions" });
    }
    next();
  };
}
var requireAdmin = requireRole(["admin"]);
var requireOrderManager = requireRole(["admin", "order_manager"]);

// server/services/UserRegistrationService.ts
init_db();
init_schema();
import { eq as eq2, and as and2 } from "drizzle-orm";
import bcrypt3 from "bcrypt";
import { v4 as uuidv4 } from "uuid";
var UserRegistrationService = class {
  /**
   * 회원가입 신청 제출
   */
  static async submitRegistration(data) {
    try {
      const existingUser = await db.select().from(users).where(eq2(users.email, data.email)).limit(1);
      if (existingUser.length > 0) {
        throw new Error("\uC774\uBBF8 \uB4F1\uB85D\uB41C \uC774\uBA54\uC77C \uC8FC\uC18C\uC785\uB2C8\uB2E4.");
      }
      const existingRegistration = await db.select().from(userRegistrations).where(
        and2(
          eq2(userRegistrations.email, data.email),
          eq2(userRegistrations.status, "pending")
        )
      ).limit(1);
      if (existingRegistration.length > 0) {
        throw new Error("\uC774\uBBF8 \uAC00\uC785 \uC2E0\uCCAD\uC774 \uC811\uC218\uB41C \uC774\uBA54\uC77C \uC8FC\uC18C\uC785\uB2C8\uB2E4.");
      }
      const saltRounds = 10;
      const hashedPassword = await bcrypt3.hash(data.password, saltRounds);
      const registrationData = {
        email: data.email,
        name: data.name,
        phoneNumber: data.phoneNumber || null,
        hashedPassword,
        requestedRole: data.requestedRole || "field_worker",
        status: "pending"
      };
      const [newRegistration] = await db.insert(userRegistrations).values(registrationData).returning();
      return newRegistration;
    } catch (error) {
      console.error("Registration submission error:", error);
      throw error;
    }
  }
  /**
   * 가입 신청 승인
   */
  static async approveRegistration(registrationId, adminId) {
    try {
      const registration = await this.getRegistrationById(registrationId);
      if (!registration) {
        throw new Error("\uAC00\uC785 \uC2E0\uCCAD\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.");
      }
      if (registration.status !== "pending") {
        throw new Error("\uC774\uBBF8 \uCC98\uB9AC\uB41C \uAC00\uC785 \uC2E0\uCCAD\uC785\uB2C8\uB2E4.");
      }
      const userId = uuidv4();
      const [newUser] = await db.insert(users).values({
        id: userId,
        email: registration.email,
        name: registration.name,
        password: registration.hashedPassword,
        phoneNumber: registration.phoneNumber,
        role: registration.requestedRole,
        accountStatus: "active",
        isActive: true
      }).returning();
      const [updatedRegistration] = await db.update(userRegistrations).set({
        status: "approved",
        reviewedAt: /* @__PURE__ */ new Date(),
        reviewedBy: adminId
      }).where(eq2(userRegistrations.id, registrationId)).returning();
      return { user: newUser, registration: updatedRegistration };
    } catch (error) {
      console.error("Registration approval error:", error);
      throw error;
    }
  }
  /**
   * 가입 신청 거부
   */
  static async rejectRegistration(registrationId, adminId, reason) {
    try {
      const registration = await this.getRegistrationById(registrationId);
      if (!registration) {
        throw new Error("\uAC00\uC785 \uC2E0\uCCAD\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.");
      }
      if (registration.status !== "pending") {
        throw new Error("\uC774\uBBF8 \uCC98\uB9AC\uB41C \uAC00\uC785 \uC2E0\uCCAD\uC785\uB2C8\uB2E4.");
      }
      const [updatedRegistration] = await db.update(userRegistrations).set({
        status: "rejected",
        rejectionReason: reason,
        reviewedAt: /* @__PURE__ */ new Date(),
        reviewedBy: adminId
      }).where(eq2(userRegistrations.id, registrationId)).returning();
      return updatedRegistration;
    } catch (error) {
      console.error("Registration rejection error:", error);
      throw error;
    }
  }
  /**
   * 대기 중인 가입 신청 목록 조회
   */
  static async getPendingRegistrations() {
    try {
      return await db.select().from(userRegistrations).where(eq2(userRegistrations.status, "pending")).orderBy(userRegistrations.appliedAt);
    } catch (error) {
      console.error("Get pending registrations error:", error);
      throw error;
    }
  }
  /**
   * 모든 가입 신청 목록 조회 (관리자용)
   */
  static async getAllRegistrations() {
    try {
      return await db.select().from(userRegistrations).orderBy(userRegistrations.appliedAt);
    } catch (error) {
      console.error("Get all registrations error:", error);
      throw error;
    }
  }
  /**
   * 특정 가입 신청 조회
   */
  static async getRegistrationById(id) {
    try {
      const [registration] = await db.select().from(userRegistrations).where(eq2(userRegistrations.id, id)).limit(1);
      return registration || null;
    } catch (error) {
      console.error("Get registration by ID error:", error);
      throw error;
    }
  }
  /**
   * 이메일로 가입 신청 조회
   */
  static async getRegistrationByEmail(email) {
    try {
      const [registration] = await db.select().from(userRegistrations).where(eq2(userRegistrations.email, email)).limit(1);
      return registration || null;
    } catch (error) {
      console.error("Get registration by email error:", error);
      throw error;
    }
  }
  /**
   * 가입 신청 삭제 (관리자용)
   */
  static async deleteRegistration(id) {
    try {
      const result = await db.delete(userRegistrations).where(eq2(userRegistrations.id, id));
      return result.rowCount !== void 0 && result.rowCount > 0;
    } catch (error) {
      console.error("Delete registration error:", error);
      throw error;
    }
  }
};

// server/services/PasswordResetService.ts
init_db();
init_schema();
import { eq as eq3, and as and3, gt } from "drizzle-orm";
import bcrypt4 from "bcrypt";
import crypto from "crypto";
var PasswordResetService = class {
  /**
   * 비밀번호 재설정 토큰 생성 및 이메일 발송 요청
   */
  static async requestPasswordReset(email) {
    try {
      const [user] = await db.select().from(users).where(eq3(users.email, email)).limit(1);
      if (!user) {
        throw new Error("\uB4F1\uB85D\uB418\uC9C0 \uC54A\uC740 \uC774\uBA54\uC77C \uC8FC\uC18C\uC785\uB2C8\uB2E4.");
      }
      if (user.accountStatus === "inactive" || user.accountStatus === "suspended") {
        throw new Error("\uBE44\uD65C\uC131\uD654\uB41C \uACC4\uC815\uC785\uB2C8\uB2E4.");
      }
      await db.update(passwordResetTokens).set({ usedAt: /* @__PURE__ */ new Date() }).where(
        and3(
          eq3(passwordResetTokens.userId, user.id),
          eq3(passwordResetTokens.usedAt, null)
        )
      );
      const token = crypto.randomBytes(32).toString("hex");
      const expiresAt = /* @__PURE__ */ new Date();
      expiresAt.setHours(expiresAt.getHours() + 1);
      const tokenData = {
        userId: user.id,
        token,
        expiresAt,
        usedAt: null
      };
      await db.insert(passwordResetTokens).values(tokenData);
      return { token, user };
    } catch (error) {
      console.error("Password reset request error:", error);
      throw error;
    }
  }
  /**
   * 비밀번호 재설정 토큰 검증
   */
  static async verifyResetToken(token) {
    try {
      const [tokenRecord] = await db.select({
        tokenId: passwordResetTokens.id,
        userId: passwordResetTokens.userId,
        expiresAt: passwordResetTokens.expiresAt,
        usedAt: passwordResetTokens.usedAt,
        user: users
      }).from(passwordResetTokens).innerJoin(users, eq3(passwordResetTokens.userId, users.id)).where(eq3(passwordResetTokens.token, token)).limit(1);
      if (!tokenRecord) {
        return {
          isValid: false,
          errorMessage: "\uC798\uBABB\uB41C \uD1A0\uD070\uC785\uB2C8\uB2E4."
        };
      }
      if (tokenRecord.usedAt) {
        return {
          isValid: false,
          errorMessage: "\uC774\uBBF8 \uC0AC\uC6A9\uB41C \uD1A0\uD070\uC785\uB2C8\uB2E4."
        };
      }
      if (/* @__PURE__ */ new Date() > tokenRecord.expiresAt) {
        return {
          isValid: false,
          errorMessage: "\uB9CC\uB8CC\uB41C \uD1A0\uD070\uC785\uB2C8\uB2E4."
        };
      }
      if (tokenRecord.user.accountStatus === "inactive" || tokenRecord.user.accountStatus === "suspended") {
        return {
          isValid: false,
          errorMessage: "\uBE44\uD65C\uC131\uD654\uB41C \uACC4\uC815\uC785\uB2C8\uB2E4."
        };
      }
      return {
        isValid: true,
        user: tokenRecord.user
      };
    } catch (error) {
      console.error("Token verification error:", error);
      return {
        isValid: false,
        errorMessage: "\uD1A0\uD070 \uAC80\uC99D \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."
      };
    }
  }
  /**
   * 비밀번호 재설정 실행
   */
  static async resetPassword(token, newPassword) {
    try {
      const verification = await this.verifyResetToken(token);
      if (!verification.isValid || !verification.user) {
        return {
          success: false,
          message: verification.errorMessage || "\uD1A0\uD070 \uAC80\uC99D\uC5D0 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4."
        };
      }
      const saltRounds = 10;
      const hashedPassword = await bcrypt4.hash(newPassword, saltRounds);
      await db.update(users).set({
        password: hashedPassword,
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq3(users.id, verification.user.id));
      await db.update(passwordResetTokens).set({ usedAt: /* @__PURE__ */ new Date() }).where(eq3(passwordResetTokens.token, token));
      return {
        success: true,
        message: "\uBE44\uBC00\uBC88\uD638\uAC00 \uC131\uACF5\uC801\uC73C\uB85C \uBCC0\uACBD\uB418\uC5C8\uC2B5\uB2C8\uB2E4."
      };
    } catch (error) {
      console.error("Password reset error:", error);
      return {
        success: false,
        message: "\uBE44\uBC00\uBC88\uD638 \uC7AC\uC124\uC815 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."
      };
    }
  }
  /**
   * 만료된 토큰 정리 (배치 작업용)
   */
  static async cleanupExpiredTokens() {
    try {
      const result = await db.delete(passwordResetTokens).where(gt(/* @__PURE__ */ new Date(), passwordResetTokens.expiresAt));
      return result.rowCount || 0;
    } catch (error) {
      console.error("Cleanup expired tokens error:", error);
      return 0;
    }
  }
  /**
   * 사용자의 모든 비밀번호 재설정 토큰 무효화
   */
  static async invalidateUserTokens(userId) {
    try {
      await db.update(passwordResetTokens).set({ usedAt: /* @__PURE__ */ new Date() }).where(
        and3(
          eq3(passwordResetTokens.userId, userId),
          eq3(passwordResetTokens.usedAt, null)
        )
      );
    } catch (error) {
      console.error("Invalidate user tokens error:", error);
      throw error;
    }
  }
  /**
   * 사용자의 비밀번호 재설정 이력 조회 (관리자용)
   */
  static async getPasswordResetHistory(userId) {
    try {
      return await db.select().from(passwordResetTokens).where(eq3(passwordResetTokens.userId, userId)).orderBy(passwordResetTokens.createdAt);
    } catch (error) {
      console.error("Get password reset history error:", error);
      throw error;
    }
  }
};

// server/utils/po-email-service.ts
import nodemailer from "nodemailer";
import path2 from "path";
import fs4 from "fs";
import { fileURLToPath } from "url";
import { dirname } from "path";

// server/services/unified-excel-pdf-service.ts
import { chromium } from "playwright-chromium";
import ExcelJS from "exceljs";
import XLSX from "xlsx";
import path from "path";
import fs from "fs";
var PlaywrightEngine = class {
  constructor() {
    this.name = "playwright";
  }
  async isAvailable() {
    try {
      const browser = await chromium.launch({ headless: true });
      await browser.close();
      return true;
    } catch {
      return false;
    }
  }
  async convert(excelPath, options) {
    const startTime = Date.now();
    let browser = null;
    try {
      console.log(`\u{1F3AD} Playwright \uC5D4\uC9C4\uC73C\uB85C PDF \uBCC0\uD658 \uC2DC\uC791: ${excelPath}`);
      const workbook = new ExcelJS.Workbook();
      await workbook.xlsx.readFile(excelPath);
      const sheets = this.filterSheets(workbook, options);
      console.log(`\u{1F4D6} \uBCC0\uD658\uD560 \uC2DC\uD2B8 \uC218: ${sheets.length}`);
      const html = await this.generateHTML(sheets, options);
      const pdfOptions = this.getPdfOptions(options);
      browser = await chromium.launch({
        headless: true,
        args: [
          "--no-sandbox",
          "--disable-setuid-sandbox",
          "--disable-dev-shm-usage",
          "--disable-accelerated-2d-canvas",
          "--no-first-run",
          "--no-zygote",
          "--disable-gpu",
          "--disable-background-timer-throttling",
          "--disable-backgrounding-occluded-windows",
          "--disable-renderer-backgrounding"
        ],
        timeout: options.timeout || 6e4
      });
      const page = await browser.newPage();
      await page.setViewportSize({ width: 1200, height: 1600 });
      await page.emulateMedia({ media: "print" });
      await page.setContent(html, {
        waitUntil: "networkidle",
        timeout: options.timeout || 3e4
      });
      const pdfPath = options.outputPath || excelPath.replace(/\.(xlsx?|xlsm)$/i, "-unified.pdf");
      await page.pdf({
        path: pdfPath,
        ...pdfOptions
      });
      const stats = fs.statSync(pdfPath);
      const processingTime = Date.now() - startTime;
      return {
        success: true,
        pdfPath,
        engineUsed: this.name,
        stats: {
          fileSize: stats.size,
          sheetCount: sheets.length,
          processingTime
        }
      };
    } catch (error) {
      return {
        success: false,
        error: `Playwright \uBCC0\uD658 \uC2E4\uD328: ${error.message}`,
        engineUsed: this.name,
        stats: {
          fileSize: 0,
          sheetCount: 0,
          processingTime: Date.now() - startTime
        }
      };
    } finally {
      if (browser) {
        await browser.close();
      }
    }
  }
  filterSheets(workbook, options) {
    let sheets = workbook.worksheets;
    if (options.includeSheets && options.includeSheets.length > 0) {
      sheets = sheets.filter(
        (sheet) => options.includeSheets.includes(sheet.name)
      );
    }
    if (options.excludeSheets && options.excludeSheets.length > 0) {
      sheets = sheets.filter(
        (sheet) => !options.excludeSheets.includes(sheet.name)
      );
    }
    return sheets;
  }
  async generateHTML(sheets, options) {
    const sheetsHtml = await Promise.all(
      sheets.map(async (sheet, index2) => {
        const tableHtml = await this.worksheetToHTML(sheet);
        const pageBreak = index2 < sheets.length - 1 ? "page-break-after: always;" : "";
        return `
          <div class="sheet-container" style="${pageBreak}">
            <h2 class="sheet-title">${sheet.name}</h2>
            ${tableHtml}
          </div>
        `;
      })
    );
    const watermarkHtml = options.watermark ? `<div class="watermark">${options.watermark}</div>` : "";
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <style>
            ${this.getCSS(options)}
          </style>
        </head>
        <body>
          ${watermarkHtml}
          ${sheetsHtml.join("")}
        </body>
      </html>
    `;
  }
  async worksheetToHTML(worksheet) {
    const rows = [];
    worksheet.eachRow((row, rowNumber) => {
      const cells = [];
      row.eachCell((cell, colNumber) => {
        const value = cell.value?.toString() || "";
        const style = this.getCellStyle(cell);
        cells.push(`<td style="${style}">${value}</td>`);
      });
      rows.push(`<tr>${cells.join("")}</tr>`);
    });
    return `<table class="excel-table">${rows.join("")}</table>`;
  }
  getCellStyle(cell) {
    const styles = [];
    if (cell.font) {
      if (cell.font.bold) styles.push("font-weight: bold");
      if (cell.font.italic) styles.push("font-style: italic");
      if (cell.font.size) styles.push(`font-size: ${cell.font.size}px`);
    }
    if (cell.fill && cell.fill.type === "pattern") {
      const bgColor = cell.fill.bgColor;
      if (bgColor && bgColor.argb) {
        styles.push(`background-color: #${bgColor.argb.substring(2)}`);
      }
    }
    if (cell.border) {
      styles.push("border: 1px solid #000");
    }
    return styles.join("; ");
  }
  getCSS(options) {
    return `
      body {
        font-family: 'Malgun Gothic', Arial, sans-serif;
        margin: 0;
        padding: 20px;
        font-size: 12px;
        position: relative;
      }
      
      .sheet-container {
        margin-bottom: 20px;
      }
      
      .sheet-title {
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 10px;
        border-bottom: 2px solid #333;
        padding-bottom: 5px;
      }
      
      .excel-table {
        width: 100%;
        border-collapse: collapse;
        table-layout: auto;
      }
      
      .excel-table td {
        border: 1px solid #ccc;
        padding: 4px 8px;
        text-align: left;
        vertical-align: top;
        font-size: 10px;
        line-height: 1.2;
      }
      
      .watermark {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) rotate(-45deg);
        font-size: 48px;
        color: rgba(0,0,0,0.1);
        z-index: -1;
        pointer-events: none;
        font-weight: bold;
      }
      
      @page {
        margin: ${options.margin?.top || "15mm"} ${options.margin?.right || "15mm"} 
                ${options.margin?.bottom || "15mm"} ${options.margin?.left || "15mm"};
        size: ${options.pageFormat || "A4"} ${options.orientation || "landscape"};
      }
    `;
  }
  getPdfOptions(options) {
    return {
      format: options.pageFormat || "A4",
      landscape: options.orientation === "landscape",
      printBackground: options.printBackground !== false,
      margin: {
        top: options.margin?.top || "15mm",
        right: options.margin?.right || "15mm",
        bottom: options.margin?.bottom || "15mm",
        left: options.margin?.left || "15mm"
      },
      preferCSSPageSize: true,
      displayHeaderFooter: options.displayHeaderFooter || false,
      headerTemplate: options.headerTemplate || "",
      footerTemplate: options.footerTemplate || "",
      scale: options.scale || 1
    };
  }
};
var XLSXEngine = class {
  constructor() {
    this.name = "xlsx";
  }
  async isAvailable() {
    return true;
  }
  async convert(excelPath, options) {
    const startTime = Date.now();
    try {
      console.log(`\u{1F4CA} XLSX \uC5D4\uC9C4\uC73C\uB85C PDF \uBCC0\uD658 \uC2DC\uC791: ${excelPath}`);
      const workbook = XLSX.readFile(excelPath);
      const html = this.generateHTMLFromWorkbook(workbook, options);
      const browser = await chromium.launch({ headless: true });
      const page = await browser.newPage();
      await page.setContent(html);
      const pdfPath = options.outputPath || excelPath.replace(/\.(xlsx?|xlsm)$/i, "-xlsx.pdf");
      await page.pdf({
        path: pdfPath,
        format: options.pageFormat || "A4",
        landscape: options.orientation === "landscape",
        printBackground: true
      });
      await browser.close();
      const stats = fs.statSync(pdfPath);
      return {
        success: true,
        pdfPath,
        engineUsed: this.name,
        stats: {
          fileSize: stats.size,
          sheetCount: Object.keys(workbook.Sheets).length,
          processingTime: Date.now() - startTime
        }
      };
    } catch (error) {
      return {
        success: false,
        error: `XLSX \uBCC0\uD658 \uC2E4\uD328: ${error.message}`,
        engineUsed: this.name,
        stats: {
          fileSize: 0,
          sheetCount: 0,
          processingTime: Date.now() - startTime
        }
      };
    }
  }
  generateHTMLFromWorkbook(workbook, options) {
    const sheetNames = Object.keys(workbook.Sheets);
    let filteredSheets = sheetNames;
    if (options.includeSheets && options.includeSheets.length > 0) {
      filteredSheets = sheetNames.filter((name) => options.includeSheets.includes(name));
    }
    if (options.excludeSheets && options.excludeSheets.length > 0) {
      filteredSheets = filteredSheets.filter((name) => !options.excludeSheets.includes(name));
    }
    const sheetsHtml = filteredSheets.map((sheetName, index2) => {
      const worksheet = workbook.Sheets[sheetName];
      const htmlTable = XLSX.utils.sheet_to_html(worksheet);
      const pageBreak = index2 < filteredSheets.length - 1 ? "page-break-after: always;" : "";
      return `
        <div style="${pageBreak}">
          <h2>${sheetName}</h2>
          ${htmlTable}
        </div>
      `;
    });
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <style>
            body { font-family: 'Malgun Gothic', Arial, sans-serif; margin: 20px; }
            table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
            td, th { border: 1px solid #ccc; padding: 4px 8px; font-size: 10px; }
            h2 { border-bottom: 2px solid #333; padding-bottom: 5px; }
          </style>
        </head>
        <body>
          ${sheetsHtml.join("")}
        </body>
      </html>
    `;
  }
};
var MockEngine = class {
  constructor() {
    this.name = "mock";
  }
  async isAvailable() {
    return true;
  }
  async convert(excelPath, options) {
    console.log(`\u{1F3AD} Mock \uC5D4\uC9C4\uC73C\uB85C PDF \uBCC0\uD658: ${excelPath}`);
    const pdfPath = options.outputPath || excelPath.replace(/\.(xlsx?|xlsm)$/i, "-mock.pdf");
    const dummyContent = `Mock PDF for ${path.basename(excelPath)}`;
    fs.writeFileSync(pdfPath, dummyContent);
    return {
      success: true,
      pdfPath,
      engineUsed: this.name,
      stats: {
        fileSize: dummyContent.length,
        sheetCount: 1,
        processingTime: 100
      },
      warnings: ["Mock \uC5D4\uC9C4\uC744 \uC0AC\uC6A9\uD588\uC2B5\uB2C8\uB2E4. \uC2E4\uC81C PDF\uAC00 \uC544\uB2D9\uB2C8\uB2E4."]
    };
  }
};
var UnifiedExcelPdfService = class {
  static {
    this.DEFAULT_OPTIONS = {
      pageFormat: "A4",
      orientation: "landscape",
      quality: "high",
      printBackground: true,
      timeout: 6e4,
      retryCount: 2,
      serverlessMode: process.env.VERCEL === "1",
      margin: {
        top: "15mm",
        right: "15mm",
        bottom: "15mm",
        left: "15mm"
      }
    };
  }
  static {
    this.engines = [
      new PlaywrightEngine(),
      new XLSXEngine(),
      new MockEngine()
    ];
  }
  /**
   * Excel 파일을 PDF로 변환 (통합 인터페이스)
   */
  static async convertExcelToPDF(excelPath, options = {}) {
    const finalOptions = { ...this.DEFAULT_OPTIONS, ...options };
    console.log(`\u{1F504} \uD1B5\uD569 Excel PDF \uC11C\uBE44\uC2A4 \uC2DC\uC791: ${excelPath}`);
    console.log(`\u2699\uFE0F \uC635\uC158: ${JSON.stringify(finalOptions, null, 2)}`);
    if (!fs.existsSync(excelPath)) {
      return {
        success: false,
        error: `Excel \uD30C\uC77C\uC774 \uC874\uC7AC\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4: ${excelPath}`,
        stats: { fileSize: 0, sheetCount: 0, processingTime: 0 }
      };
    }
    const outputPath = finalOptions.outputPath || excelPath.replace(/\.(xlsx?|xlsm)$/i, "-unified.pdf");
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    if (finalOptions.fallbackEngine) {
      const engine = this.engines.find((e) => e.name === finalOptions.fallbackEngine);
      if (engine) {
        return await this.tryConvertWithEngine(engine, excelPath, finalOptions);
      }
    }
    let lastError = "";
    let retryCount = 0;
    for (const engine of this.engines) {
      console.log(`\u{1F527} ${engine.name} \uC5D4\uC9C4 \uC2DC\uB3C4...`);
      if (!await engine.isAvailable()) {
        console.log(`\u274C ${engine.name} \uC5D4\uC9C4 \uC0AC\uC6A9 \uBD88\uAC00`);
        continue;
      }
      for (let retry = 0; retry <= (finalOptions.retryCount || 0); retry++) {
        if (retry > 0) {
          console.log(`\u{1F504} ${engine.name} \uC5D4\uC9C4 \uC7AC\uC2DC\uB3C4 ${retry}/${finalOptions.retryCount}`);
          retryCount++;
        }
        const result = await this.tryConvertWithEngine(engine, excelPath, finalOptions);
        if (result.success) {
          result.stats = result.stats || { fileSize: 0, sheetCount: 0, processingTime: 0 };
          result.stats.retryCount = retryCount;
          return result;
        }
        lastError = result.error || "Unknown error";
        if (retry < (finalOptions.retryCount || 0)) {
          await this.delay(1e3 * (retry + 1));
        }
      }
    }
    return {
      success: false,
      error: `\uBAA8\uB4E0 \uBCC0\uD658 \uC5D4\uC9C4 \uC2E4\uD328. \uB9C8\uC9C0\uB9C9 \uC624\uB958: ${lastError}`,
      stats: { fileSize: 0, sheetCount: 0, processingTime: 0, retryCount }
    };
  }
  /**
   * 특정 엔진으로 변환 시도
   */
  static async tryConvertWithEngine(engine, excelPath, options) {
    try {
      const result = await engine.convert(excelPath, options);
      if (result.success && result.pdfPath) {
        if (fs.existsSync(result.pdfPath)) {
          const stats = fs.statSync(result.pdfPath);
          if (stats.size > 0) {
            console.log(`\u2705 ${engine.name} \uC5D4\uC9C4 \uC131\uACF5: ${result.pdfPath} (${stats.size} bytes)`);
            return result;
          } else {
            return {
              ...result,
              success: false,
              error: `${engine.name} \uC5D4\uC9C4\uC774 \uBE48 PDF\uB97C \uC0DD\uC131\uD588\uC2B5\uB2C8\uB2E4`
            };
          }
        } else {
          return {
            ...result,
            success: false,
            error: `${engine.name} \uC5D4\uC9C4\uC774 PDF \uD30C\uC77C\uC744 \uC0DD\uC131\uD558\uC9C0 \uBABB\uD588\uC2B5\uB2C8\uB2E4`
          };
        }
      }
      return result;
    } catch (error) {
      return {
        success: false,
        error: `${engine.name} \uC5D4\uC9C4 \uC624\uB958: ${error.message}`,
        engineUsed: engine.name,
        stats: { fileSize: 0, sheetCount: 0, processingTime: 0 }
      };
    }
  }
  /**
   * 지원되는 엔진 목록 반환
   */
  static async getAvailableEngines() {
    const available = await Promise.all(
      this.engines.map(async (engine) => ({
        name: engine.name,
        available: await engine.isAvailable()
      }))
    );
    return available.filter((engine) => engine.available).map((engine) => engine.name);
  }
  /**
   * 서비스 상태 확인
   */
  static async getServiceStatus() {
    const engineStatus = await Promise.all(
      this.engines.map(async (engine) => ({
        name: engine.name,
        available: await engine.isAvailable()
      }))
    );
    return {
      available: engineStatus.some((engine) => engine.available),
      engines: engineStatus,
      environment: process.env.VERCEL ? "serverless" : "traditional"
    };
  }
  /**
   * 유틸리티: 지연
   */
  static delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
};

// server/utils/po-template-processor.ts
init_db();
init_schema();
init_excel_input_sheet_remover();
import { eq as eq4 } from "drizzle-orm";
import * as XLSX2 from "xlsx";
import { v4 as uuidv42 } from "uuid";
import fs3 from "fs";
var POTemplateProcessor = class _POTemplateProcessor {
  /**
   * Excel 파일에서 Input 시트를 파싱하여 발주서 데이터 추출
   */
  static parseInputSheet(filePath) {
    try {
      const buffer = fs3.readFileSync(filePath);
      const workbook = XLSX2.read(buffer, { type: "buffer" });
      const inputSheetName = workbook.SheetNames.find(
        (name) => name === "Input"
      );
      if (!inputSheetName) {
        return {
          success: false,
          totalOrders: 0,
          totalItems: 0,
          orders: [],
          error: "Input \uC2DC\uD2B8\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4."
        };
      }
      const worksheet = workbook.Sheets[inputSheetName];
      const data = XLSX2.utils.sheet_to_json(worksheet, { header: 1 });
      const rows = data.slice(1);
      const ordersByNumber = /* @__PURE__ */ new Map();
      for (const row of rows) {
        if (!row || !row[0]) continue;
        const orderNumber = String(row[0]).trim();
        const orderDate = this.formatDate(row[1]);
        const siteName = String(row[2] || "").trim();
        const categoryLv1 = String(row[3] || "").trim();
        const categoryLv2 = String(row[4] || "").trim();
        const categoryLv3 = String(row[5] || "").trim();
        const itemName = String(row[6] || "").trim();
        const specification = String(row[7] || "").trim();
        const quantity = this.safeNumber(row[8]);
        const unitPrice = this.safeNumber(row[9]);
        const supplyAmount = this.safeNumber(row[10]);
        const taxAmount = this.safeNumber(row[11]);
        const totalAmount = this.safeNumber(row[12]);
        const dueDate = this.formatDate(row[13]);
        const vendorName = String(row[14] || "").trim();
        const deliveryName = String(row[15] || "").trim();
        const notes = String(row[16] || "").trim();
        if (!ordersByNumber.has(orderNumber)) {
          ordersByNumber.set(orderNumber, {
            orderNumber,
            orderDate,
            siteName,
            dueDate,
            vendorName,
            totalAmount: 0,
            items: []
          });
        }
        const order = ordersByNumber.get(orderNumber);
        if (itemName) {
          const item = {
            itemName,
            specification,
            quantity,
            unitPrice,
            supplyAmount,
            taxAmount,
            totalAmount,
            categoryLv1,
            categoryLv2,
            categoryLv3,
            vendorName,
            deliveryName,
            notes
          };
          order.items.push(item);
          order.totalAmount += totalAmount;
        }
      }
      const orders = Array.from(ordersByNumber.values());
      return {
        success: true,
        totalOrders: orders.length,
        totalItems: orders.reduce((sum2, order) => sum2 + order.items.length, 0),
        orders
      };
    } catch (error) {
      return {
        success: false,
        totalOrders: 0,
        totalItems: 0,
        orders: [],
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * 파싱된 발주서 데이터를 DB에 저장
   */
  static async saveToDatabase(orders, userId) {
    try {
      let savedOrders = 0;
      await db.transaction(async (tx) => {
        for (const orderData of orders) {
          const vendorId = await this.findOrCreateVendor(tx, orderData.vendorName);
          const projectId = await this.findOrCreateProject(tx, orderData.siteName);
          const [purchaseOrder] = await tx.insert(purchaseOrders).values({
            orderNumber: orderData.orderNumber,
            projectId,
            vendorId,
            userId,
            orderDate: /* @__PURE__ */ new Date(orderData.orderDate + "T00:00:00Z"),
            deliveryDate: orderData.dueDate ? /* @__PURE__ */ new Date(orderData.dueDate + "T00:00:00Z") : null,
            totalAmount: orderData.totalAmount,
            status: "draft",
            notes: `PO Template\uC5D0\uC11C \uC790\uB3D9 \uC0DD\uC131\uB428`
          }).returning();
          for (const item of orderData.items) {
            await tx.insert(purchaseOrderItems).values({
              orderId: purchaseOrder.id,
              itemName: item.itemName,
              specification: item.specification,
              quantity: item.quantity,
              unitPrice: item.unitPrice,
              totalAmount: item.totalAmount,
              majorCategory: item.categoryLv1,
              middleCategory: item.categoryLv2,
              minorCategory: item.categoryLv3,
              notes: item.notes
            });
          }
          savedOrders++;
        }
      });
      return {
        success: true,
        savedOrders
      };
    } catch (error) {
      return {
        success: false,
        savedOrders: 0,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * 특정 시트들을 별도 파일로 추출 (Input 시트 제거)
   * xlwings 기반 완벽한 서식 보존
   */
  static async extractSheetsToFile(sourcePath, targetPath, sheetNames = ["\uAC11\uC9C0", "\uC744\uC9C0"]) {
    try {
      console.log(`\u{1F4C4} \uC2DC\uD2B8 \uCD94\uCD9C \uC2DC\uC791 (xlwings \uAE30\uBC18): ${sourcePath} -> ${targetPath}`);
      console.log(`[DEBUG] POTemplateProcessor.extractSheetsToFile called at ${(/* @__PURE__ */ new Date()).toISOString()}`);
      console.log(`[DEBUG] sourcePath: ${sourcePath}`);
      console.log(`[DEBUG] targetPath: ${targetPath}`);
      console.log(`[DEBUG] sheetNames: ${JSON.stringify(sheetNames)}`);
      const result = await _POTemplateProcessor.removeInputSheetOnly(
        sourcePath,
        targetPath,
        "Input"
      );
      if (result.success) {
        const extractedSheets = result.remainingSheets.filter(
          (sheetName) => sheetNames.includes(sheetName)
        );
        console.log(`\u2705 \uC2DC\uD2B8 \uCD94\uCD9C \uC644\uB8CC: ${extractedSheets.join(", ")}`);
        return {
          success: true,
          extractedSheets
        };
      } else {
        console.error(`\u274C \uC2DC\uD2B8 \uCD94\uCD9C \uC2E4\uD328: ${result.error}`);
        return {
          success: false,
          extractedSheets: [],
          error: result.error
        };
      }
    } catch (error) {
      console.error(`\u274C \uC2DC\uD2B8 \uCD94\uCD9C \uC624\uB958:`, error);
      return {
        success: false,
        extractedSheets: [],
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Input 시트만 제거하고 원본 형식을 유지한 엑셀 파일 생성
   * 기존 엑셀 파일의 모든 형식(셀 테두리, 병합, 색상, 서식 등)을 그대로 유지
   */
  static async removeInputSheetOnly(sourcePath, targetPath, inputSheetName = "Input") {
    try {
      console.log(`\u{1F4C4} Input \uC2DC\uD2B8 \uC81C\uAC70 \uC2DC\uC791: ${sourcePath} -> ${targetPath}`);
      console.log(`[DEBUG] POTemplateProcessor.removeInputSheetOnly called at ${(/* @__PURE__ */ new Date()).toISOString()}`);
      console.log(`[DEBUG] sourcePath: ${sourcePath}`);
      console.log(`[DEBUG] targetPath: ${targetPath}`);
      console.log(`[DEBUG] inputSheetName: ${inputSheetName}`);
      const result = await removeAllInputSheets(sourcePath, targetPath);
      if (result.success) {
        console.log(`\u2705 Input \uC2DC\uD2B8 \uC81C\uAC70 \uC644\uB8CC (\uC6D0\uBCF8 \uC11C\uC2DD \uBCF4\uC874\uB428)`);
      }
      return {
        success: result.success,
        removedSheet: result.removedSheets.length > 0,
        remainingSheets: result.remainingSheets,
        error: result.error
      };
    } catch (error) {
      console.error(`\u274C Input \uC2DC\uD2B8 \uC81C\uAC70 \uC911 \uC624\uB958:`, error);
      return {
        success: false,
        removedSheet: false,
        remainingSheets: [],
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * 유틸리티 메서드들
   */
  static formatDate(dateValue) {
    if (!dateValue) return "";
    try {
      if (dateValue instanceof Date) {
        return dateValue.toISOString().split("T")[0];
      }
      if (typeof dateValue === "number") {
        const date2 = new Date((dateValue - 25569) * 86400 * 1e3);
        return date2.toISOString().split("T")[0];
      }
      if (typeof dateValue === "string") {
        let dateStr = dateValue.trim();
        if (/^\d{4}\.\d{1,2}\.\d{1,2}$/.test(dateStr)) {
          dateStr = dateStr.replace(/\./g, "-");
        }
        const date2 = new Date(dateStr);
        if (!isNaN(date2.getTime())) {
          return date2.toISOString().split("T")[0];
        }
      }
      return String(dateValue);
    } catch {
      return String(dateValue);
    }
  }
  static safeNumber(value) {
    if (typeof value === "number") return value;
    if (typeof value === "string") {
      const cleaned = value.replace(/[,\s]/g, "");
      const parsed = parseFloat(cleaned);
      return isNaN(parsed) ? 0 : parsed;
    }
    return 0;
  }
  static async findOrCreateVendor(tx, vendorName) {
    if (!vendorName) {
      const [vendor] = await tx.insert(vendors).values({
        name: "\uBBF8\uC9C0\uC815 \uAC70\uB798\uCC98",
        contactPerson: "\uBBF8\uC9C0\uC815",
        email: `unknown-${uuidv42()}@example.com`,
        mainContact: "\uBBF8\uC9C0\uC815"
      }).returning();
      return vendor.id;
    }
    const existingVendor = await tx.select().from(vendors).where(eq4(vendors.name, vendorName)).limit(1);
    if (existingVendor.length > 0) {
      return existingVendor[0].id;
    }
    const [newVendor] = await tx.insert(vendors).values({
      name: vendorName,
      contactPerson: "\uC790\uB3D9\uC0DD\uC131",
      email: `auto-${uuidv42()}@example.com`,
      mainContact: "\uC790\uB3D9\uC0DD\uC131"
    }).returning();
    return newVendor.id;
  }
  static async findOrCreateProject(tx, siteName) {
    if (!siteName) {
      const [project] = await tx.insert(projects).values({
        projectName: "\uBBF8\uC9C0\uC815 \uD604\uC7A5",
        projectCode: `AUTO-${uuidv42().slice(0, 8)}`,
        status: "active"
      }).returning();
      return project.id;
    }
    const existingProject = await tx.select().from(projects).where(eq4(projects.projectName, siteName)).limit(1);
    if (existingProject.length > 0) {
      return existingProject[0].id;
    }
    const [newProject] = await tx.insert(projects).values({
      projectName: siteName,
      projectCode: `AUTO-${uuidv42().slice(0, 8)}`,
      status: "active"
    }).returning();
    return newProject.id;
  }
};

// server/utils/po-email-service.ts
init_excel_input_sheet_remover();
init_db();
init_schema();
import { eq as eq5 } from "drizzle-orm";
var __filename = fileURLToPath(import.meta.url);
var __dirname = dirname(__filename);
var POEmailService = class {
  constructor() {
    this.db = db;
    this.transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST || "smtp.naver.com",
      port: parseInt(process.env.SMTP_PORT || "587"),
      secure: false,
      // true for 465, false for other ports
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
      },
      tls: {
        rejectUnauthorized: false
      }
    });
  }
  /**
   * 발주서 ID로 품목 정보 조회
   */
  async getOrderItemsByOrderId(orderId) {
    try {
      const items3 = await this.db.select().from(purchaseOrderItems).where(eq5(purchaseOrderItems.orderId, orderId));
      return items3.map((item) => ({
        itemName: item.itemName || void 0,
        specification: item.specification || void 0,
        unit: item.unit || void 0,
        quantity: item.quantity || 0,
        unitPrice: item.unitPrice || 0,
        totalAmount: item.totalAmount || 0,
        remarks: item.remarks || void 0
      }));
    } catch (error) {
      console.error("\uD488\uBAA9 \uC815\uBCF4 \uC870\uD68C \uC2E4\uD328:", error);
      return [];
    }
  }
  /**
   * 발주서 정보와 품목을 포함한 상세 이메일 발송 (원본 형식 유지)
   */
  async sendPOWithOrderItemsFromDB(originalFilePath, orderId, emailOptions) {
    try {
      const orderItems = await this.getOrderItemsByOrderId(orderId);
      const enhancedOptions = {
        ...emailOptions,
        orderItems
      };
      return await this.sendPOWithOriginalFormat(originalFilePath, enhancedOptions);
    } catch (error) {
      console.error("\u274C \uBC1C\uC8FC\uC11C \uC0C1\uC138 \uC815\uBCF4 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC624\uB958:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Input 시트만 제거한 원본 형식 유지 엑셀과 PDF로 첨부하여 이메일 발송
   * 기존 방식과 달리 엑셀 파일의 원본 형식(테두리, 병합, 색상 등)을 그대로 유지
   */
  async sendPOWithOriginalFormat(originalFilePath, emailOptions) {
    try {
      const timestamp2 = Date.now();
      const uploadsDir = path2.join(__dirname, "../../uploads");
      const processedPath = path2.join(uploadsDir, `po-advanced-format-${timestamp2}.xlsx`);
      const removeResult = await removeAllInputSheets(
        originalFilePath,
        processedPath
      );
      if (!removeResult.success) {
        return {
          success: false,
          error: `Input \uC2DC\uD2B8 \uC81C\uAC70 \uC2E4\uD328: ${removeResult.error}`
        };
      }
      console.log(`\u{1F4C4} \uACE0\uAE09 \uD615\uC2DD \uBCF4\uC874 \uD30C\uC77C \uC0DD\uC131: ${processedPath}`);
      console.log(`\u{1F3AF} Input \uC2DC\uD2B8 \uC81C\uAC70 \uC644\uB8CC`);
      console.log(`\u{1F4CB} \uB0A8\uC740 \uC2DC\uD2B8: ${removeResult.remainingSheets.join(", ")}`);
      const pdfPath = path2.join(uploadsDir, `po-advanced-format-${timestamp2}.pdf`);
      let pdfResult = { success: false, error: "" };
      try {
        const result2 = await UnifiedExcelPdfService.convertExcelToPDF(processedPath, {
          outputPath: pdfPath,
          quality: "high",
          orientation: "landscape",
          excludeSheets: ["Input", "Settings"],
          watermark: `\uBC1C\uC8FC\uC11C - ${emailOptions.orderNumber || ""}`,
          retryCount: 2
        });
        if (result2.success) {
          pdfResult.success = true;
          const fileSize = result2.stats ? Math.round(result2.stats.fileSize / 1024) : 0;
          console.log(`\u2705 ${result2.engineUsed} \uC5D4\uC9C4\uC73C\uB85C PDF \uBCC0\uD658 \uC131\uACF5: ${pdfPath} (${fileSize}KB)`);
          if (result2.warnings && result2.warnings.length > 0) {
            console.warn(`\u26A0\uFE0F \uACBD\uACE0: ${result2.warnings.join(", ")}`);
          }
        } else {
          pdfResult.error = result2.error || "\uD1B5\uD569 PDF \uC11C\uBE44\uC2A4 \uBCC0\uD658 \uC2E4\uD328";
          console.warn(`\u26A0\uFE0F PDF \uBCC0\uD658 \uC2E4\uD328: ${pdfResult.error}, Excel \uD30C\uC77C\uB9CC \uCCA8\uBD80\uD569\uB2C8\uB2E4.`);
        }
      } catch (error) {
        pdfResult.error = `\uD1B5\uD569 PDF \uC11C\uBE44\uC2A4 \uC624\uB958: ${error.message}`;
        console.warn(`\u26A0\uFE0F PDF \uBCC0\uD658 \uC644\uC804 \uC2E4\uD328: ${pdfResult.error}, Excel \uD30C\uC77C\uB9CC \uCCA8\uBD80\uD569\uB2C8\uB2E4.`);
      }
      const attachments3 = [];
      if (fs4.existsSync(processedPath)) {
        attachments3.push({
          filename: `\uBC1C\uC8FC\uC11C_${emailOptions.orderNumber || timestamp2}.xlsx`,
          path: processedPath,
          contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        });
        console.log(`\u{1F4CE} Excel \uCCA8\uBD80\uD30C\uC77C \uCD94\uAC00: \uBC1C\uC8FC\uC11C_${emailOptions.orderNumber || timestamp2}.xlsx`);
      }
      if (pdfResult.success && fs4.existsSync(pdfPath)) {
        attachments3.push({
          filename: `\uBC1C\uC8FC\uC11C_${emailOptions.orderNumber || timestamp2}.pdf`,
          path: pdfPath,
          contentType: "application/pdf"
        });
        console.log(`\u{1F4CE} PDF \uCCA8\uBD80\uD30C\uC77C \uCD94\uAC00: \uBC1C\uC8FC\uC11C_${emailOptions.orderNumber || timestamp2}.pdf`);
      }
      if (attachments3.length === 0) {
        return {
          success: false,
          error: "\uCCA8\uBD80\uD560 \uD30C\uC77C\uC774 \uC0DD\uC131\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4."
        };
      }
      const emailContent = this.generateEmailContent(emailOptions);
      const result = await this.sendEmail({
        to: emailOptions.to,
        cc: emailOptions.cc,
        bcc: emailOptions.bcc,
        subject: emailOptions.subject || `\uBC1C\uC8FC\uC11C \uC804\uC1A1 - ${emailOptions.orderNumber || ""}`,
        html: emailContent,
        attachments: attachments3
      });
      this.cleanupTempFiles([processedPath, pdfPath]);
      if (result.success) {
        console.log(`\u2705 \uC6D0\uBCF8 \uD615\uC2DD \uC720\uC9C0 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC131\uACF5: ${emailOptions.to}`);
      }
      return result;
    } catch (error) {
      console.error("\u274C \uC6D0\uBCF8 \uD615\uC2DD \uC720\uC9C0 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC624\uB958:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }
  /**
   * [기존 방식] 갑지/을지 시트를 Excel과 PDF로 첨부하여 이메일 발송
   * @deprecated 형식 손상 문제로 sendPOWithOriginalFormat 사용 권장
   */
  async sendPOWithAttachments(originalFilePath, emailOptions) {
    try {
      const timestamp2 = Date.now();
      const uploadsDir = path2.join(__dirname, "../../uploads");
      const extractedPath = path2.join(uploadsDir, `po-sheets-${timestamp2}.xlsx`);
      const extractResult = POTemplateProcessor.extractSheetsToFile(
        originalFilePath,
        extractedPath,
        ["\uAC11\uC9C0", "\uC744\uC9C0"]
      );
      const extractResultData = await extractResult;
      if (!extractResultData.success) {
        return {
          success: false,
          error: `\uC2DC\uD2B8 \uCD94\uCD9C \uC2E4\uD328: ${extractResultData.error}`
        };
      }
      const pdfPath = path2.join(uploadsDir, `po-sheets-${timestamp2}.pdf`);
      const pdfResult = await UnifiedExcelPdfService.convertExcelToPDF(extractedPath, {
        outputPath: pdfPath,
        quality: "high",
        orientation: "landscape",
        excludeSheets: ["Input", "Settings"],
        watermark: `\uBC1C\uC8FC\uC11C - ${emailOptions.orderNumber || ""}`,
        retryCount: 2
      });
      if (!pdfResult.success) {
        return {
          success: false,
          error: `PDF \uBCC0\uD658 \uC2E4\uD328: ${pdfResult.error}`
        };
      }
      const attachments3 = [];
      if (fs4.existsSync(extractedPath)) {
        attachments3.push({
          filename: `\uBC1C\uC8FC\uC11C_${emailOptions.orderNumber || timestamp2}.xlsx`,
          path: extractedPath,
          contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        });
      }
      if (fs4.existsSync(pdfPath)) {
        attachments3.push({
          filename: `\uBC1C\uC8FC\uC11C_${emailOptions.orderNumber || timestamp2}.pdf`,
          path: pdfPath,
          contentType: "application/pdf"
        });
      }
      const emailContent = this.generateEmailContent(emailOptions);
      const result = await this.sendEmail({
        to: emailOptions.to,
        cc: emailOptions.cc,
        bcc: emailOptions.bcc,
        subject: emailOptions.subject,
        html: emailContent,
        attachments: attachments3
      });
      this.cleanupTempFiles([extractedPath, pdfPath]);
      return result;
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * 기본 이메일 발송
   */
  async sendEmail(options) {
    try {
      console.log("\u{1F50D} POEmailService.sendEmail \uD638\uCD9C\uB428:", {
        to: options.to,
        cc: options.cc,
        subject: options.subject,
        attachmentsCount: options.attachments?.length || 0,
        smtpConfig: {
          host: process.env.SMTP_HOST || "smtp.naver.com",
          port: parseInt(process.env.SMTP_PORT || "587"),
          user: process.env.SMTP_USER
        }
      });
      const info = await this.transporter.sendMail({
        from: `"\uBC1C\uC8FC \uC2DC\uC2A4\uD15C" <${process.env.SMTP_USER}>`,
        to: Array.isArray(options.to) ? options.to.join(", ") : options.to,
        cc: options.cc ? Array.isArray(options.cc) ? options.cc.join(", ") : options.cc : void 0,
        bcc: options.bcc ? Array.isArray(options.bcc) ? options.bcc.join(", ") : options.bcc : void 0,
        subject: options.subject,
        text: options.text,
        html: options.html,
        attachments: options.attachments?.map((att) => ({
          filename: att.filename,
          path: att.path,
          contentType: att.contentType
        }))
      });
      console.log("\u2705 POEmailService.sendEmail \uC131\uACF5:", info.messageId);
      return {
        success: true,
        messageId: info.messageId
      };
    } catch (error) {
      console.error("\u274C POEmailService.sendEmail \uC2E4\uD328:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * 이메일 내용 생성
   */
  generateEmailContent(options) {
    const formatCurrency = (amount) => {
      return new Intl.NumberFormat("ko-KR", {
        style: "currency",
        currency: "KRW"
      }).format(amount);
    };
    const formatNumber = (num) => {
      return new Intl.NumberFormat("ko-KR").format(num);
    };
    const formatDate = (dateString) => {
      try {
        const date2 = new Date(dateString);
        return date2.toLocaleDateString("ko-KR", {
          year: "numeric",
          month: "long",
          day: "numeric"
        });
      } catch {
        return dateString;
      }
    };
    const generateOrderItemsTable = (items3) => {
      if (!items3 || items3.length === 0) return "";
      const itemRows = items3.map((item, index2) => `
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${index2 + 1}</td>
          <td style="border: 1px solid #ddd; padding: 8px;">${item.itemName || "-"}</td>
          <td style="border: 1px solid #ddd; padding: 8px;">${item.specification || "-"}</td>
          <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${item.unit || "-"}</td>
          <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">${formatNumber(item.quantity)}</td>
          <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">${formatCurrency(item.unitPrice)}</td>
          <td style="border: 1px solid #ddd; padding: 8px; text-align: right;"><strong>${formatCurrency(item.totalAmount)}</strong></td>
          <td style="border: 1px solid #ddd; padding: 8px;">${item.remarks || "-"}</td>
        </tr>
      `).join("");
      const totalAmount = items3.reduce((sum2, item) => sum2 + item.totalAmount, 0);
      return `
        <div style="margin: 20px 0;">
          <h3 style="color: #333; margin-bottom: 10px;">\u{1F4CB} \uBC1C\uC8FC \uD488\uBAA9 \uC0C1\uC138</h3>
          <table style="width: 100%; border-collapse: collapse; font-size: 12px;">
            <thead>
              <tr style="background-color: #f8f9fa;">
                <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">\uBC88\uD638</th>
                <th style="border: 1px solid #ddd; padding: 8px;">\uD488\uBAA9\uBA85</th>
                <th style="border: 1px solid #ddd; padding: 8px;">\uADDC\uACA9</th>
                <th style="border: 1px solid #ddd; padding: 8px;">\uB2E8\uC704</th>
                <th style="border: 1px solid #ddd; padding: 8px;">\uC218\uB7C9</th>
                <th style="border: 1px solid #ddd; padding: 8px;">\uB2E8\uAC00</th>
                <th style="border: 1px solid #ddd; padding: 8px;">\uAE08\uC561</th>
                <th style="border: 1px solid #ddd; padding: 8px;">\uBE44\uACE0</th>
              </tr>
            </thead>
            <tbody>
              ${itemRows}
              <tr style="background-color: #e9ecef; font-weight: bold;">
                <td colspan="6" style="border: 1px solid #ddd; padding: 8px; text-align: right;">\uD569\uACC4</td>
                <td style="border: 1px solid #ddd; padding: 8px; text-align: right; color: #dc3545;">
                  ${formatCurrency(totalAmount)}
                </td>
                <td style="border: 1px solid #ddd; padding: 8px;"></td>
              </tr>
            </tbody>
          </table>
        </div>
      `;
    };
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <style>
            body {
              font-family: 'Malgun Gothic', Arial, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 600px;
              margin: 0 auto;
              padding: 20px;
            }
            
            .header {
              background-color: #007bff;
              color: white;
              padding: 20px;
              border-radius: 8px 8px 0 0;
              text-align: center;
            }
            
            .content {
              background-color: #f8f9fa;
              padding: 30px;
              border-radius: 0 0 8px 8px;
            }
            
            .info-table {
              width: 100%;
              border-collapse: collapse;
              margin: 20px 0;
            }
            
            .info-table th,
            .info-table td {
              border: 1px solid #ddd;
              padding: 12px;
              text-align: left;
            }
            
            .info-table th {
              background-color: #e9ecef;
              font-weight: bold;
              width: 30%;
            }
            
            .attachments {
              background-color: #e7f3ff;
              padding: 15px;
              border-radius: 5px;
              margin: 20px 0;
            }
            
            .footer {
              margin-top: 30px;
              padding-top: 20px;
              border-top: 1px solid #ddd;
              font-size: 12px;
              color: #666;
              text-align: center;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>\u{1F4CB} \uBC1C\uC8FC\uC11C \uC1A1\uBD80</h1>
            <p>\uAD6C\uB9E4 \uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C</p>
          </div>
          
          <div class="content">
            <p>\uC548\uB155\uD558\uC138\uC694,</p>
            <p>\uBC1C\uC8FC\uC11C\uB97C \uC1A1\uBD80\uB4DC\uB9BD\uB2C8\uB2E4. \uCCA8\uBD80\uB41C \uD30C\uC77C\uC744 \uD655\uC778\uD558\uC5EC \uC8FC\uC2DC\uAE30 \uBC14\uB78D\uB2C8\uB2E4.</p>
            
            ${options.orderNumber ? `
              <table class="info-table">
                <tr>
                  <th>\uBC1C\uC8FC\uBC88\uD638</th>
                  <td>${options.orderNumber}</td>
                </tr>
                ${options.vendorName ? `
                  <tr>
                    <th>\uAC70\uB798\uCC98\uBA85</th>
                    <td>${options.vendorName}</td>
                  </tr>
                ` : ""}
                ${options.orderDate ? `
                  <tr>
                    <th>\uBC1C\uC8FC\uC77C\uC790</th>
                    <td>${formatDate(options.orderDate)}</td>
                  </tr>
                ` : ""}
                ${options.dueDate ? `
                  <tr>
                    <th>\uB0A9\uAE30\uC77C\uC790</th>
                    <td>${formatDate(options.dueDate)}</td>
                  </tr>
                ` : ""}
                ${options.totalAmount ? `
                  <tr>
                    <th>\uCD1D \uAE08\uC561</th>
                    <td><strong>${formatCurrency(options.totalAmount)}</strong></td>
                  </tr>
                ` : ""}
              </table>
            ` : ""}

            ${options.orderItems && options.orderItems.length > 0 ? generateOrderItemsTable(options.orderItems) : ""}
            
            <div class="attachments">
              <h3>\u{1F4CE} \uCCA8\uBD80\uD30C\uC77C</h3>
              <ul>
                <li>\uBC1C\uC8FC\uC11C.xlsx (Excel \uD30C\uC77C)</li>
                <li>\uBC1C\uC8FC\uC11C.pdf (PDF \uD30C\uC77C)</li>
              </ul>
              <p><small>* \uAC11\uC9C0\uC640 \uC744\uC9C0 \uC2DC\uD2B8\uAC00 \uD3EC\uD568\uB418\uC5B4 \uC788\uC2B5\uB2C8\uB2E4.</small></p>
            </div>
            
            ${options.specialRequirements ? `
              <div style="background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h3>\u26A0\uFE0F \uD2B9\uC774\uC0AC\uD56D</h3>
                <p>${options.specialRequirements}</p>
              </div>
            ` : ""}

            ${options.additionalMessage ? `
              <div style="background-color: #e7f3ff; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h3>\u{1F4DD} \uCD94\uAC00 \uC548\uB0B4\uC0AC\uD56D</h3>
                <p>${options.additionalMessage}</p>
              </div>
            ` : ""}
            
            <p>
              \uBC1C\uC8FC\uC11C \uAC80\uD1A0 \uD6C4 \uD655\uC778 \uD68C\uC2E0 \uBD80\uD0C1\uB4DC\uB9BD\uB2C8\uB2E4.<br>
              \uBB38\uC758\uC0AC\uD56D\uC774 \uC788\uC73C\uC2DC\uBA74 \uC5B8\uC81C\uB4E0\uC9C0 \uC5F0\uB77D\uC8FC\uC2DC\uAE30 \uBC14\uB78D\uB2C8\uB2E4.
            </p>
            
            <p>\uAC10\uC0AC\uD569\uB2C8\uB2E4.</p>
          </div>
          
          <div class="footer">
            <p>
              \uC774 \uBA54\uC77C\uC740 \uAD6C\uB9E4 \uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C\uC5D0\uC11C \uC790\uB3D9\uC73C\uB85C \uBC1C\uC1A1\uB418\uC5C8\uC2B5\uB2C8\uB2E4.<br>
              \uBC1C\uC1A1 \uC2DC\uAC04: ${(/* @__PURE__ */ new Date()).toLocaleString("ko-KR")}
            </p>
          </div>
        </body>
      </html>
    `;
  }
  /**
   * 임시 파일 정리
   */
  cleanupTempFiles(filePaths) {
    filePaths.forEach((filePath) => {
      try {
        if (fs4.existsSync(filePath)) {
          fs4.unlinkSync(filePath);
        }
      } catch (error) {
        console.error(`\uD30C\uC77C \uC815\uB9AC \uC2E4\uD328: ${filePath}`, error);
      }
    });
  }
  /**
   * 이메일 연결 테스트
   */
  async testConnection() {
    try {
      await this.transporter.verify();
      return { success: true };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
};

// server/services/AuthEmailService.ts
var AUTH_EMAIL_TEMPLATES = {
  REGISTRATION_APPROVED: {
    subject: "[\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C] \uD68C\uC6D0\uAC00\uC785\uC774 \uC2B9\uC778\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
    template: (name) => `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: 'Malgun Gothic', sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #3B82F6; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background-color: #f8f9fa; padding: 30px; border-radius: 0 0 8px 8px; }
          .button { display: inline-block; background-color: #10B981; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }
          .footer { margin-top: 20px; text-align: center; color: #666; font-size: 12px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>\u{1F389} \uD68C\uC6D0\uAC00\uC785 \uC2B9\uC778 \uC644\uB8CC</h1>
          </div>
          <div class="content">
            <p><strong>${name}</strong>\uB2D8, \uC548\uB155\uD558\uC138\uC694!</p>
            
            <p>\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C \uD68C\uC6D0\uAC00\uC785 \uC2E0\uCCAD\uC774 <strong style="color: #10B981;">\uC2B9\uC778</strong>\uB418\uC5C8\uC2B5\uB2C8\uB2E4.</p>
            
            <p>\uC774\uC81C \uB2E4\uC74C\uACFC \uAC19\uC740 \uC11C\uBE44\uC2A4\uB97C \uC774\uC6A9\uD558\uC2E4 \uC218 \uC788\uC2B5\uB2C8\uB2E4:</p>
            <ul>
              <li>\uBC1C\uC8FC\uC11C \uC791\uC131 \uBC0F \uAD00\uB9AC</li>
              <li>\uC2B9\uC778 \uC6CC\uD06C\uD50C\uB85C\uC6B0 \uCC38\uC5EC</li>
              <li>\uD504\uB85C\uC81D\uD2B8\uBCC4 \uBC1C\uC8FC \uD604\uD669 \uC870\uD68C</li>
              <li>\uAC70\uB798\uCC98 \uAD00\uB9AC</li>
            </ul>
            
            <p>\uC544\uB798 \uBC84\uD2BC\uC744 \uD074\uB9AD\uD558\uC5EC \uB85C\uADF8\uC778\uD574 \uC8FC\uC138\uC694:</p>
            <p style="text-align: center;">
              <a href="${process.env.FRONTEND_URL || "http://localhost:5173"}/login" class="button">
                \uB85C\uADF8\uC778\uD558\uAE30
              </a>
            </p>
            
            <p>\uAD81\uAE08\uD55C \uC0AC\uD56D\uC774 \uC788\uC73C\uC2DC\uBA74 \uAD00\uB9AC\uC790\uC5D0\uAC8C \uBB38\uC758\uD574 \uC8FC\uC138\uC694.</p>
            
            <p>\uAC10\uC0AC\uD569\uB2C8\uB2E4.<br>
            <strong>\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C \uD300</strong></p>
          </div>
          <div class="footer">
            <p>\uC774 \uBA54\uC77C\uC740 \uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C\uC5D0\uC11C \uC790\uB3D9\uC73C\uB85C \uBC1C\uC1A1\uB41C \uBA54\uC77C\uC785\uB2C8\uB2E4.</p>
          </div>
        </div>
      </body>
      </html>
    `
  },
  REGISTRATION_REJECTED: {
    subject: "[\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C] \uD68C\uC6D0\uAC00\uC785 \uAC80\uD1A0 \uACB0\uACFC \uC548\uB0B4",
    template: (name, reason) => `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: 'Malgun Gothic', sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #EF4444; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background-color: #f8f9fa; padding: 30px; border-radius: 0 0 8px 8px; }
          .reason-box { background-color: #FEF2F2; border: 1px solid #FECACA; padding: 15px; border-radius: 6px; margin: 15px 0; }
          .button { display: inline-block; background-color: #3B82F6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }
          .footer { margin-top: 20px; text-align: center; color: #666; font-size: 12px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>\u{1F4C4} \uD68C\uC6D0\uAC00\uC785 \uAC80\uD1A0 \uACB0\uACFC</h1>
          </div>
          <div class="content">
            <p><strong>${name}</strong>\uB2D8, \uC548\uB155\uD558\uC138\uC694.</p>
            
            <p>\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C \uD68C\uC6D0\uAC00\uC785 \uC2E0\uCCAD\uC744 \uAC80\uD1A0\uD55C \uACB0\uACFC\uB97C \uC548\uB0B4\uB4DC\uB9BD\uB2C8\uB2E4.</p>
            
            <p>\uC8C4\uC1A1\uD558\uC9C0\uB9CC, \uC774\uBC88 \uD68C\uC6D0\uAC00\uC785 \uC2E0\uCCAD\uC740 <strong style="color: #EF4444;">\uC2B9\uC778\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4</strong>.</p>
            
            ${reason ? `
            <div class="reason-box">
              <strong>\uAC70\uBD80 \uC0AC\uC720:</strong><br>
              ${reason}
            </div>
            ` : ""}
            
            <p>\uCD94\uAC00 \uBB38\uC758\uC0AC\uD56D\uC774 \uC788\uC73C\uC2DC\uAC70\uB098 \uC7AC\uC2E0\uCCAD\uC744 \uC6D0\uD558\uC2DC\uB294 \uACBD\uC6B0, \uAD00\uB9AC\uC790\uC5D0\uAC8C \uC9C1\uC811 \uBB38\uC758\uD574 \uC8FC\uC2DC\uAE30 \uBC14\uB78D\uB2C8\uB2E4.</p>
            
            <p style="text-align: center;">
              <a href="${process.env.FRONTEND_URL || "http://localhost:5173"}/register" class="button">
                \uC7AC\uC2E0\uCCAD\uD558\uAE30
              </a>
            </p>
            
            <p>\uAC10\uC0AC\uD569\uB2C8\uB2E4.<br>
            <strong>\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C \uD300</strong></p>
          </div>
          <div class="footer">
            <p>\uC774 \uBA54\uC77C\uC740 \uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C\uC5D0\uC11C \uC790\uB3D9\uC73C\uB85C \uBC1C\uC1A1\uB41C \uBA54\uC77C\uC785\uB2C8\uB2E4.</p>
          </div>
        </div>
      </body>
      </html>
    `
  },
  PASSWORD_RESET: {
    subject: "[\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C] \uBE44\uBC00\uBC88\uD638 \uC7AC\uC124\uC815 \uC694\uCCAD",
    template: (name, resetLink) => `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: 'Malgun Gothic', sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #F59E0B; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background-color: #f8f9fa; padding: 30px; border-radius: 0 0 8px 8px; }
          .warning-box { background-color: #FEF3CD; border: 1px solid #FBBF24; padding: 15px; border-radius: 6px; margin: 15px 0; }
          .button { display: inline-block; background-color: #EF4444; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }
          .footer { margin-top: 20px; text-align: center; color: #666; font-size: 12px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>\u{1F512} \uBE44\uBC00\uBC88\uD638 \uC7AC\uC124\uC815</h1>
          </div>
          <div class="content">
            <p><strong>${name}</strong>\uB2D8, \uC548\uB155\uD558\uC138\uC694.</p>
            
            <p>\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C \uBE44\uBC00\uBC88\uD638 \uC7AC\uC124\uC815 \uC694\uCCAD\uC744 \uBC1B\uC558\uC2B5\uB2C8\uB2E4.</p>
            
            <div class="warning-box">
              <strong>\u26A0\uFE0F \uBCF4\uC548 \uC548\uB0B4</strong><br>
              \u2022 \uC774 \uB9C1\uD06C\uB294 <strong>1\uC2DC\uAC04</strong> \uB3D9\uC548\uB9CC \uC720\uD6A8\uD569\uB2C8\uB2E4.<br>
              \u2022 \uB9C1\uD06C\uB294 <strong>\uD55C \uBC88\uB9CC</strong> \uC0AC\uC6A9\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.<br>
              \u2022 \uBCF8\uC778\uC774 \uC694\uCCAD\uD558\uC9C0 \uC54A\uC558\uB2E4\uBA74 \uC774 \uBA54\uC77C\uC744 \uBB34\uC2DC\uD574 \uC8FC\uC138\uC694.
            </div>
            
            <p>\uC544\uB798 \uBC84\uD2BC\uC744 \uD074\uB9AD\uD558\uC5EC \uC0C8\uB85C\uC6B4 \uBE44\uBC00\uBC88\uD638\uB97C \uC124\uC815\uD574 \uC8FC\uC138\uC694:</p>
            
            <p style="text-align: center;">
              <a href="${resetLink}" class="button">
                \uBE44\uBC00\uBC88\uD638 \uC7AC\uC124\uC815\uD558\uAE30
              </a>
            </p>
            
            <p>\uB9C1\uD06C\uAC00 \uC791\uB3D9\uD558\uC9C0 \uC54A\uB294 \uACBD\uC6B0, \uB2E4\uC74C URL\uC744 \uBCF5\uC0AC\uD558\uC5EC \uBE0C\uB77C\uC6B0\uC800 \uC8FC\uC18C\uCC3D\uC5D0 \uBD99\uC5EC\uB123\uC5B4 \uC8FC\uC138\uC694:</p>
            <p style="word-break: break-all; background: #f0f0f0; padding: 10px; border-radius: 4px;">
              ${resetLink}
            </p>
            
            <p>\uBE44\uBC00\uBC88\uD638 \uC7AC\uC124\uC815\uC5D0 \uBB38\uC81C\uAC00 \uC788\uC73C\uC2DC\uBA74 \uAD00\uB9AC\uC790\uC5D0\uAC8C \uBB38\uC758\uD574 \uC8FC\uC138\uC694.</p>
            
            <p>\uAC10\uC0AC\uD569\uB2C8\uB2E4.<br>
            <strong>\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C \uD300</strong></p>
          </div>
          <div class="footer">
            <p>\uC774 \uBA54\uC77C\uC740 \uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C\uC5D0\uC11C \uC790\uB3D9\uC73C\uB85C \uBC1C\uC1A1\uB41C \uBA54\uC77C\uC785\uB2C8\uB2E4.</p>
          </div>
        </div>
      </body>
      </html>
    `
  },
  REGISTRATION_RECEIVED: {
    subject: "[\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C] \uD68C\uC6D0\uAC00\uC785 \uC2E0\uCCAD\uC774 \uC811\uC218\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
    template: (name) => `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: 'Malgun Gothic', sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #6366F1; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background-color: #f8f9fa; padding: 30px; border-radius: 0 0 8px 8px; }
          .info-box { background-color: #E0E7FF; border: 1px solid #C7D2FE; padding: 15px; border-radius: 6px; margin: 15px 0; }
          .footer { margin-top: 20px; text-align: center; color: #666; font-size: 12px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>\u{1F4DD} \uD68C\uC6D0\uAC00\uC785 \uC2E0\uCCAD \uC811\uC218</h1>
          </div>
          <div class="content">
            <p><strong>${name}</strong>\uB2D8, \uC548\uB155\uD558\uC138\uC694!</p>
            
            <p>\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C \uD68C\uC6D0\uAC00\uC785 \uC2E0\uCCAD\uC774 <strong style="color: #10B981;">\uC131\uACF5\uC801\uC73C\uB85C \uC811\uC218</strong>\uB418\uC5C8\uC2B5\uB2C8\uB2E4.</p>
            
            <div class="info-box">
              <strong>\u{1F4CB} \uB2E4\uC74C \uB2E8\uACC4 \uC548\uB0B4</strong><br>
              1. \uAD00\uB9AC\uC790\uAC00 \uC2E0\uCCAD \uB0B4\uC6A9\uC744 \uAC80\uD1A0\uD569\uB2C8\uB2E4<br>
              2. \uAC80\uD1A0 \uC644\uB8CC \uD6C4 \uC2B9\uC778/\uAC70\uBD80 \uACB0\uACFC\uB97C \uC774\uBA54\uC77C\uB85C \uC548\uB0B4\uB4DC\uB9BD\uB2C8\uB2E4<br>
              3. \uC2B9\uC778 \uC2DC \uC989\uC2DC \uC11C\uBE44\uC2A4 \uC774\uC6A9\uC774 \uAC00\uB2A5\uD569\uB2C8\uB2E4
            </div>
            
            <p><strong>\uAC80\uD1A0 \uC18C\uC694 \uC2DC\uAC04:</strong> \uC601\uC5C5\uC77C \uAE30\uC900 1-2\uC77C</p>
            
            <p>\uBE60\uB978 \uC2DC\uC77C \uB0B4\uC5D0 \uAC80\uD1A0\uD558\uC5EC \uACB0\uACFC\uB97C \uC548\uB0B4\uB4DC\uB9AC\uACA0\uC2B5\uB2C8\uB2E4.</p>
            
            <p>\uAD81\uAE08\uD55C \uC0AC\uD56D\uC774 \uC788\uC73C\uC2DC\uBA74 \uAD00\uB9AC\uC790\uC5D0\uAC8C \uBB38\uC758\uD574 \uC8FC\uC138\uC694.</p>
            
            <p>\uAC10\uC0AC\uD569\uB2C8\uB2E4.<br>
            <strong>\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C \uD300</strong></p>
          </div>
          <div class="footer">
            <p>\uC774 \uBA54\uC77C\uC740 \uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C\uC5D0\uC11C \uC790\uB3D9\uC73C\uB85C \uBC1C\uC1A1\uB41C \uBA54\uC77C\uC785\uB2C8\uB2E4.</p>
          </div>
        </div>
      </body>
      </html>
    `
  }
};
var AuthEmailService = class extends POEmailService {
  /**
   * 회원가입 접수 알림 이메일 발송
   */
  static async sendRegistrationReceived(registration) {
    try {
      const template = AUTH_EMAIL_TEMPLATES.REGISTRATION_RECEIVED;
      const htmlContent = template.template(registration.name);
      return await this.sendEmail({
        to: registration.email,
        subject: template.subject,
        html: htmlContent
      });
    } catch (error) {
      console.error("Send registration received email error:", error);
      return false;
    }
  }
  /**
   * 회원가입 승인 알림 이메일 발송
   */
  static async sendRegistrationApproved(user) {
    try {
      const template = AUTH_EMAIL_TEMPLATES.REGISTRATION_APPROVED;
      const htmlContent = template.template(user.name);
      return await this.sendEmail({
        to: user.email,
        subject: template.subject,
        html: htmlContent
      });
    } catch (error) {
      console.error("Send registration approved email error:", error);
      return false;
    }
  }
  /**
   * 회원가입 거부 알림 이메일 발송
   */
  static async sendRegistrationRejected(registration, reason) {
    try {
      const template = AUTH_EMAIL_TEMPLATES.REGISTRATION_REJECTED;
      const htmlContent = template.template(registration.name, reason);
      return await this.sendEmail({
        to: registration.email,
        subject: template.subject,
        html: htmlContent
      });
    } catch (error) {
      console.error("Send registration rejected email error:", error);
      return false;
    }
  }
  /**
   * 비밀번호 재설정 링크 이메일 발송
   */
  static async sendPasswordReset(user, resetToken) {
    try {
      const template = AUTH_EMAIL_TEMPLATES.PASSWORD_RESET;
      const resetLink = `${process.env.FRONTEND_URL || "http://localhost:5173"}/reset-password?token=${resetToken}`;
      const htmlContent = template.template(user.name, resetLink);
      return await this.sendEmail({
        to: user.email,
        subject: template.subject,
        html: htmlContent
      });
    } catch (error) {
      console.error("Send password reset email error:", error);
      return false;
    }
  }
  /**
   * 관리자에게 새 회원가입 신청 알림
   */
  static async notifyAdminOfNewRegistration(registration) {
    try {
      const adminEmails = process.env.ADMIN_EMAILS?.split(",") || ["admin@company.com"];
      const subject = `[\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C] \uC0C8 \uD68C\uC6D0\uAC00\uC785 \uC2E0\uCCAD - ${registration.name}`;
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <style>
            body { font-family: 'Malgun Gothic', sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background-color: #1F2937; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
            .content { background-color: #f8f9fa; padding: 30px; border-radius: 0 0 8px 8px; }
            .info-table { width: 100%; border-collapse: collapse; margin: 15px 0; }
            .info-table th, .info-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            .info-table th { background-color: #f0f0f0; }
            .button { display: inline-block; background-color: #3B82F6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>\u{1F514} \uC0C8 \uD68C\uC6D0\uAC00\uC785 \uC2E0\uCCAD</h1>
            </div>
            <div class="content">
              <p>\uAD00\uB9AC\uC790\uB2D8, \uC548\uB155\uD558\uC138\uC694.</p>
              
              <p>\uC0C8\uB85C\uC6B4 \uD68C\uC6D0\uAC00\uC785 \uC2E0\uCCAD\uC774 \uC811\uC218\uB418\uC5C8\uC2B5\uB2C8\uB2E4.</p>
              
              <table class="info-table">
                <tr><th>\uC774\uB984</th><td>${registration.name}</td></tr>
                <tr><th>\uC774\uBA54\uC77C</th><td>${registration.email}</td></tr>
                <tr><th>\uC804\uD654\uBC88\uD638</th><td>${registration.phoneNumber || "\uBBF8\uC785\uB825"}</td></tr>
                <tr><th>\uC694\uCCAD \uAD8C\uD55C</th><td>${registration.requestedRole}</td></tr>
                <tr><th>\uC2E0\uCCAD\uC77C\uC2DC</th><td>${registration.appliedAt.toLocaleString("ko-KR")}</td></tr>
              </table>
              
              <p>\uAD00\uB9AC\uC790 \uD398\uC774\uC9C0\uC5D0\uC11C \uC2E0\uCCAD\uC744 \uAC80\uD1A0\uD558\uACE0 \uC2B9\uC778/\uAC70\uBD80\uB97C \uACB0\uC815\uD574 \uC8FC\uC138\uC694.</p>
              
              <p style="text-align: center;">
                <a href="${process.env.FRONTEND_URL || "http://localhost:5173"}/admin" class="button">
                  \uAD00\uB9AC\uC790 \uD398\uC774\uC9C0\uB85C \uC774\uB3D9
                </a>
              </p>
              
              <p><strong>\uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C</strong></p>
            </div>
          </div>
        </body>
        </html>
      `;
      let allSent = true;
      for (const adminEmail of adminEmails) {
        const sent = await this.sendEmail({
          to: adminEmail.trim(),
          subject,
          html: htmlContent
        });
        if (!sent) allSent = false;
      }
      return allSent;
    } catch (error) {
      console.error("Notify admin of new registration error:", error);
      return false;
    }
  }
};

// server/routes/auth.ts
import { z as z3 } from "zod";

// server/middleware/security.ts
import { z as z2 } from "zod";
var RateLimitStore = class {
  constructor() {
    this.store = /* @__PURE__ */ new Map();
    this.cleanupInterval = setInterval(() => {
      const now = Date.now();
      for (const [key, value] of this.store.entries()) {
        if (now > value.resetTime) {
          this.store.delete(key);
        }
      }
    }, 5 * 60 * 1e3);
  }
  increment(key, windowMs) {
    const now = Date.now();
    const existing = this.store.get(key);
    if (!existing || now > existing.resetTime) {
      const entry = { count: 1, resetTime: now + windowMs };
      this.store.set(key, entry);
      return entry;
    }
    existing.count++;
    return existing;
  }
  cleanup() {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
    }
  }
};
var rateLimitStore = new RateLimitStore();
function createRateLimit(options) {
  const {
    windowMs,
    maxRequests,
    message = "Too many requests, please try again later.",
    keyGenerator = (req) => req.ip || "unknown"
  } = options;
  return (req, res, next) => {
    try {
      const key = keyGenerator(req);
      const { count: count5, resetTime } = rateLimitStore.increment(key, windowMs);
      res.setHeader("X-RateLimit-Limit", maxRequests.toString());
      res.setHeader("X-RateLimit-Remaining", Math.max(0, maxRequests - count5).toString());
      res.setHeader("X-RateLimit-Reset", Math.ceil(resetTime / 1e3).toString());
      if (count5 > maxRequests) {
        return res.status(429).json({
          error: "Too Many Requests",
          message,
          retryAfter: Math.ceil((resetTime - Date.now()) / 1e3)
        });
      }
      next();
    } catch (error) {
      console.error("Rate limiting error:", error);
      next();
    }
  };
}
var authRateLimit = createRateLimit({
  windowMs: 15 * 60 * 1e3,
  // 15 minutes
  maxRequests: 5,
  // 5 attempts per 15 minutes
  message: "Too many authentication attempts. Please try again in 15 minutes.",
  keyGenerator: (req) => {
    const identifier = req.body?.email || req.body?.username || req.body?.userId || "";
    return `auth:${req.ip}:${identifier}`;
  }
});
var registrationRateLimit = createRateLimit({
  windowMs: 60 * 60 * 1e3,
  // 1 hour
  maxRequests: 3,
  // 3 registrations per hour per IP
  message: "Too many registration attempts. Please try again in 1 hour."
});
var passwordResetRateLimit = createRateLimit({
  windowMs: 60 * 60 * 1e3,
  // 1 hour
  maxRequests: 3,
  // 3 password reset requests per hour
  message: "Too many password reset attempts. Please try again in 1 hour.",
  keyGenerator: (req) => `password-reset:${req.ip}:${req.body?.email || ""}`
});
var generalRateLimit = createRateLimit({
  windowMs: 15 * 60 * 1e3,
  // 15 minutes
  maxRequests: 1e3,
  // 1000 requests per 15 minutes
  message: "API rate limit exceeded. Please slow down your requests."
});
function securityHeaders(req, res, next) {
  res.setHeader("X-Content-Type-Options", "nosniff");
  res.setHeader("X-Frame-Options", "DENY");
  res.setHeader("X-XSS-Protection", "1; mode=block");
  res.setHeader("Referrer-Policy", "strict-origin-when-cross-origin");
  res.setHeader("Permissions-Policy", "geolocation=(), microphone=(), camera=()");
  res.setHeader(
    "Content-Security-Policy",
    "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; font-src 'self' data:; connect-src 'self';"
  );
  next();
}
function sanitizeInput(req, res, next) {
  try {
    if (req.body && typeof req.body === "object") {
      sanitizeObject(req.body);
    }
    if (req.query && typeof req.query === "object") {
      sanitizeObject(req.query);
    }
    next();
  } catch (error) {
    console.error("Input sanitization error:", error);
    res.status(400).json({
      error: "Invalid input",
      message: "Request contains invalid characters"
    });
  }
}
function sanitizeObject(obj) {
  for (const key in obj) {
    if (typeof obj[key] === "string") {
      obj[key] = obj[key].replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "").replace(/javascript:/gi, "").replace(/on\w+=/gi, "").trim();
    } else if (typeof obj[key] === "object" && obj[key] !== null) {
      sanitizeObject(obj[key]);
    }
  }
}
var secureValidationSchemas = {
  // User ID validation
  userId: z2.string().min(1, "\uC0AC\uC6A9\uC790 ID\uB294 \uD544\uC218\uC785\uB2C8\uB2E4").max(50, "\uC0AC\uC6A9\uC790 ID\uB294 50\uC790\uB97C \uCD08\uACFC\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4").regex(/^[a-zA-Z0-9._-]+$/, "\uC0AC\uC6A9\uC790 ID\uB294 \uC601\uBB38\uC790, \uC22B\uC790, '.', '_', '-'\uB9CC \uD3EC\uD568\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4"),
  // Email validation
  email: z2.string().email("\uC62C\uBC14\uB978 \uC774\uBA54\uC77C \uD615\uC2DD\uC774 \uC544\uB2D9\uB2C8\uB2E4").max(254, "\uC774\uBA54\uC77C\uC774 \uB108\uBB34 \uAE41\uB2C8\uB2E4").toLowerCase().refine((email) => {
    const dangerousPatterns = [
      /[<>]/,
      // HTML brackets
      /javascript:/i,
      // JavaScript protocol
      /data:/i
      // Data protocol
    ];
    return !dangerousPatterns.some((pattern) => pattern.test(email));
  }, "\uC774\uBA54\uC77C\uC5D0 \uD5C8\uC6A9\uB418\uC9C0 \uC54A\uC740 \uBB38\uC790\uAC00 \uD3EC\uD568\uB418\uC5B4 \uC788\uC2B5\uB2C8\uB2E4"),
  // Strong password validation
  password: z2.string().min(8, "\uBE44\uBC00\uBC88\uD638\uB294 \uCD5C\uC18C 8\uC790 \uC774\uC0C1\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4").max(128, "\uBE44\uBC00\uBC88\uD638\uAC00 \uB108\uBB34 \uAE41\uB2C8\uB2E4").regex(
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/,
    "\uBE44\uBC00\uBC88\uD638\uB294 \uB300\uBB38\uC790, \uC18C\uBB38\uC790, \uC22B\uC790\uB97C \uAC01\uAC01 \uCD5C\uC18C 1\uAC1C\uC529 \uD3EC\uD568\uD574\uC57C \uD569\uB2C8\uB2E4"
  ).refine((password) => {
    const weakPasswords = ["password", "12345678", "qwerty123", "admin123"];
    return !weakPasswords.includes(password.toLowerCase());
  }, "\uB108\uBB34 \uAC04\uB2E8\uD55C \uBE44\uBC00\uBC88\uD638\uC785\uB2C8\uB2E4"),
  // Name validation
  name: z2.string().min(2, "\uC774\uB984\uC740 \uCD5C\uC18C 2\uAE00\uC790 \uC774\uC0C1\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4").max(50, "\uC774\uB984\uC740 50\uAE00\uC790\uB97C \uCD08\uACFC\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4").regex(/^[가-힣a-zA-Z\s.-]+$/, "\uC774\uB984\uC5D0\uB294 \uD55C\uAE00, \uC601\uBB38, \uACF5\uBC31, '.', '-'\uB9CC \uD3EC\uD568\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4"),
  // Phone number validation (Korean format)
  phoneNumber: z2.string().regex(/^01[0-9]-?[0-9]{3,4}-?[0-9]{4}$/, "\uC62C\uBC14\uB978 \uD734\uB300\uD3F0 \uBC88\uD638 \uD615\uC2DD\uC774 \uC544\uB2D9\uB2C8\uB2E4").transform((phone) => phone.replace(/-/g, "")),
  // Remove hyphens
  // Generic text validation
  safeText: (minLength = 1, maxLength = 1e3) => z2.string().min(minLength, `\uCD5C\uC18C ${minLength}\uAE00\uC790 \uC774\uC0C1\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4`).max(maxLength, `\uCD5C\uB300 ${maxLength}\uAE00\uC790\uB97C \uCD08\uACFC\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4`).refine((text2) => {
    const dangerousPatterns = [
      /<script/i,
      // Script tags
      /javascript:/i,
      // JavaScript protocol
      /on\w+=/i,
      // Event handlers
      /data:/i
      // Data protocol
    ];
    return !dangerousPatterns.some((pattern) => pattern.test(text2));
  }, "\uD5C8\uC6A9\uB418\uC9C0 \uC54A\uC740 \uBB38\uC790\uB098 \uD328\uD134\uC774 \uD3EC\uD568\uB418\uC5B4 \uC788\uC2B5\uB2C8\uB2E4")
};
function logSecurityEvent(event, details, req, severity = "medium") {
  const logEntry = {
    timestamp: (/* @__PURE__ */ new Date()).toISOString(),
    event,
    severity,
    ip: req.ip,
    userAgent: req.get("User-Agent"),
    userId: req.user?.id || "anonymous",
    details,
    path: req.path,
    method: req.method
  };
  console.log(`[SECURITY ${severity.toUpperCase()}]`, JSON.stringify(logEntry));
  if (severity === "high" && process.env.NODE_ENV === "production") {
  }
}

// server/routes/auth.ts
var router = Router();
router.use(securityHeaders);
router.use(sanitizeInput);
router.get("/auth/debug", (req, res) => {
  res.json({
    message: "Auth routes are working",
    timestamp: (/* @__PURE__ */ new Date()).toISOString(),
    environment: process.env.NODE_ENV || "unknown"
  });
});
router.get("/test/ping", (req, res) => {
  res.json({
    message: "Server is alive",
    timestamp: (/* @__PURE__ */ new Date()).toISOString(),
    environment: process.env.NODE_ENV || "unknown",
    vercel: process.env.VERCEL || "false",
    origin: req.get("Origin") || "none"
  });
});
router.get("/auth/debug-prod", (req, res) => {
  try {
    const authSession = req.session;
    console.log("\u{1F50D} Production auth debug:", {
      sessionExists: !!req.session,
      sessionId: req.sessionID,
      sessionUserId: authSession?.userId,
      cookies: req.headers.cookie,
      origin: req.get("Origin"),
      userAgent: req.get("User-Agent"),
      secure: req.secure,
      protocol: req.protocol,
      host: req.get("host")
    });
    res.json({
      environment: process.env.NODE_ENV,
      sessionExists: !!req.session,
      sessionId: req.sessionID || null,
      sessionUserId: authSession?.userId || null,
      hasSessionCookie: req.headers.cookie?.includes("connect.sid") || false,
      cookieHeader: req.headers.cookie || null,
      origin: req.get("Origin") || null,
      secure: req.secure,
      protocol: req.protocol,
      host: req.get("host"),
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    });
  } catch (error) {
    console.error("Production auth debug error:", error);
    res.status(500).json({
      error: "Debug failed",
      message: error?.message || "Unknown error"
    });
  }
});
router.post("/auth/login-simple", (req, res) => {
  try {
    const { username, password, email } = req.body;
    const identifier = username || email;
    console.log("\u{1F510} Simple login attempt for:", identifier);
    const users3 = [
      { id: "admin", username: "admin", email: "admin@company.com", password: "admin123", name: "\uAD00\uB9AC\uC790", role: "admin" },
      { id: "manager", username: "manager", email: "manager@company.com", password: "manager123", name: "\uAE40\uBD80\uC7A5", role: "project_manager" },
      { id: "user", username: "user", email: "user@company.com", password: "user123", name: "\uC774\uAE30\uC0AC", role: "field_worker" }
    ];
    const user = users3.find((u) => u.username === identifier || u.email === identifier);
    if (!user || user.password !== password) {
      return res.status(401).json({ message: "Invalid credentials" });
    }
    const { password: _, ...userWithoutPassword } = user;
    res.json({
      message: "Login successful (simple mode)",
      user: userWithoutPassword
    });
  } catch (error) {
    console.error("Simple login error:", error);
    res.status(500).json({ message: "Login failed", error: error.message });
  }
});
router.post("/auth/login-test", (req, res) => {
  try {
    const { username, password, email } = req.body;
    const identifier = username || email;
    console.log("\u{1F510} Test login attempt for:", identifier);
    const users3 = [
      { id: "admin", username: "admin", email: "admin@company.com", password: "admin123", name: "\uAD00\uB9AC\uC790", role: "admin" },
      { id: "manager", username: "manager", email: "manager@company.com", password: "manager123", name: "\uAE40\uBD80\uC7A5", role: "project_manager" },
      { id: "user", username: "user", email: "user@company.com", password: "user123", name: "\uC774\uAE30\uC0AC", role: "field_worker" }
    ];
    const user = users3.find((u) => u.username === identifier || u.email === identifier);
    if (!user || user.password !== password) {
      return res.status(401).json({ message: "Invalid credentials" });
    }
    const { password: _, ...userWithoutPassword } = user;
    res.json({
      message: "Login successful (test mode)",
      user: userWithoutPassword
    });
  } catch (error) {
    console.error("Test login error:", error);
    res.status(500).json({ message: "Login failed", error: error.message });
  }
});
router.post("/auth/login", authRateLimit, login);
router.post("/auth/logout", logout);
router.patch("/auth/profile", requireAuth, async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Authentication required" });
    }
    const { name } = req.body;
    if (!name) {
      return res.status(400).json({ message: "Name is required" });
    }
    const updatedUser = await storage.updateUser(userId, { name });
    const { password: _, ...userWithoutPassword } = updatedUser;
    res.json(userWithoutPassword);
  } catch (error) {
    console.error("Profile update error:", error);
    res.status(500).json({ message: "Failed to update profile" });
  }
});
router.patch("/auth/change-password", requireAuth, async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Authentication required" });
    }
    const { currentPassword, newPassword } = req.body;
    if (!currentPassword || !newPassword) {
      return res.status(400).json({ message: "Current and new passwords are required" });
    }
    const user = await storage.getUser(userId);
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }
    const bcrypt5 = await import("bcrypt");
    const isValidPassword = await bcrypt5.compare(currentPassword, user.password);
    if (!isValidPassword) {
      return res.status(401).json({ message: "Current password is incorrect" });
    }
    const hashedPassword = await bcrypt5.hash(newPassword, 10);
    await storage.updateUser(userId, { password: hashedPassword });
    res.json({ message: "Password changed successfully" });
  } catch (error) {
    console.error("Password change error:", error);
    res.status(500).json({ message: "Failed to change password" });
  }
});
router.get("/logout", (req, res) => {
  if (req.session) {
    req.session.destroy(() => {
      res.clearCookie("connect.sid");
      res.json({ message: "Logout successful" });
    });
  } else {
    res.json({ message: "Logout successful" });
  }
});
router.post("/auth/force-logout", (req, res) => {
  try {
    console.log("\u{1F534} Force logout request - clearing all authentication state");
    try {
      if (req.session) {
        req.session.userId = void 0;
        req.session.user = void 0;
        req.session.destroy((err) => {
          if (err) {
            console.log("\u26A0\uFE0F Force session destroy failed (non-fatal):", err);
          } else {
            console.log("\u2705 Session completely destroyed in force logout");
          }
        });
      }
    } catch (sessionErr) {
      console.log("\u26A0\uFE0F Session clearing failed (non-fatal):", sessionErr);
    }
    res.clearCookie("connect.sid");
    res.clearCookie("sessionId");
    console.log("\u2705 Force logout completed - all authentication state cleared");
    res.json({
      message: "Force logout successful - all authentication state cleared",
      success: true,
      cleared: {
        session: true,
        cookies: true
      }
    });
  } catch (error) {
    console.error("Force logout error:", error);
    res.status(500).json({
      message: "Force logout failed",
      error: error?.message || "Unknown error",
      success: false
    });
  }
});
router.get("/auth/status", (req, res) => {
  try {
    console.log("\u{1F50D} Authentication status check");
    const authSession = req.session;
    const status = {
      sessionExists: !!req.session,
      sessionId: req.sessionID || null,
      sessionUserId: authSession?.userId || null,
      sessionUser: authSession?.user ? {
        id: authSession.user.id,
        name: authSession.user.name,
        role: authSession.user.role
      } : null,
      cookies: req.headers.cookie ? req.headers.cookie.split("; ").length : 0,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log("\u{1F4CA} Current auth status:", status);
    res.json(status);
  } catch (error) {
    console.error("Status check error:", error);
    res.status(500).json({
      message: "Status check failed",
      error: error?.message || "Unknown error"
    });
  }
});
router.get("/auth/user", getCurrentUser);
router.get("/auth/me", (req, res) => {
  try {
    console.log("\u{1F464} Get me request - LEGACY ENDPOINT");
    console.log("\u{1F6AB} Legacy /auth/me endpoint called - returning null to stop polling");
    res.status(401).json({
      message: "Legacy endpoint - please use /api/auth/user",
      user: null,
      deprecated: true,
      useInstead: "/api/auth/user"
    });
  } catch (error) {
    console.error("Get me error:", error);
    res.status(500).json({ message: "Failed to get user data" });
  }
});
router.get("/auth/permissions/:userId", async (req, res) => {
  try {
    const userId = req.params.userId;
    let user = await storage.getUser(userId);
    if (!user && userId === "dev_admin") {
      user = {
        id: "dev_admin",
        email: "admin@company.com",
        name: "Dev Administrator",
        role: "admin",
        phoneNumber: null,
        profileImageUrl: null,
        position: null,
        isActive: true,
        createdAt: /* @__PURE__ */ new Date(),
        updatedAt: /* @__PURE__ */ new Date()
      };
    }
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }
    const permissions = {
      userId: user.id,
      role: user.role,
      permissions: {
        canCreateOrder: true,
        canApproveOrder: ["project_manager", "hq_management", "executive", "admin"].includes(user.role),
        canManageUsers: ["admin"].includes(user.role),
        canManageProjects: ["project_manager", "hq_management", "admin"].includes(user.role),
        canViewReports: ["hq_management", "executive", "admin"].includes(user.role),
        canManageSettings: ["admin"].includes(user.role)
      }
    };
    res.json(permissions);
  } catch (error) {
    console.error("Error fetching permissions:", error);
    res.status(500).json({ message: "Failed to fetch permissions" });
  }
});
router.get("/users", requireAuth, requireAdmin, async (req, res) => {
  try {
    const users3 = await storage.getUsers();
    res.json(users3);
  } catch (error) {
    console.error("Error fetching users:", error);
    res.status(500).json({ message: "Failed to fetch users" });
  }
});
router.post("/users", requireAuth, requireAdmin, async (req, res) => {
  try {
    const { email, name, phoneNumber, role } = req.body;
    const newUser = await storage.upsertUser({
      email,
      name,
      phoneNumber,
      role: role || "user",
      password: "temp123"
      // Temporary password - should be changed by user
    });
    res.status(201).json(newUser);
  } catch (error) {
    console.error("Error creating user:", error);
    res.status(500).json({ message: "Failed to create user" });
  }
});
router.patch("/users/:id", async (req, res) => {
  try {
    const id = req.params.id;
    const updates = req.body;
    const currentUser = await storage.getUser(id);
    if (!currentUser) {
      return res.status(404).json({ message: "User not found" });
    }
    const updatedUser = await storage.updateUser(id, updates);
    res.json(updatedUser);
  } catch (error) {
    console.error("Error updating user:", error);
    res.status(500).json({ message: "Failed to update user" });
  }
});
router.put("/users/:id", async (req, res) => {
  try {
    const id = req.params.id;
    const updates = req.body;
    const currentUser = await storage.getUser(id);
    if (!currentUser) {
      return res.status(404).json({ message: "User not found" });
    }
    const updatedUser = await storage.updateUser(id, updates);
    res.json(updatedUser);
  } catch (error) {
    console.error("Error updating user:", error);
    res.status(500).json({ message: "Failed to update user" });
  }
});
router.delete("/users/:id", async (req, res) => {
  try {
    const id = req.params.id;
    const userOrders = await storage.getOrdersByUserId(id);
    if (userOrders && userOrders.length > 0) {
      return res.status(400).json({
        message: "Cannot delete user with existing orders",
        reason: "data_integrity",
        details: "User has purchase orders that must preserve creator information"
      });
    }
    await storage.deleteUser(id);
    res.json({ message: "User deleted successfully" });
  } catch (error) {
    console.error("Error deleting user:", error);
    res.status(500).json({ message: "Failed to delete user" });
  }
});
router.patch("/users/:id/toggle-active", async (req, res) => {
  try {
    const id = req.params.id;
    const { isActive } = req.body;
    const updatedUser = await storage.updateUser(id, { isActive });
    res.json(updatedUser);
  } catch (error) {
    console.error("Error toggling user active status:", error);
    res.status(500).json({ message: "Failed to toggle user active status" });
  }
});
var registrationSchema = z3.object({
  email: secureValidationSchemas.email,
  name: secureValidationSchemas.name,
  phoneNumber: secureValidationSchemas.phoneNumber.optional().or(z3.literal("")),
  password: secureValidationSchemas.password,
  requestedRole: z3.enum(["field_worker", "project_manager", "hq_management", "executive"]).optional()
});
router.post("/auth/register", registrationRateLimit, async (req, res) => {
  try {
    logSecurityEvent("REGISTRATION_ATTEMPT", { email: req.body.email }, req, "low");
    const validationResult = registrationSchema.safeParse(req.body);
    if (!validationResult.success) {
      logSecurityEvent("REGISTRATION_VALIDATION_FAILED", {
        email: req.body.email,
        errors: validationResult.error.issues
      }, req, "medium");
      return res.status(400).json({
        message: "\uC785\uB825 \uB370\uC774\uD130\uAC00 \uC720\uD6A8\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4",
        errors: validationResult.error.issues.map((issue) => ({
          field: issue.path.join("."),
          message: issue.message
        }))
      });
    }
    const { email, name, phoneNumber, password, requestedRole } = validationResult.data;
    const registration = await UserRegistrationService.submitRegistration({
      email,
      name,
      phoneNumber: phoneNumber || void 0,
      password,
      requestedRole
    });
    await AuthEmailService.sendRegistrationReceived(registration);
    await AuthEmailService.notifyAdminOfNewRegistration(registration);
    try {
      await logAuditEvent({
        eventType: "data_create",
        eventCategory: "auth",
        entityType: "user_registration",
        entityId: registration.id.toString(),
        action: "registration_submitted",
        additionalDetails: {
          email: registration.email,
          name: registration.name,
          requestedRole: registration.requestedRole
        },
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
        requestMethod: req.method,
        requestPath: req.path
      });
    } catch (auditError) {
      console.error("Audit logging failed:", auditError);
    }
    logSecurityEvent("REGISTRATION_SUCCESS", {
      email: registration.email,
      registrationId: registration.id
    }, req, "low");
    res.status(201).json({
      message: "\uD68C\uC6D0\uAC00\uC785 \uC2E0\uCCAD\uC774 \uC131\uACF5\uC801\uC73C\uB85C \uC811\uC218\uB418\uC5C8\uC2B5\uB2C8\uB2E4. \uAD00\uB9AC\uC790 \uC2B9\uC778 \uD6C4 \uC774\uBA54\uC77C\uB85C \uACB0\uACFC\uB97C \uC548\uB0B4\uB4DC\uB9BD\uB2C8\uB2E4.",
      registrationId: registration.id
    });
  } catch (error) {
    console.error("Registration error:", error);
    logSecurityEvent("REGISTRATION_ERROR", {
      email: req.body.email,
      error: error.message
    }, req, "high");
    try {
      await logAuditEvent({
        eventType: "error",
        eventCategory: "auth",
        entityType: "user_registration",
        action: "registration_failed",
        errorMessage: error.message,
        additionalDetails: {
          email: req.body.email,
          name: req.body.name
        },
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
        requestMethod: req.method,
        requestPath: req.path
      });
    } catch (auditError) {
      console.error("Audit logging failed:", auditError);
    }
    res.status(400).json({
      message: error.message || "\uD68C\uC6D0\uAC00\uC785 \uCC98\uB9AC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
router.get("/admin/pending-registrations", requireAuth, requireAdmin, async (req, res) => {
  try {
    const registrations = await UserRegistrationService.getPendingRegistrations();
    res.json(registrations);
  } catch (error) {
    console.error("Get pending registrations error:", error);
    res.status(500).json({ message: "\uAC00\uC785 \uC2E0\uCCAD \uBAA9\uB85D\uC744 \uAC00\uC838\uC624\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4" });
  }
});
router.get("/admin/registrations", requireAuth, requireAdmin, async (req, res) => {
  try {
    const registrations = await UserRegistrationService.getAllRegistrations();
    res.json(registrations);
  } catch (error) {
    console.error("Get all registrations error:", error);
    res.status(500).json({ message: "\uAC00\uC785 \uC2E0\uCCAD \uBAA9\uB85D\uC744 \uAC00\uC838\uC624\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4" });
  }
});
router.post("/admin/approve-registration/:id", requireAuth, requireAdmin, async (req, res) => {
  try {
    const registrationId = parseInt(req.params.id);
    const adminId = req.user?.id;
    if (!adminId) {
      return res.status(401).json({ message: "\uC778\uC99D\uC774 \uD544\uC694\uD569\uB2C8\uB2E4" });
    }
    if (isNaN(registrationId)) {
      return res.status(400).json({ message: "\uC720\uD6A8\uD558\uC9C0 \uC54A\uC740 \uAC00\uC785 \uC2E0\uCCAD ID\uC785\uB2C8\uB2E4" });
    }
    const result = await UserRegistrationService.approveRegistration(registrationId, adminId);
    await AuthEmailService.sendRegistrationApproved(result.user);
    try {
      await logAuditEvent({
        userId: adminId,
        eventType: "approval_grant",
        eventCategory: "auth",
        entityType: "user_registration",
        entityId: registrationId.toString(),
        action: "registration_approved",
        additionalDetails: {
          approvedUserId: result.user.id,
          approvedUserEmail: result.user.email,
          approvedUserName: result.user.name,
          approvedUserRole: result.user.role
        },
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
        requestMethod: req.method,
        requestPath: req.path
      });
    } catch (auditError) {
      console.error("Audit logging failed:", auditError);
    }
    res.json({
      message: "\uAC00\uC785 \uC2E0\uCCAD\uC774 \uC2B9\uC778\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
      user: result.user,
      registration: result.registration
    });
  } catch (error) {
    console.error("Approve registration error:", error);
    res.status(400).json({ message: error.message || "\uAC00\uC785 \uC2B9\uC778 \uCC98\uB9AC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4" });
  }
});
router.post("/admin/reject-registration/:id", requireAuth, requireAdmin, async (req, res) => {
  try {
    const registrationId = parseInt(req.params.id);
    const adminId = req.user?.id;
    const { reason } = req.body;
    if (!adminId) {
      return res.status(401).json({ message: "\uC778\uC99D\uC774 \uD544\uC694\uD569\uB2C8\uB2E4" });
    }
    if (isNaN(registrationId)) {
      return res.status(400).json({ message: "\uC720\uD6A8\uD558\uC9C0 \uC54A\uC740 \uAC00\uC785 \uC2E0\uCCAD ID\uC785\uB2C8\uB2E4" });
    }
    const registration = await UserRegistrationService.rejectRegistration(
      registrationId,
      adminId,
      reason
    );
    await AuthEmailService.sendRegistrationRejected(registration, reason);
    try {
      await logAuditEvent({
        userId: adminId,
        eventType: "approval_reject",
        eventCategory: "auth",
        entityType: "user_registration",
        entityId: registrationId.toString(),
        action: "registration_rejected",
        additionalDetails: {
          rejectedUserEmail: registration.email,
          rejectedUserName: registration.name,
          rejectionReason: reason
        },
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
        requestMethod: req.method,
        requestPath: req.path
      });
    } catch (auditError) {
      console.error("Audit logging failed:", auditError);
    }
    res.json({
      message: "\uAC00\uC785 \uC2E0\uCCAD\uC774 \uAC70\uBD80\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
      registration
    });
  } catch (error) {
    console.error("Reject registration error:", error);
    res.status(400).json({ message: error.message || "\uAC00\uC785 \uAC70\uBD80 \uCC98\uB9AC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4" });
  }
});
router.delete("/admin/registration/:id", requireAuth, requireAdmin, async (req, res) => {
  try {
    const registrationId = parseInt(req.params.id);
    const adminId = req.user?.id;
    if (!adminId) {
      return res.status(401).json({ message: "\uC778\uC99D\uC774 \uD544\uC694\uD569\uB2C8\uB2E4" });
    }
    if (isNaN(registrationId)) {
      return res.status(400).json({ message: "\uC720\uD6A8\uD558\uC9C0 \uC54A\uC740 \uAC00\uC785 \uC2E0\uCCAD ID\uC785\uB2C8\uB2E4" });
    }
    const deleted = await UserRegistrationService.deleteRegistration(registrationId);
    if (!deleted) {
      return res.status(404).json({ message: "\uAC00\uC785 \uC2E0\uCCAD\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4" });
    }
    try {
      await logAuditEvent({
        userId: adminId,
        eventType: "data_delete",
        eventCategory: "auth",
        entityType: "user_registration",
        entityId: registrationId.toString(),
        action: "registration_deleted",
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
        requestMethod: req.method,
        requestPath: req.path
      });
    } catch (auditError) {
      console.error("Audit logging failed:", auditError);
    }
    res.json({ message: "\uAC00\uC785 \uC2E0\uCCAD\uC774 \uC0AD\uC81C\uB418\uC5C8\uC2B5\uB2C8\uB2E4" });
  } catch (error) {
    console.error("Delete registration error:", error);
    res.status(400).json({ message: error.message || "\uAC00\uC785 \uC2E0\uCCAD \uC0AD\uC81C \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4" });
  }
});
var forgotPasswordSchema = z3.object({
  email: z3.string().email("\uC720\uD6A8\uD55C \uC774\uBA54\uC77C \uC8FC\uC18C\uB97C \uC785\uB825\uD574\uC8FC\uC138\uC694")
});
var resetPasswordSchema = z3.object({
  token: z3.string().min(1, "\uD1A0\uD070\uC774 \uD544\uC694\uD569\uB2C8\uB2E4"),
  newPassword: z3.string().min(8, "\uBE44\uBC00\uBC88\uD638\uB294 8\uAE00\uC790 \uC774\uC0C1\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4").max(128, "\uBE44\uBC00\uBC88\uD638\uB294 128\uAE00\uC790\uB97C \uCD08\uACFC\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4").regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, "\uBE44\uBC00\uBC88\uD638\uB294 \uB300\uBB38\uC790, \uC18C\uBB38\uC790, \uC22B\uC790\uB97C \uD3EC\uD568\uD574\uC57C \uD569\uB2C8\uB2E4")
});
router.post("/auth/forgot-password", passwordResetRateLimit, async (req, res) => {
  try {
    const validationResult = forgotPasswordSchema.safeParse(req.body);
    if (!validationResult.success) {
      return res.status(400).json({
        message: "\uC720\uD6A8\uD55C \uC774\uBA54\uC77C \uC8FC\uC18C\uB97C \uC785\uB825\uD574\uC8FC\uC138\uC694",
        errors: validationResult.error.issues.map((issue) => ({
          field: issue.path.join("."),
          message: issue.message
        }))
      });
    }
    const { email } = validationResult.data;
    try {
      const { token, user } = await PasswordResetService.requestPasswordReset(email);
      const emailSent = await AuthEmailService.sendPasswordReset(user, token);
      if (!emailSent) {
        console.error("Failed to send password reset email");
      }
      try {
        await logAuditEvent({
          userId: user.id,
          eventType: "password_change",
          eventCategory: "auth",
          entityType: "password_reset_token",
          action: "password_reset_requested",
          additionalDetails: {
            email: user.email,
            emailSent
          },
          ipAddress: req.ip,
          userAgent: req.get("User-Agent"),
          requestMethod: req.method,
          requestPath: req.path
        });
      } catch (auditError) {
        console.error("Audit logging failed:", auditError);
      }
      res.json({
        message: "\uBE44\uBC00\uBC88\uD638 \uC7AC\uC124\uC815 \uB9C1\uD06C\uB97C \uC774\uBA54\uC77C\uB85C \uBC1C\uC1A1\uD588\uC2B5\uB2C8\uB2E4. \uC774\uBA54\uC77C\uC744 \uD655\uC778\uD574 \uC8FC\uC138\uC694."
      });
    } catch (error) {
      console.error("Password reset request error:", error);
      try {
        await logAuditEvent({
          eventType: "error",
          eventCategory: "auth",
          action: "password_reset_request_failed",
          errorMessage: error.message,
          additionalDetails: {
            email,
            failureReason: error.message
          },
          ipAddress: req.ip,
          userAgent: req.get("User-Agent"),
          requestMethod: req.method,
          requestPath: req.path
        });
      } catch (auditError) {
        console.error("Audit logging failed:", auditError);
      }
      res.json({
        message: "\uBE44\uBC00\uBC88\uD638 \uC7AC\uC124\uC815 \uB9C1\uD06C\uB97C \uC774\uBA54\uC77C\uB85C \uBC1C\uC1A1\uD588\uC2B5\uB2C8\uB2E4. \uC774\uBA54\uC77C\uC744 \uD655\uC778\uD574 \uC8FC\uC138\uC694."
      });
    }
  } catch (error) {
    console.error("Forgot password error:", error);
    res.status(500).json({ message: "\uCC98\uB9AC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4" });
  }
});
router.get("/auth/verify-reset-token/:token", async (req, res) => {
  try {
    const token = req.params.token;
    if (!token) {
      return res.status(400).json({
        valid: false,
        message: "\uD1A0\uD070\uC774 \uD544\uC694\uD569\uB2C8\uB2E4"
      });
    }
    const verification = await PasswordResetService.verifyResetToken(token);
    if (!verification.isValid) {
      return res.status(400).json({
        valid: false,
        message: verification.errorMessage || "\uC720\uD6A8\uD558\uC9C0 \uC54A\uC740 \uD1A0\uD070\uC785\uB2C8\uB2E4"
      });
    }
    try {
      await logAuditEvent({
        userId: verification.user?.id,
        eventType: "password_change",
        eventCategory: "auth",
        entityType: "password_reset_token",
        action: "reset_token_verified",
        additionalDetails: {
          tokenValid: verification.isValid,
          userEmail: verification.user?.email
        },
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
        requestMethod: req.method,
        requestPath: req.path
      });
    } catch (auditError) {
      console.error("Audit logging failed:", auditError);
    }
    res.json({
      valid: true,
      message: "\uC720\uD6A8\uD55C \uD1A0\uD070\uC785\uB2C8\uB2E4",
      user: {
        id: verification.user?.id,
        email: verification.user?.email,
        name: verification.user?.name
      }
    });
  } catch (error) {
    console.error("Verify reset token error:", error);
    res.status(500).json({
      valid: false,
      message: "\uD1A0\uD070 \uAC80\uC99D \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
router.post("/auth/reset-password", async (req, res) => {
  try {
    const validationResult = resetPasswordSchema.safeParse(req.body);
    if (!validationResult.success) {
      return res.status(400).json({
        message: "\uC785\uB825 \uB370\uC774\uD130\uAC00 \uC720\uD6A8\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4",
        errors: validationResult.error.issues.map((issue) => ({
          field: issue.path.join("."),
          message: issue.message
        }))
      });
    }
    const { token, newPassword } = validationResult.data;
    const verification = await PasswordResetService.verifyResetToken(token);
    if (!verification.isValid || !verification.user) {
      return res.status(400).json({
        success: false,
        message: verification.errorMessage || "\uC720\uD6A8\uD558\uC9C0 \uC54A\uC740 \uD1A0\uD070\uC785\uB2C8\uB2E4"
      });
    }
    const result = await PasswordResetService.resetPassword(token, newPassword);
    try {
      await logAuditEvent({
        userId: verification.user.id,
        eventType: "password_change",
        eventCategory: "auth",
        entityType: "user",
        entityId: verification.user.id,
        action: result.success ? "password_reset_completed" : "password_reset_failed",
        additionalDetails: {
          userEmail: verification.user.email,
          success: result.success,
          failureReason: result.success ? null : result.message
        },
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
        requestMethod: req.method,
        requestPath: req.path
      });
    } catch (auditError) {
      console.error("Audit logging failed:", auditError);
    }
    if (!result.success) {
      return res.status(400).json(result);
    }
    res.json({
      success: true,
      message: "\uBE44\uBC00\uBC88\uD638\uAC00 \uC131\uACF5\uC801\uC73C\uB85C \uBCC0\uACBD\uB418\uC5C8\uC2B5\uB2C8\uB2E4. \uC0C8\uB85C\uC6B4 \uBE44\uBC00\uBC88\uD638\uB85C \uB85C\uADF8\uC778\uD574 \uC8FC\uC138\uC694."
    });
  } catch (error) {
    console.error("Reset password error:", error);
    res.status(500).json({
      success: false,
      message: "\uBE44\uBC00\uBC88\uD638 \uC7AC\uC124\uC815 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
router.get("/admin/users/:userId/password-reset-history", requireAuth, requireAdmin, async (req, res) => {
  try {
    const userId = req.params.userId;
    if (!userId) {
      return res.status(400).json({ message: "\uC0AC\uC6A9\uC790 ID\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4" });
    }
    const history = await PasswordResetService.getPasswordResetHistory(userId);
    res.json(history);
  } catch (error) {
    console.error("Get password reset history error:", error);
    res.status(500).json({ message: "\uBE44\uBC00\uBC88\uD638 \uC7AC\uC124\uC815 \uC774\uB825 \uC870\uD68C \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4" });
  }
});
router.post("/admin/cleanup-expired-tokens", requireAuth, requireAdmin, async (req, res) => {
  try {
    const adminId = req.user?.id;
    const cleanedCount = await PasswordResetService.cleanupExpiredTokens();
    try {
      await logAuditEvent({
        userId: adminId,
        eventType: "data_delete",
        eventCategory: "auth",
        entityType: "password_reset_token",
        action: "expired_tokens_cleaned",
        additionalDetails: {
          cleanedTokensCount: cleanedCount
        },
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
        requestMethod: req.method,
        requestPath: req.path
      });
    } catch (auditError) {
      console.error("Audit logging failed:", auditError);
    }
    res.json({
      message: `${cleanedCount}\uAC1C\uC758 \uB9CC\uB8CC\uB41C \uD1A0\uD070\uC774 \uC815\uB9AC\uB418\uC5C8\uC2B5\uB2C8\uB2E4`,
      cleanedCount
    });
  } catch (error) {
    console.error("Cleanup expired tokens error:", error);
    res.status(500).json({ message: "\uD1A0\uD070 \uC815\uB9AC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4" });
  }
});
router.post("/admin/users/:userId/invalidate-tokens", requireAuth, requireAdmin, async (req, res) => {
  try {
    const userId = req.params.userId;
    const adminId = req.user?.id;
    if (!userId) {
      return res.status(400).json({ message: "\uC0AC\uC6A9\uC790 ID\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4" });
    }
    await PasswordResetService.invalidateUserTokens(userId);
    try {
      await logAuditEvent({
        userId: adminId,
        eventType: "security_alert",
        eventCategory: "auth",
        entityType: "password_reset_token",
        entityId: userId,
        action: "user_tokens_invalidated",
        additionalDetails: {
          targetUserId: userId
        },
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
        requestMethod: req.method,
        requestPath: req.path
      });
    } catch (auditError) {
      console.error("Audit logging failed:", auditError);
    }
    res.json({ message: "\uC0AC\uC6A9\uC790\uC758 \uBAA8\uB4E0 \uBE44\uBC00\uBC88\uD638 \uC7AC\uC124\uC815 \uD1A0\uD070\uC774 \uBB34\uD6A8\uD654\uB418\uC5C8\uC2B5\uB2C8\uB2E4" });
  } catch (error) {
    console.error("Invalidate user tokens error:", error);
    res.status(500).json({ message: "\uD1A0\uD070 \uBB34\uD6A8\uD654 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4" });
  }
});
var auth_default = router;

// server/routes/projects.ts
import { Router as Router2 } from "express";
init_schema();

// server/utils/optimized-queries.ts
init_db();
init_schema();
import { eq as eq6, desc as desc2, count as count2, sql as sql3, and as and5, isNotNull as isNotNull2 } from "drizzle-orm";

// server/utils/cache.ts
var MemoryCache = class {
  constructor() {
    this.cache = /* @__PURE__ */ new Map();
    this.defaultTTL = 5 * 60 * 1e3;
  }
  // 5 minutes default TTL
  /**
   * Set cache entry with TTL
   */
  set(key, data, ttl = this.defaultTTL) {
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl
    });
  }
  /**
   * Get cache entry if not expired
   */
  get(key) {
    const entry = this.cache.get(key);
    if (!entry) {
      return null;
    }
    if (Date.now() - entry.timestamp > entry.ttl) {
      this.cache.delete(key);
      return null;
    }
    return entry.data;
  }
  /**
   * Delete cache entry
   */
  delete(key) {
    this.cache.delete(key);
  }
  /**
   * Clear all cache entries
   */
  clear() {
    this.cache.clear();
  }
  /**
   * Clear expired entries
   */
  cleanup() {
    const now = Date.now();
    for (const [key, entry] of this.cache.entries()) {
      if (now - entry.timestamp > entry.ttl) {
        this.cache.delete(key);
      }
    }
  }
  /**
   * Get cache size
   */
  size() {
    return this.cache.size;
  }
  /**
   * Get cache statistics
   */
  getStats() {
    return {
      size: this.cache.size,
      keys: Array.from(this.cache.keys())
    };
  }
};
var cache = new MemoryCache();
var CacheTTL = {
  SHORT: 1 * 60 * 1e3,
  // 1 minute
  MEDIUM: 5 * 60 * 1e3,
  // 5 minutes
  LONG: 30 * 60 * 1e3,
  // 30 minutes
  VERY_LONG: 60 * 60 * 1e3
  // 1 hour
};
setInterval(() => {
  cache.cleanup();
}, 10 * 60 * 1e3);

// server/utils/optimized-queries.ts
var OptimizedOrderQueries = class {
  /**
   * Get orders with comprehensive details and filtering
   */
  static async getOrdersWithDetails(filters = {}) {
    const cacheKey = `orders_details_${JSON.stringify(filters)}`;
    const cached = cache.get(cacheKey);
    if (cached) return cached;
    try {
      let query = db.select({
        id: purchaseOrders.id,
        orderNumber: purchaseOrders.orderNumber,
        status: purchaseOrders.status,
        totalAmount: purchaseOrders.totalAmount,
        orderDate: purchaseOrders.orderDate,
        deliveryDate: purchaseOrders.deliveryDate,
        projectName: projects.projectName,
        vendorName: vendors.name,
        userName: users.name,
        approvalLevel: purchaseOrders.approvalLevel,
        currentApproverRole: purchaseOrders.currentApproverRole
      }).from(purchaseOrders).leftJoin(projects, eq6(purchaseOrders.projectId, projects.id)).leftJoin(vendors, eq6(purchaseOrders.vendorId, vendors.id)).leftJoin(users, eq6(purchaseOrders.userId, users.id)).orderBy(desc2(purchaseOrders.orderDate));
      const result = await query;
      cache.set(cacheKey, result, 300);
      return result;
    } catch (error) {
      console.error("Error fetching orders with details:", error);
      return [];
    }
  }
  /**
   * Get pending approval orders for specific role
   */
  static async getPendingApprovalOrders(role) {
    const cacheKey = `pending_orders_${role}`;
    const cached = cache.get(cacheKey);
    if (cached) return cached;
    try {
      const result = await db.select().from(purchaseOrders).where(
        and5(
          eq6(purchaseOrders.status, "pending"),
          eq6(purchaseOrders.currentApproverRole, role)
        )
      ).orderBy(desc2(purchaseOrders.orderDate));
      cache.set(cacheKey, result, 120);
      return result;
    } catch (error) {
      console.error("Error fetching pending approval orders:", error);
      return [];
    }
  }
  /**
   * Get order statistics summary
   */
  static async getOrderStatistics() {
    const cacheKey = "order_statistics";
    const cached = cache.get(cacheKey);
    if (cached) return cached;
    try {
      const [totalOrders] = await db.select({ count: count2() }).from(purchaseOrders);
      const [pendingOrders] = await db.select({ count: count2() }).from(purchaseOrders).where(eq6(purchaseOrders.status, "pending"));
      const [approvedOrders] = await db.select({ count: count2() }).from(purchaseOrders).where(eq6(purchaseOrders.status, "approved"));
      const result = {
        total: totalOrders.count || 0,
        pending: pendingOrders.count || 0,
        approved: approvedOrders.count || 0
      };
      cache.set(cacheKey, result, 300);
      return result;
    } catch (error) {
      console.error("Error fetching order statistics:", error);
      return { total: 0, pending: 0, approved: 0 };
    }
  }
};
var OptimizedDashboardQueries = class {
  /**
   * Get unified dashboard data in single optimized query
   */
  static async getUnifiedDashboardData() {
    const cacheKey = "unified_dashboard_data";
    const cached = cache.get(cacheKey);
    if (cached) return cached;
    try {
      console.log("\u{1F50D} Starting getUnifiedDashboardData query...");
      const orderStatsResult = await db.execute(
        sql3`SELECT 
          COUNT(*) as "totalOrders",
          COALESCE(SUM(total_amount), 0) as "totalAmount"
        FROM purchase_orders`
      );
      console.log("\u{1F4CA} Order stats query result:", orderStatsResult);
      const orderStats = orderStatsResult.rows[0] || { totalOrders: 0, totalAmount: 0 };
      const pendingOrderResult = await db.execute(
        sql3`SELECT COUNT(*) as "pendingOrders" FROM purchase_orders WHERE status = 'pending'`
      );
      const pendingOrderStats = pendingOrderResult.rows[0] || { pendingOrders: 0 };
      const completedOrderResult = await db.execute(
        sql3`SELECT COUNT(*) as "completedOrders" 
            FROM purchase_orders 
            WHERE status = 'completed' 
            AND order_date >= DATE_TRUNC('month', CURRENT_DATE)`
      );
      const completedOrderStats = completedOrderResult.rows[0] || { completedOrders: 0 };
      const monthlyOrderResult = await db.execute(
        sql3`SELECT COUNT(*) as "monthlyOrders" 
            FROM purchase_orders 
            WHERE order_date >= DATE_TRUNC('month', CURRENT_DATE)`
      );
      const monthlyOrderStats = monthlyOrderResult.rows[0] || { monthlyOrders: 0 };
      const projectResult = await db.execute(
        sql3`SELECT COUNT(*) as "activeProjects" FROM projects WHERE is_active = true`
      );
      const projectStats = projectResult.rows[0] || { activeProjects: 0 };
      const vendorResult = await db.execute(
        sql3`SELECT COUNT(*) as "activeVendors" FROM vendors WHERE is_active = true`
      );
      const vendorStats = vendorResult.rows[0] || { activeVendors: 0 };
      const recentOrdersRaw = await db.select({
        id: purchaseOrders.id,
        orderNumber: purchaseOrders.orderNumber,
        status: purchaseOrders.status,
        totalAmount: purchaseOrders.totalAmount,
        createdAt: purchaseOrders.createdAt,
        vendorId: vendors.id,
        vendorName: vendors.name,
        projectId: projects.id,
        projectName: projects.projectName
      }).from(purchaseOrders).leftJoin(vendors, eq6(purchaseOrders.vendorId, vendors.id)).leftJoin(projects, eq6(purchaseOrders.projectId, projects.id)).orderBy(desc2(purchaseOrders.createdAt)).limit(10);
      const recentOrders = recentOrdersRaw.map((order) => ({
        id: order.id,
        orderNumber: order.orderNumber,
        status: order.status,
        totalAmount: order.totalAmount,
        createdAt: order.createdAt,
        vendor: order.vendorId ? {
          id: order.vendorId,
          name: order.vendorName
        } : null,
        project: order.projectId ? {
          id: order.projectId,
          name: order.projectName,
          projectName: order.projectName
          // Add backward compatibility
        } : null
      }));
      const monthlyStatsRaw = await db.select({
        month: sql3`TO_CHAR(${purchaseOrders.orderDate}, 'YYYY-MM')`,
        count: count2(),
        amount: sql3`COALESCE(SUM(${purchaseOrders.totalAmount}), 0)`,
        orderDate: sql3`DATE_TRUNC('month', ${purchaseOrders.orderDate})`
        // For proper sorting
      }).from(purchaseOrders).where(sql3`${purchaseOrders.orderDate} >= CURRENT_DATE - INTERVAL '12 months'`).groupBy(sql3`TO_CHAR(${purchaseOrders.orderDate}, 'YYYY-MM')`, sql3`DATE_TRUNC('month', ${purchaseOrders.orderDate})`).orderBy(sql3`DATE_TRUNC('month', ${purchaseOrders.orderDate}) ASC`);
      const monthlyStats = monthlyStatsRaw.map((item) => ({
        month: item.month,
        count: item.count,
        amount: item.amount,
        totalAmount: item.amount
        // Add alias for compatibility
      }));
      const statusStats = await db.select({
        status: purchaseOrders.orderStatus,
        count: count2(),
        amount: sql3`COALESCE(SUM(${purchaseOrders.totalAmount}), 0)`
      }).from(purchaseOrders).groupBy(purchaseOrders.orderStatus).orderBy(desc2(count2()));
      const allOrderStatuses = ["draft", "created", "sent", "delivered"];
      const existingStatusStats = statusStats;
      const statusMap = new Map(existingStatusStats.map((item) => [item.status, item]));
      const orderStatusStats = allOrderStatuses.map((status) => {
        if (statusMap.has(status)) {
          return statusMap.get(status);
        }
        return {
          status,
          count: 0,
          amount: 0
        };
      });
      const projectStatsList = await db.select({
        projectId: projects.id,
        projectName: projects.projectName,
        projectType: projects.projectType,
        orderCount: count2(),
        totalAmount: sql3`COALESCE(SUM(${purchaseOrders.totalAmount}), 0)`
      }).from(purchaseOrders).leftJoin(projects, eq6(purchaseOrders.projectId, projects.id)).where(isNotNull2(projects.id)).groupBy(projects.id, projects.projectName, projects.projectType).orderBy(desc2(sql3`COALESCE(SUM(${purchaseOrders.totalAmount}), 0)`)).limit(10);
      const result = {
        statistics: {
          totalOrders: parseInt(orderStats.totalOrders) || 0,
          totalAmount: Number(orderStats.totalAmount) || 0,
          pendingOrders: parseInt(pendingOrderStats.pendingOrders) || 0,
          completedOrders: parseInt(completedOrderStats.completedOrders) || 0,
          monthlyOrders: parseInt(monthlyOrderStats.monthlyOrders) || 0,
          activeProjects: parseInt(projectStats.activeProjects) || 0,
          activeVendors: parseInt(vendorStats.activeVendors) || 0
        },
        recentOrders,
        monthlyStats,
        statusStats,
        // Keep for backward compatibility
        orderStatusStats,
        // Separated order status
        projectStats: projectStatsList
      };
      console.log("\u2705 Dashboard data compiled successfully:", {
        totalOrders: result.statistics.totalOrders,
        activeProjects: result.statistics.activeProjects
      });
      cache.set(cacheKey, result, 600);
      return result;
    } catch (error) {
      console.error("\u274C Error fetching unified dashboard data:", error);
      console.error("Error details:", error.message);
      console.error("Stack trace:", error.stack);
      return {
        statistics: {
          totalOrders: 0,
          totalAmount: 0,
          pendingOrders: 0,
          completedOrders: 0,
          monthlyOrders: 0,
          activeProjects: 0,
          activeVendors: 0
        },
        recentOrders: [],
        monthlyStats: [],
        statusStats: [],
        orderStatusStats: [],
        projectStats: []
      };
    }
  }
  /**
   * Get order statistics for dashboard
   */
  static async getOrderStatistics() {
    return OptimizedOrderQueries.getOrderStatistics();
  }
};

// server/routes/projects.ts
var router2 = Router2();
router2.get("/projects", async (req, res) => {
  try {
    const projects2 = await storage.getProjects();
    res.json(projects2);
  } catch (error) {
    console.error("Error fetching projects:", error);
    res.status(500).json({ message: "Failed to fetch projects" });
  }
});
router2.get("/projects/active", async (req, res) => {
  try {
    const projects2 = await storage.getActiveProjects();
    res.json(projects2);
  } catch (error) {
    console.error("Error fetching active projects:", error);
    res.status(500).json({ message: "Failed to fetch active projects" });
  }
});
router2.get("/projects/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    const project = await storage.getProject(id);
    if (!project) {
      return res.status(404).json({ message: "Project not found" });
    }
    res.json(project);
  } catch (error) {
    console.error("Error fetching project:", error);
    res.status(500).json({ message: "Failed to fetch project" });
  }
});
router2.post("/projects", requireAuth, async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    const user = await storage.getUser(userId);
    if (!user || user.role !== "admin") {
      return res.status(403).json({ message: "Admin access required" });
    }
    console.log("\u{1F50D} Project creation request body:", JSON.stringify(req.body, null, 2));
    const projectTypeMap = {
      "\uC544\uD30C\uD2B8": "residential",
      "\uC624\uD53C\uC2A4\uD154": "residential",
      "\uB2E8\uB3C5\uC8FC\uD0DD": "residential",
      "\uC8FC\uAC70\uC2DC\uC124": "residential",
      "\uC0C1\uC5C5\uC2DC\uC124": "commercial",
      "\uC0AC\uBB34\uC2E4": "commercial",
      "\uC1FC\uD551\uBAB0": "commercial",
      "\uC0B0\uC5C5\uC2DC\uC124": "industrial",
      "\uACF5\uC7A5": "industrial",
      "\uCC3D\uACE0": "industrial",
      "\uC778\uD504\uB77C": "infrastructure",
      "\uB3C4\uB85C": "infrastructure",
      "\uAD50\uB7C9": "infrastructure"
    };
    console.log("\u{1F527} Original projectType:", req.body.projectType, "typeof:", typeof req.body.projectType);
    console.log("\u{1F527} Mapped projectType:", projectTypeMap[req.body.projectType]);
    console.log("\u{1F527} Original dates - startDate:", req.body.startDate, "endDate:", req.body.endDate);
    console.log("\u{1F527} Date types - startDate:", typeof req.body.startDate, "endDate:", typeof req.body.endDate);
    let transformedStartDate = null;
    let transformedEndDate = null;
    if (req.body.startDate) {
      if (typeof req.body.startDate === "string") {
        transformedStartDate = req.body.startDate.split("T")[0];
      } else if (req.body.startDate instanceof Date) {
        transformedStartDate = req.body.startDate.toISOString().split("T")[0];
      }
    }
    if (req.body.endDate) {
      if (typeof req.body.endDate === "string") {
        transformedEndDate = req.body.endDate.split("T")[0];
      } else if (req.body.endDate instanceof Date) {
        transformedEndDate = req.body.endDate.toISOString().split("T")[0];
      }
    }
    const transformedData = {
      ...req.body,
      startDate: transformedStartDate,
      endDate: transformedEndDate,
      totalBudget: req.body.totalBudget ? req.body.totalBudget : null,
      projectType: projectTypeMap[req.body.projectType] || req.body.projectType || "commercial"
    };
    console.log("Transformed project data:", transformedData);
    const validatedData = insertProjectSchema.parse(transformedData);
    console.log("Validated project data:", validatedData);
    const project = await storage.createProject(validatedData);
    console.log("Created project:", project);
    res.status(201).json(project);
  } catch (error) {
    console.error("Error creating project:", error);
    console.error("Error details:", error.message);
    console.error("Error stack:", error.stack);
    res.status(500).json({ message: "Failed to create project", error: error.message });
  }
});
router2.put("/projects/:id", requireAuth, async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    const user = await storage.getUser(userId);
    if (!user || user.role !== "admin") {
      return res.status(403).json({ message: "Admin access required" });
    }
    const projectId = parseInt(req.params.id, 10);
    console.log("\u{1F527} Updating project ID:", projectId);
    console.log("\u{1F527} Update data received:", req.body);
    const updateData = { ...req.body };
    if (updateData.totalBudget) {
      console.log("\u{1F527} Original totalBudget:", updateData.totalBudget, typeof updateData.totalBudget);
      updateData.totalBudget = parseFloat(updateData.totalBudget);
      console.log("\u{1F527} Converted totalBudget:", updateData.totalBudget, typeof updateData.totalBudget);
    }
    const updatedProject = await storage.updateProject(projectId, updateData);
    console.log("\u{1F527} Project updated successfully:", updatedProject);
    res.json(updatedProject);
  } catch (error) {
    console.error("\u{1F527} Error updating project:", error);
    res.status(500).json({ message: "Failed to update project" });
  }
});
router2.delete("/projects/:id", requireAuth, async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    const user = await storage.getUser(userId);
    if (!user || user.role !== "admin") {
      return res.status(403).json({ message: "Admin access required" });
    }
    const projectId = parseInt(req.params.id, 10);
    await storage.deleteProject(projectId);
    res.json({ message: "Project deleted successfully" });
  } catch (error) {
    console.error("Error deleting project:", error);
    res.status(500).json({ message: "Failed to delete project" });
  }
});
router2.get("/projects/:id/members", async (req, res) => {
  try {
    const projectId = parseInt(req.params.id, 10);
    const members = await storage.getProjectMembers(projectId);
    res.json(members);
  } catch (error) {
    console.error("Error fetching project members:", error);
    res.status(500).json({ message: "Failed to fetch project members" });
  }
});
router2.post("/projects/:id/members", requireAuth, async (req, res) => {
  try {
    const projectId = parseInt(req.params.id, 10);
    const { userId } = req.body;
    await storage.addProjectMember(projectId, userId);
    res.status(201).json({ message: "Member added successfully" });
  } catch (error) {
    console.error("Error adding project member:", error);
    res.status(500).json({ message: "Failed to add project member" });
  }
});
router2.delete("/projects/:id/members/:userId", requireAuth, async (req, res) => {
  try {
    const projectId = parseInt(req.params.id, 10);
    const userId = req.params.userId;
    await storage.removeProjectMember(projectId, userId);
    res.json({ message: "Member removed successfully" });
  } catch (error) {
    console.error("Error removing project member:", error);
    res.status(500).json({ message: "Failed to remove project member" });
  }
});
router2.get("/projects/:id/stats", async (req, res) => {
  try {
    const projectId = parseInt(req.params.id, 10);
    const orders = await OptimizedOrderQueries.getProjectOrders(projectId);
    const totalAmount = orders.reduce((sum2, order) => sum2 + (order.totalAmount || 0), 0);
    const completedOrders = orders.filter((order) => order.status === "completed").length;
    const stats = {
      totalOrders: orders.length,
      completedOrders,
      pendingOrders: orders.filter((order) => order.status === "pending").length,
      totalAmount,
      completionRate: orders.length > 0 ? Math.round(completedOrders / orders.length * 100) : 0
    };
    res.json(stats);
  } catch (error) {
    console.error("Error fetching project statistics:", error);
    res.status(500).json({ message: "Failed to fetch project statistics" });
  }
});
var projects_default = router2;

// server/routes/orders.ts
import { Router as Router3 } from "express";
init_schema();

// server/utils/multer-config.ts
import multer from "multer";
import path3 from "path";
import fs5 from "fs";

// server/utils/korean-filename.ts
function decodeKoreanFilename(originalname) {
  console.log("\u{1F50D} Decoding Korean filename:", originalname);
  console.log("\u{1F50D} Original bytes:", Buffer.from(originalname).toString("hex"));
  console.log("\u{1F50D} Char codes:", originalname.split("").map((c) => c.charCodeAt(0)));
  try {
    const latin1Buffer = Buffer.from(originalname, "latin1");
    const utf8Decoded = latin1Buffer.toString("utf8");
    console.log("Method 1 (latin1\u2192utf8):", utf8Decoded);
    if (/[가-힣]/.test(utf8Decoded)) {
      console.log("\u2705 Method 1 SUCCESS - Korean detected");
      return utf8Decoded;
    }
  } catch (e) {
    console.log("\u274C Method 1 failed:", e);
  }
  try {
    const doubleDecoded = decodeURIComponent(escape(originalname));
    console.log("Method 2 (escape\u2192decode):", doubleDecoded);
    if (/[가-힣]/.test(doubleDecoded)) {
      console.log("\u2705 Method 2 SUCCESS - Korean detected");
      return doubleDecoded;
    }
  } catch (e) {
    console.log("\u274C Method 2 failed:", e);
  }
  try {
    const binaryDecoded = Buffer.from(originalname, "binary").toString("utf8");
    console.log("Method 3 (binary\u2192utf8):", binaryDecoded);
    if (/[가-힣]/.test(binaryDecoded)) {
      console.log("\u2705 Method 3 SUCCESS - Korean detected");
      return binaryDecoded;
    }
  } catch (e) {
    console.log("\u274C Method 3 failed:", e);
  }
  try {
    const urlDecoded = decodeURIComponent(originalname);
    console.log("Method 4 (URL decode):", urlDecoded);
    if (/[가-힣]/.test(urlDecoded)) {
      console.log("\u2705 Method 4 SUCCESS - Korean detected");
      return urlDecoded;
    }
  } catch (e) {
    console.log("\u274C Method 4 failed:", e);
  }
  try {
    const isoDecoded = Buffer.from(originalname, "latin1").toString("utf8");
    console.log("Method 5 (ISO conversion):", isoDecoded);
    if (/[가-힣]/.test(isoDecoded)) {
      console.log("\u2705 Method 5 SUCCESS - Korean detected");
      return isoDecoded;
    }
  } catch (e) {
    console.log("\u274C Method 5 failed:", e);
  }
  if (originalname.includes("\xE1")) {
    console.log("\u{1F527} Using pattern-based fallback for corrupted Korean");
    return fixCorruptedKoreanFilename(originalname);
  }
  console.log("\u26A0\uFE0F All methods FAILED - using original filename");
  return originalname;
}
function fixCorruptedKoreanFilename(filename) {
  console.log("\u{1F527} Fixing corrupted Korean filename:", filename);
  if (filename.includes("xlsx")) {
    if (filename.includes("\uC555\uCD9C") || filename.length > 30) {
      const fixed = "\uC555\uCD9C\uBC1C\uC8FC\uC11C_\uD488\uBAA9\uB9AC\uC2A4\uD2B8.xlsx";
      console.log("\u{1F527} Fixed to:", fixed);
      return fixed;
    } else {
      const fixed = "\uBC1C\uC8FC\uC11C_\uC0D8\uD50C.xlsx";
      console.log("\u{1F527} Fixed to:", fixed);
      return fixed;
    }
  }
  const fixes = {
    "\xE1 \xE1 \xA1\xE1\xAF\xE1 \xE1 \xAE\xE1 \xE1 \xA5": "\uBC1C\uC8FC\uC11C",
    "\xE1 \xE1 \xA2": "_",
    "\xE1\xB7\xE1 \xE1 \xB3\xE1\xAF": "\uC0D8\uD50C"
    // Add more mappings as discovered
  };
  let result = filename;
  for (const [corrupted, fixed] of Object.entries(fixes)) {
    result = result.replace(new RegExp(corrupted, "g"), fixed);
  }
  console.log("\u{1F527} Pattern-based result:", result);
  return result;
}

// server/utils/multer-config.ts
var uploadDir = process.env.VERCEL ? "/tmp" : path3.join(process.cwd(), "uploads");
if (!process.env.VERCEL && !fs5.existsSync(uploadDir)) {
  fs5.mkdirSync(uploadDir, { recursive: true });
}
var createMulterConfig = (prefix = "FILE") => {
  return multer({
    storage: multer.diskStorage({
      destination: (req, file, cb) => {
        cb(null, uploadDir);
      },
      filename: (req, file, cb) => {
        console.log(`\u{1F4BE} ${prefix} - Multer filename callback`);
        console.log(`\u{1F4BE} ${prefix} - Raw originalname:`, file.originalname);
        console.log(`\u{1F4BE} ${prefix} - Raw bytes:`, Buffer.from(file.originalname));
        const decodedName = decodeKoreanFilename(file.originalname);
        file.originalname = decodedName;
        const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
        const filename = uniqueSuffix.toString();
        console.log(`\u{1F4BE} ${prefix} - Decoded originalname:`, decodedName);
        console.log(`\u{1F4BE} ${prefix} - Generated filename:`, filename);
        cb(null, filename);
      }
    }),
    limits: {
      fileSize: 10 * 1024 * 1024,
      // 10MB
      files: 10
      // Allow up to 10 files
    },
    fileFilter: (req, file, cb) => {
      console.log(`\u{1F50D} ${prefix} - File filter - fieldname:`, file.fieldname);
      console.log(`\u{1F50D} ${prefix} - File filter - originalname:`, file.originalname);
      console.log(`\u{1F50D} ${prefix} - File filter - mimetype:`, file.mimetype);
      const allowedTypes = [
        "application/pdf",
        "image/jpeg",
        "image/png",
        "image/gif",
        "application/dwg",
        "application/x-dwg",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        // .xlsx
        "application/vnd.ms-excel.sheet.macroEnabled.12",
        // .xlsm (대문자 E)
        "application/vnd.ms-excel.sheet.macroenabled.12",
        // .xlsm (소문자 e)
        "application/vnd.ms-excel",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
      ];
      if (allowedTypes.includes(file.mimetype)) {
        console.log(`\u2705 ${prefix} - File type accepted:`, file.mimetype);
        cb(null, true);
      } else {
        console.log(`\u274C ${prefix} - File type rejected:`, file.mimetype);
        cb(new Error(`File type not allowed: ${file.mimetype}`), false);
      }
    }
  });
};
var upload = createMulterConfig("MAIN");
var orderUpload = createMulterConfig("ORDER");
var logoUpload = createMulterConfig("LOGO");
var excelUpload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024
    // 10MB
  },
  fileFilter: (req, file, cb) => {
    console.log(`\u{1F50D} EXCEL - File filter - fieldname:`, file.fieldname);
    console.log(`\u{1F50D} EXCEL - File filter - originalname:`, file.originalname);
    console.log(`\u{1F50D} EXCEL - File filter - mimetype:`, file.mimetype);
    const allowedTypes = [
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      // .xlsx
      "application/vnd.ms-excel.sheet.macroEnabled.12",
      // .xlsm (대문자 E)
      "application/vnd.ms-excel.sheet.macroenabled.12",
      // .xlsm (소문자 e)
      "application/vnd.ms-excel"
      // .xls
    ];
    if (allowedTypes.includes(file.mimetype)) {
      console.log(`\u2705 EXCEL - File type accepted:`, file.mimetype);
      cb(null, true);
    } else {
      console.log(`\u274C EXCEL - File type rejected:`, file.mimetype);
      cb(new Error(`Excel \uD30C\uC77C\uB9CC \uD5C8\uC6A9\uB429\uB2C8\uB2E4. \uD604\uC7AC \uD0C0\uC785: ${file.mimetype}`), false);
    }
  }
});

// server/services/order-service.ts
var OrderService = class {
  /**
   * Generate unique order number with current date
   */
  static generateOrderNumber() {
    const now = /* @__PURE__ */ new Date();
    const year = now.getFullYear().toString().slice(-2);
    const month = (now.getMonth() + 1).toString().padStart(2, "0");
    const day = now.getDate().toString().padStart(2, "0");
    const timestamp2 = now.getTime().toString().slice(-6);
    return `PO${year}${month}${day}_${timestamp2}`;
  }
  /**
   * Create new purchase order
   */
  static async createOrder(orderData) {
    try {
      if (!orderData.orderNumber) {
        orderData.orderNumber = this.generateOrderNumber();
      }
      orderData.orderStatus = orderData.orderStatus || "draft";
      orderData.approvalStatus = orderData.approvalStatus || "not_required";
      orderData.approvalLevel = orderData.approvalLevel || 1;
      orderData.currentApproverRole = orderData.currentApproverRole || "field_worker";
      const result = await storage.createPurchaseOrder(orderData);
      return result;
    } catch (error) {
      console.error("Error creating order:", error);
      throw error;
    }
  }
  /**
   * Submit order for approval
   */
  static async submitForApproval(orderId, userId) {
    try {
      const updateData = {
        status: "pending",
        currentApproverRole: "project_manager",
        approvalLevel: 2,
        updatedAt: /* @__PURE__ */ new Date()
      };
      const result = await storage.updatePurchaseOrder(orderId, updateData);
      await this.createApprovalLog(orderId, userId, "submitted_for_approval");
      return result;
    } catch (error) {
      console.error("Error submitting order for approval:", error);
      throw error;
    }
  }
  /**
   * Approve order
   */
  static async approveOrder(orderId, userId, role) {
    try {
      const nextApprovalLevel = this.getNextApprovalLevel(role);
      const nextApproverRole = this.getNextApproverRole(role);
      const updateData = {
        status: nextApproverRole ? "pending" : "approved",
        currentApproverRole: nextApproverRole,
        approvalLevel: nextApprovalLevel,
        updatedAt: /* @__PURE__ */ new Date()
      };
      const result = await storage.updatePurchaseOrder(orderId, updateData);
      await this.createApprovalLog(orderId, userId, "approved");
      return result;
    } catch (error) {
      console.error("Error approving order:", error);
      throw error;
    }
  }
  /**
   * Reject order
   */
  static async rejectOrder(orderId, userId, reason) {
    try {
      const updateData = {
        status: "draft",
        currentApproverRole: null,
        approvalLevel: 1,
        updatedAt: /* @__PURE__ */ new Date()
      };
      const result = await storage.updatePurchaseOrder(orderId, updateData);
      await this.createApprovalLog(orderId, userId, "rejected", reason);
      return result;
    } catch (error) {
      console.error("Error rejecting order:", error);
      throw error;
    }
  }
  /**
   * Get next approval level based on current role
   */
  static getNextApprovalLevel(currentRole) {
    const levels = {
      "field_worker": 2,
      "project_manager": 3,
      "hq_management": 4,
      "executive": 5
    };
    return levels[currentRole] || 1;
  }
  /**
   * Get next approver role based on current role
   */
  static getNextApproverRole(currentRole) {
    const nextRoles = {
      "field_worker": "project_manager",
      "project_manager": "hq_management",
      "hq_management": "executive",
      "executive": null
      // Final approval
    };
    return nextRoles[currentRole] || null;
  }
  /**
   * Create approval log entry
   */
  static async createApprovalLog(orderId, userId, action, notes) {
    try {
      console.log(`Approval log: Order ${orderId}, User ${userId}, Action: ${action}, Notes: ${notes || "None"}`);
    } catch (error) {
      console.error("Error creating approval log:", error);
    }
  }
};

// server/services/approval-routing-service.ts
init_db();
init_schema();
import { eq as eq7, and as and6, lte as lte3, asc as asc2, desc as desc3 } from "drizzle-orm";
var ApprovalRoutingService = class {
  /**
   * 주문에 대한 최적의 승인 경로를 결정합니다
   */
  static async determineApprovalRoute(context) {
    try {
      const workflowSettings = await this.getWorkflowSettings(context.companyId);
      if (!workflowSettings) {
        return {
          approvalMode: "direct",
          canDirectApprove: context.currentUserRole === "admin",
          directApprovalUsers: [],
          reasoning: "\uC2B9\uC778 \uC6CC\uD06C\uD50C\uB85C \uC124\uC815\uC774 \uC5C6\uC5B4 \uAE30\uBCF8 \uC9C1\uC811 \uC2B9\uC778 \uBAA8\uB4DC\uB97C \uC0AC\uC6A9\uD569\uB2C8\uB2E4."
        };
      }
      if (workflowSettings.approvalMode === "direct") {
        return await this.handleDirectApproval(context, workflowSettings);
      } else {
        return await this.handleStagedApproval(context, workflowSettings);
      }
    } catch (error) {
      console.error("\uC2B9\uC778 \uACBD\uB85C \uACB0\uC815 \uC624\uB958:", error);
      return {
        approvalMode: "direct",
        canDirectApprove: false,
        reasoning: "\uC624\uB958\uB85C \uC778\uD574 \uAE30\uBCF8 \uC2B9\uC778 \uBAA8\uB4DC\uB97C \uC0AC\uC6A9\uD569\uB2C8\uB2E4."
      };
    }
  }
  /**
   * 직접 승인 모드 처리
   */
  static async handleDirectApproval(context, settings) {
    const directApprovalRoles = settings.directApprovalRoles || [];
    const canDirectApprove = directApprovalRoles.includes(context.currentUserRole);
    const directApprovalUsers = await db.select({ id: users.id, name: users.name }).from(users).where(eq7(users.role, context.currentUserRole)).limit(10);
    return {
      approvalMode: "direct",
      canDirectApprove,
      directApprovalUsers: directApprovalUsers.map((u) => u.id),
      reasoning: canDirectApprove ? `${context.currentUserRole} \uC5ED\uD560\uC740 \uC9C1\uC811 \uC2B9\uC778\uC774 \uAC00\uB2A5\uD569\uB2C8\uB2E4.` : `${context.currentUserRole} \uC5ED\uD560\uC740 \uC9C1\uC811 \uC2B9\uC778 \uAD8C\uD55C\uC774 \uC5C6\uC2B5\uB2C8\uB2E4.`
    };
  }
  /**
   * 단계별 승인 모드 처리
   */
  static async handleStagedApproval(context, settings) {
    const appropriateTemplate = await this.findAppropriateStagedTemplate(
      context.companyId,
      context.orderAmount,
      context.priority
    );
    if (!appropriateTemplate.length) {
      return {
        approvalMode: "direct",
        canDirectApprove: context.currentUserRole === "admin",
        reasoning: "\uC801\uC808\uD55C \uB2E8\uACC4\uBCC4 \uC2B9\uC778 \uD15C\uD50C\uB9BF\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC5B4 \uC9C1\uC811 \uC2B9\uC778\uC73C\uB85C \uCC98\uB9AC\uD569\uB2C8\uB2E4."
      };
    }
    const canSkipSteps = await this.checkSkippableSteps(
      context.currentUserRole,
      context.orderAmount,
      appropriateTemplate
    );
    const finalSteps = settings.skipLowerStages && canSkipSteps.length > 0 ? appropriateTemplate.filter((step) => !canSkipSteps.includes(step.id)) : appropriateTemplate;
    return {
      approvalMode: "staged",
      canDirectApprove: false,
      stagedApprovalSteps: finalSteps,
      templateName: appropriateTemplate[0]?.templateName,
      reasoning: `${context.orderAmount}\uC6D0 \uC8FC\uBB38\uC5D0 \uB300\uD574 ${finalSteps.length}\uB2E8\uACC4 \uC2B9\uC778 \uD504\uB85C\uC138\uC2A4\uB97C \uC801\uC6A9\uD569\uB2C8\uB2E4.`
    };
  }
  /**
   * 금액과 우선순위에 적합한 단계별 승인 템플릿 찾기
   */
  static async findAppropriateStagedTemplate(companyId, orderAmount, priority) {
    const templates = await db.select().from(approvalStepTemplates).where(
      and6(
        eq7(approvalStepTemplates.companyId, companyId),
        eq7(approvalStepTemplates.isActive, true),
        lte3(approvalStepTemplates.minAmount, orderAmount.toString())
        // maxAmount가 null이거나 orderAmount보다 크거나 같은 경우
      )
    ).orderBy(asc2(approvalStepTemplates.stepOrder));
    const filteredTemplates = templates.filter(
      (template) => !template.maxAmount || parseFloat(template.maxAmount) >= orderAmount
    );
    if (priority === "high" && filteredTemplates.length > 2) {
      return filteredTemplates.filter((template) => !template.isOptional);
    }
    return filteredTemplates;
  }
  /**
   * 현재 사용자 권한으로 건너뛸 수 있는 단계 확인
   */
  static async checkSkippableSteps(currentUserRole, orderAmount, approvalSteps) {
    const userAuthority = await db.select().from(approvalAuthorities).where(
      and6(
        eq7(approvalAuthorities.role, currentUserRole),
        eq7(approvalAuthorities.isActive, true)
      )
    ).limit(1);
    if (!userAuthority.length) {
      return [];
    }
    const maxAmount = parseFloat(userAuthority[0].maxAmount);
    if (orderAmount <= maxAmount) {
      return approvalSteps.filter((step) => step.canSkip && step.requiredRole !== currentUserRole).map((step) => step.id);
    }
    return [];
  }
  /**
   * 주문에 대한 승인 단계 인스턴스 생성
   */
  static async createApprovalInstances(orderId, context) {
    const route = await this.determineApprovalRoute(context);
    if (route.approvalMode === "direct") {
      return [];
    }
    if (!route.stagedApprovalSteps?.length) {
      throw new Error("\uB2E8\uACC4\uBCC4 \uC2B9\uC778 \uB2E8\uACC4\uAC00 \uC815\uC758\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4.");
    }
    const instancesData = route.stagedApprovalSteps.map((step) => ({
      orderId,
      templateId: step.id,
      stepOrder: step.stepOrder,
      requiredRole: step.requiredRole,
      status: "pending"
    }));
    const instances = await db.insert(approvalStepInstances2).values(instancesData).returning();
    return instances;
  }
  /**
   * 주문의 다음 승인 단계 결정
   */
  static async getNextApprovalStep(orderId) {
    const nextStep = await db.select().from(approvalStepInstances2).where(
      and6(
        eq7(approvalStepInstances2.orderId, orderId),
        eq7(approvalStepInstances2.status, "pending"),
        eq7(approvalStepInstances2.isActive, true)
      )
    ).orderBy(asc2(approvalStepInstances2.stepOrder)).limit(1);
    return nextStep[0] || null;
  }
  /**
   * 주문의 승인 완료 여부 확인
   */
  static async isApprovalComplete(orderId) {
    const pendingSteps = await db.select().from(approvalStepInstances2).where(
      and6(
        eq7(approvalStepInstances2.orderId, orderId),
        eq7(approvalStepInstances2.status, "pending"),
        eq7(approvalStepInstances2.isActive, true)
      )
    );
    return pendingSteps.length === 0;
  }
  /**
   * 주문 승인 진행률 계산
   */
  static async getApprovalProgress(orderId) {
    const allSteps = await db.select().from(approvalStepInstances2).where(
      and6(
        eq7(approvalStepInstances2.orderId, orderId),
        eq7(approvalStepInstances2.isActive, true)
      )
    ).orderBy(asc2(approvalStepInstances2.stepOrder));
    const completedSteps = allSteps.filter(
      (step) => step.status === "approved" || step.status === "skipped"
    );
    const currentStep = allSteps.find((step) => step.status === "pending");
    return {
      totalSteps: allSteps.length,
      completedSteps: completedSteps.length,
      progressPercentage: allSteps.length > 0 ? Math.round(completedSteps.length / allSteps.length * 100) : 0,
      currentStep
    };
  }
  /**
   * 회사의 승인 워크플로 설정 조회
   */
  static async getWorkflowSettings(companyId) {
    const settings = await db.select().from(approvalWorkflowSettings).where(
      and6(
        eq7(approvalWorkflowSettings.companyId, companyId),
        eq7(approvalWorkflowSettings.isActive, true)
      )
    ).orderBy(desc3(approvalWorkflowSettings.createdAt)).limit(1);
    return settings[0] || null;
  }
};
var approval_routing_service_default = ApprovalRoutingService;

// server/routes/orders.ts
init_professional_pdf_generation_service();
init_db();
init_email_settings_service();
import { eq as eq10 } from "drizzle-orm";
import fs7 from "fs";
import path5 from "path";
import { fileURLToPath as fileURLToPath2 } from "url";
import * as XLSX3 from "xlsx";
import nodemailer3 from "nodemailer";
var __filename2 = fileURLToPath2(import.meta.url);
var __dirname2 = path5.dirname(__filename2);
var router3 = Router3();
var emailService = new POEmailService();
async function updateOrderStatusAfterEmail(orderNumber) {
  await db.update(purchaseOrders).set({
    orderStatus: "sent",
    updatedAt: /* @__PURE__ */ new Date()
  }).where(eq10(purchaseOrders.orderNumber, orderNumber));
}
router3.get("/orders", async (req, res) => {
  try {
    const {
      page = "1",
      limit = "50",
      // Changed default from 20 to 50 to match frontend
      status,
      projectId,
      vendorId,
      startDate,
      endDate,
      userId,
      search
    } = req.query;
    const filters = {
      orderStatus: status,
      // Use orderStatus instead of legacy status
      projectId: projectId ? parseInt(projectId) : void 0,
      vendorId: vendorId ? parseInt(vendorId) : void 0,
      startDate: startDate ? new Date(startDate) : void 0,
      endDate: endDate ? new Date(endDate) : void 0,
      userId,
      searchText: search,
      // Changed from 'search' to 'searchText' to match storage.ts
      page: parseInt(page),
      limit: parseInt(limit)
    };
    const result = await storage.getPurchaseOrders(filters);
    res.json(result);
  } catch (error) {
    console.error("Error fetching orders:", error);
    res.status(500).json({ message: "Failed to fetch orders" });
  }
});
router3.get("/orders/export", requireAuth, async (req, res) => {
  try {
    const userId = req.user?.id;
    const user = await storage.getUser(userId);
    console.log("Export request params:", req.query);
    const vendorIdParam = req.query.vendorId;
    const vendorId = vendorIdParam && vendorIdParam !== "all" ? parseInt(vendorIdParam) : void 0;
    const projectIdParam = req.query.projectId;
    const projectId = projectIdParam && projectIdParam !== "all" && projectIdParam !== "" ? parseInt(projectIdParam) : void 0;
    const filters = {
      userId: user?.role === "admin" && req.query.userId && req.query.userId !== "all" ? req.query.userId : user?.role === "admin" ? void 0 : userId,
      orderStatus: req.query.status && req.query.status !== "all" ? req.query.status : void 0,
      // Use orderStatus instead of legacy status
      vendorId,
      projectId,
      startDate: req.query.startDate ? new Date(req.query.startDate) : void 0,
      endDate: req.query.endDate ? new Date(req.query.endDate) : void 0,
      minAmount: req.query.minAmount ? parseFloat(req.query.minAmount) : void 0,
      maxAmount: req.query.maxAmount ? parseFloat(req.query.maxAmount) : void 0,
      searchText: req.query.searchText,
      majorCategory: req.query.majorCategory && req.query.majorCategory !== "all" ? req.query.majorCategory : void 0,
      middleCategory: req.query.middleCategory && req.query.middleCategory !== "all" ? req.query.middleCategory : void 0,
      minorCategory: req.query.minorCategory && req.query.minorCategory !== "all" ? req.query.minorCategory : void 0,
      limit: 1e3
      // Export more records
    };
    console.log("Export filters:", filters);
    const { orders } = await storage.getPurchaseOrders(filters);
    const excelData = [];
    orders.forEach((order) => {
      if (order.items && order.items.length > 0) {
        order.items.forEach((item, index2) => {
          excelData.push({
            "\uBC1C\uC8FC\uBC88\uD638": order.orderNumber,
            "\uAC70\uB798\uCC98": order.vendor?.name || "",
            "\uAC70\uB798\uCC98 \uC774\uBA54\uC77C": order.vendor?.email || "",
            "\uB0A9\uD488\uCC98": order.deliverySite || "",
            "\uB0A9\uD488\uCC98 \uC774\uBA54\uC77C": order.deliverySiteEmail || "",
            "\uD504\uB85C\uC81D\uD2B8\uBA85": order.project?.projectName || "",
            "\uBC1C\uC8FC\uC77C\uC790": order.orderDate,
            "\uB0A9\uAE30\uD76C\uB9DD\uC77C": order.deliveryDate,
            "\uB300\uBD84\uB958": item.majorCategory || "",
            "\uC911\uBD84\uB958": item.middleCategory || "",
            "\uC18C\uBD84\uB958": item.minorCategory || "",
            "\uD488\uBAA9\uBA85": item.itemName,
            "\uADDC\uACA9": item.specification || "",
            "\uB2E8\uC704": item.unit || "",
            "\uC218\uB7C9": item.quantity,
            "\uB2E8\uAC00": item.unitPrice,
            "\uACF5\uAE09\uAC00\uC561": item.supplyAmount || item.quantity * item.unitPrice,
            "\uBD80\uAC00\uC138": item.taxAmount || 0,
            "\uCD1D\uAE08\uC561": item.totalAmount,
            "\uBC1C\uC8FC\uCD1D\uC561": order.totalAmount,
            "\uC0C1\uD0DC": order.status,
            "\uC791\uC131\uC790": order.user?.name || "",
            "\uC2B9\uC778\uC790": order.approver?.name || "",
            "\uC2B9\uC778\uC77C": order.approvedAt || "",
            "\uD488\uBAA9\uBE44\uACE0": item.notes || "",
            "\uBC1C\uC8FC\uBE44\uACE0": order.notes || ""
          });
        });
      } else {
        excelData.push({
          "\uBC1C\uC8FC\uBC88\uD638": order.orderNumber,
          "\uAC70\uB798\uCC98": order.vendor?.name || "",
          "\uAC70\uB798\uCC98 \uC774\uBA54\uC77C": order.vendor?.email || "",
          "\uB0A9\uD488\uCC98": order.deliverySite || "",
          "\uB0A9\uD488\uCC98 \uC774\uBA54\uC77C": order.deliverySiteEmail || "",
          "\uD504\uB85C\uC81D\uD2B8\uBA85": order.project?.projectName || "",
          "\uBC1C\uC8FC\uC77C\uC790": order.orderDate,
          "\uB0A9\uAE30\uD76C\uB9DD\uC77C": order.deliveryDate,
          "\uB300\uBD84\uB958": "",
          "\uC911\uBD84\uB958": "",
          "\uC18C\uBD84\uB958": "",
          "\uD488\uBAA9\uBA85": "",
          "\uADDC\uACA9": "",
          "\uB2E8\uC704": "",
          "\uC218\uB7C9": "",
          "\uB2E8\uAC00": "",
          "\uACF5\uAE09\uAC00\uC561": "",
          "\uBD80\uAC00\uC138": "",
          "\uCD1D\uAE08\uC561": "",
          "\uBC1C\uC8FC\uCD1D\uC561": order.totalAmount,
          "\uC0C1\uD0DC": order.status,
          "\uC791\uC131\uC790": order.user?.name || "",
          "\uC2B9\uC778\uC790": order.approver?.name || "",
          "\uC2B9\uC778\uC77C": order.approvedAt || "",
          "\uD488\uBAA9\uBE44\uACE0": "",
          "\uBC1C\uC8FC\uBE44\uACE0": order.notes || ""
        });
      }
    });
    const worksheet = XLSX3.utils.json_to_sheet(excelData);
    const workbook = XLSX3.utils.book_new();
    XLSX3.utils.book_append_sheet(workbook, worksheet, "\uBC1C\uC8FC\uB0B4\uC5ED");
    const excelBuffer = XLSX3.write(workbook, { type: "buffer", bookType: "xlsx" });
    res.setHeader("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    res.setHeader("Content-Disposition", "attachment; filename=orders.xlsx");
    res.send(excelBuffer);
  } catch (error) {
    console.error("Error exporting orders:", error);
    res.status(500).json({ message: "Failed to export orders" });
  }
});
router3.get("/orders/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    const order = await storage.getPurchaseOrder(id);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    res.json(order);
  } catch (error) {
    console.error("Error fetching order:", error);
    res.status(500).json({ message: "Failed to fetch order" });
  }
});
router3.post("/orders", requireAuth, upload.array("attachments"), async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    console.log("\u{1F527}\u{1F527}\u{1F527} ORDERS.TS - Order creation request:", {
      body: req.body,
      files: req.files?.map((f) => ({
        originalname: f.originalname,
        filename: f.filename,
        size: f.size
      }))
    });
    let items3 = [];
    try {
      items3 = JSON.parse(req.body.items || "[]");
    } catch (parseError) {
      console.error("\u{1F527}\u{1F527}\u{1F527} ORDERS.TS - Error parsing items:", parseError);
      return res.status(400).json({ message: "Invalid items data" });
    }
    const totalAmount = items3.reduce((sum2, item) => sum2 + parseFloat(item.quantity) * parseFloat(item.unitPrice), 0);
    const approvalContext = {
      orderId: 0,
      // Temporary, will be set after order creation
      orderAmount: totalAmount,
      companyId: 1,
      // Default company ID, should be dynamic based on user's company
      currentUserId: userId,
      currentUserRole: req.user?.role || "field_worker",
      priority: req.body.priority || "medium"
    };
    let initialStatus = "draft";
    try {
      const approvalRoute = await approval_routing_service_default.determineApprovalRoute(approvalContext);
      console.log("\u{1F527}\u{1F527}\u{1F527} ORDERS.TS - Approval route preview:", approvalRoute);
      if (req.body.isDirectSubmit || req.body.status === "sent") {
        if (approvalRoute.canDirectApprove || approvalRoute.approvalMode === "none") {
          initialStatus = "sent";
        } else {
          initialStatus = "pending";
        }
      } else {
        initialStatus = req.body.status || "draft";
      }
    } catch (error) {
      console.error("Error checking approval requirements:", error);
      initialStatus = req.body.status || "draft";
    }
    const orderData = {
      orderNumber: await OrderService.generateOrderNumber(),
      projectId: parseInt(req.body.projectId),
      vendorId: req.body.vendorId ? parseInt(req.body.vendorId) : null,
      templateId: req.body.templateId ? parseInt(req.body.templateId) : null,
      userId,
      orderDate: req.body.orderDate ? new Date(req.body.orderDate) : /* @__PURE__ */ new Date(),
      deliveryDate: req.body.deliveryDate ? new Date(req.body.deliveryDate) : null,
      totalAmount,
      notes: req.body.notes || null,
      status: initialStatus,
      currentApproverRole: null,
      approvalLevel: 0,
      items: items3
    };
    console.log("\u{1F527}\u{1F527}\u{1F527} ORDERS.TS - Prepared order data with status:", initialStatus);
    const order = await storage.createPurchaseOrder(orderData);
    console.log("\u{1F527}\u{1F527}\u{1F527} ORDERS.TS - Created order:", order);
    if (req.files && req.files.length > 0) {
      const fs22 = __require("fs");
      const path20 = __require("path");
      const { removeAllInputSheets: removeAllInputSheets2 } = (init_excel_input_sheet_remover(), __toCommonJS(excel_input_sheet_remover_exports));
      for (const file of req.files) {
        const decodedFilename = decodeKoreanFilename(file.originalname);
        console.log("\u{1F527}\u{1F527}\u{1F527} ORDERS.TS - Processing file:", {
          original: file.originalname,
          decoded: decodedFilename,
          stored: file.filename
        });
        let fileToStore = file.path;
        let fileBuffer;
        if (file.mimetype === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" || file.originalname.toLowerCase().endsWith(".xlsx")) {
          console.log("\u{1F4CA} Excel \uD30C\uC77C \uAC10\uC9C0, Input \uC2DC\uD2B8 \uC81C\uAC70 \uCC98\uB9AC \uC2DC\uC791...");
          const processedPath = file.path.replace(/\.(xlsx?)$/i, "_processed.$1");
          const removeResult = await removeAllInputSheets2(file.path, processedPath);
          if (removeResult.success && fs22.existsSync(processedPath)) {
            console.log(`\u2705 Input \uC2DC\uD2B8 \uC81C\uAC70 \uC644\uB8CC: ${removeResult.removedSheets.join(", ")}`);
            fileToStore = processedPath;
            fileBuffer = fs22.readFileSync(processedPath);
            try {
              fs22.unlinkSync(file.path);
            } catch (e) {
              console.warn("\uC6D0\uBCF8 \uD30C\uC77C \uC0AD\uC81C \uC2E4\uD328:", e);
            }
          } else {
            console.warn("\u26A0\uFE0F Input \uC2DC\uD2B8 \uC81C\uAC70 \uC2E4\uD328, \uC6D0\uBCF8 \uD30C\uC77C \uC0AC\uC6A9:", removeResult.error);
            fileBuffer = fs22.readFileSync(file.path);
          }
        } else {
          fileBuffer = fs22.readFileSync(file.path);
        }
        const base64Data = fileBuffer.toString("base64");
        const attachmentData = {
          orderId: order.id,
          originalName: decodedFilename,
          storedName: file.filename,
          filePath: `db://${file.filename}`,
          // Use db:// prefix for database storage
          fileSize: fileBuffer.length,
          mimeType: file.mimetype,
          uploadedBy: userId
        };
        try {
          attachmentData.fileData = base64Data;
          await storage.createAttachment(attachmentData);
        } catch (error) {
          console.warn("Failed to save with fileData, falling back to filesystem path:", error);
          attachmentData.filePath = fileToStore;
          delete attachmentData.fileData;
          await storage.createAttachment(attachmentData);
        }
        if (fileToStore !== file.path && fs22.existsSync(fileToStore)) {
          try {
            fs22.unlinkSync(fileToStore);
          } catch (e) {
            console.warn("\uCC98\uB9AC\uB41C \uC784\uC2DC \uD30C\uC77C \uC0AD\uC81C \uC2E4\uD328:", e);
          }
        }
      }
    }
    try {
      console.log("\u{1F527}\u{1F527}\u{1F527} ORDERS.TS - Generating PROFESSIONAL PDF for order:", order.id);
      const pdfResult = await ProfessionalPDFGenerationService.generateProfessionalPurchaseOrderPDF(
        order.id,
        userId
      );
      if (pdfResult.success) {
        console.log("\u2705 ORDERS.TS - PROFESSIONAL PDF generated successfully:", pdfResult.pdfPath);
        console.log("\u{1F4C4} PDF Attachment ID:", pdfResult.attachmentId);
      } else {
        console.error("\u26A0\uFE0F ORDERS.TS - PROFESSIONAL PDF generation failed:", pdfResult.error);
        console.log("\u{1F504} Attempting fallback to Enhanced PDF...");
        const vendor = orderData.vendorId ? await storage.getVendor(orderData.vendorId) : null;
        const project = await storage.getProject(orderData.projectId);
        const companies3 = await storage.getCompanies();
        const company = companies3 && companies3.length > 0 ? companies3[0] : null;
        const user = await storage.getUser(userId);
        const orderAttachments = await storage.getAttachments(order.id);
        const attachmentCount = orderAttachments?.length || 0;
        const hasAttachments = attachmentCount > 0;
        const enhancedPdfData = {
          // 기본 발주 정보
          orderNumber: order.orderNumber,
          orderDate: order.orderDate,
          deliveryDate: order.deliveryDate,
          status: order.status,
          approvalStatus: order.approvalStatus,
          // 프로젝트/현장 정보
          projectName: project?.name,
          projectCode: project?.code,
          projectAddress: project?.address,
          siteManager: project?.manager,
          siteContact: project?.contactPhone,
          // 거래처 상세 정보
          vendorName: vendor?.name,
          vendorRegistrationNumber: vendor?.registrationNumber,
          vendorRepresentative: vendor?.representative,
          vendorAddress: vendor?.address,
          vendorPhone: vendor?.phone,
          vendorFax: vendor?.fax,
          vendorEmail: vendor?.email,
          vendorContact: vendor?.contactPerson,
          vendorContactPhone: vendor?.contactPhone,
          // 발주업체 상세 정보
          companyName: company?.name,
          companyRegistrationNumber: company?.registrationNumber,
          companyRepresentative: company?.representative,
          companyAddress: company?.address,
          companyPhone: company?.phone,
          companyFax: company?.fax,
          companyEmail: company?.email,
          // 작성자/담당자 정보
          createdBy: userId,
          createdByName: user?.name || user?.username,
          createdByEmail: user?.email,
          createdByPhone: user?.phone,
          createdByPosition: user?.position,
          createdByDepartment: user?.department,
          createdAt: order.createdAt,
          // 수신자 정보
          receiverName: req.body.receiver,
          receiverEmail: req.body.receiverEmail,
          receiverPhone: req.body.receiverPhone,
          managerName: req.body.manager,
          managerEmail: req.body.managerEmail,
          managerPhone: req.body.managerPhone,
          // 품목 정보
          items: items3.map((item) => ({
            category: item.category,
            subCategory1: item.subCategory1,
            subCategory2: item.subCategory2,
            itemCode: item.itemCode,
            name: item.name || item.item,
            specification: item.specification,
            quantity: parseFloat(item.quantity),
            unit: item.unit,
            unitPrice: parseFloat(item.unitPrice),
            price: parseFloat(item.quantity) * parseFloat(item.unitPrice),
            deliveryLocation: item.deliveryLocation,
            remarks: item.remarks
          })),
          // 금액 정보
          subtotalAmount: totalAmount / 1.1,
          // VAT 제외 금액
          taxAmount: totalAmount - totalAmount / 1.1,
          // VAT
          totalAmount,
          // 기타 정보
          notes: orderData.notes,
          paymentTerms: orderData.paymentTerms || "\uC6D4\uB9D0 \uD604\uAE08",
          deliveryTerms: orderData.deliveryTerms || "\uD604\uC7A5 \uC778\uB3C4",
          attachmentCount,
          hasAttachments,
          attachmentNames: orderAttachments?.map((a) => a.originalName) || []
        };
        const fallbackResult = await EnhancedPDFGenerationService.generateEnhancedPurchaseOrderPDF(
          order.id,
          enhancedPdfData,
          userId
        );
        if (fallbackResult.success) {
          console.log("\u2705 ORDERS.TS - Fallback Enhanced PDF generated successfully:", fallbackResult.pdfPath);
        } else {
          console.error("\u26A0\uFE0F ORDERS.TS - Fallback Enhanced PDF also failed:", fallbackResult.error);
        }
      }
    } catch (pdfError) {
      console.error("\u274C ORDERS.TS - Error generating PDF:", pdfError);
    }
    try {
      const approvalContext2 = {
        orderId: order.id,
        orderAmount: totalAmount,
        companyId: 1,
        // Default company ID, should be dynamic based on user's company
        currentUserId: userId,
        currentUserRole: req.user?.role || "field_worker",
        priority: req.body.priority || "medium"
      };
      const approvalRoute = await approval_routing_service_default.determineApprovalRoute(approvalContext2);
      console.log("\u{1F527}\u{1F527}\u{1F527} ORDERS.TS - Approval route determined:", approvalRoute);
      if (approvalRoute.approvalMode === "staged") {
        const approvalInstances = await approval_routing_service_default.createApprovalInstances(
          order.id,
          approvalContext2
        );
        console.log("\u{1F527}\u{1F527}\u{1F527} ORDERS.TS - Created approval instances:", approvalInstances);
      }
      const orderWithApproval = {
        ...order,
        approvalRoute: {
          mode: approvalRoute.approvalMode,
          canDirectApprove: approvalRoute.canDirectApprove,
          reasoning: approvalRoute.reasoning,
          stepsCount: approvalRoute.stagedApprovalSteps?.length || 0
        }
      };
      res.status(201).json(orderWithApproval);
    } catch (approvalError) {
      console.error("\u{1F527}\u{1F527}\u{1F527} ORDERS.TS - Error setting up approval process:", approvalError);
      res.status(201).json({
        ...order,
        approvalRoute: {
          mode: "direct",
          canDirectApprove: false,
          reasoning: "\uC2B9\uC778 \uD504\uB85C\uC138\uC2A4 \uC124\uC815 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD558\uC5EC \uAE30\uBCF8 \uC124\uC815\uC744 \uC0AC\uC6A9\uD569\uB2C8\uB2E4.",
          stepsCount: 0
        }
      });
    }
  } catch (error) {
    console.error("\u{1F527}\u{1F527}\u{1F527} ORDERS.TS - Error creating order:", error);
    res.status(500).json({ message: "Failed to create order" });
  }
});
router3.put("/orders/:id", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.id, 10);
    const updateData = req.body;
    const order = await storage.getPurchaseOrder(orderId);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    if (order.status !== "draft" && order.userId !== req.user?.id) {
      return res.status(403).json({ message: "Cannot edit approved orders" });
    }
    const updatedOrder = await storage.updatePurchaseOrder(orderId, updateData);
    res.json(updatedOrder);
  } catch (error) {
    console.error("Error updating order:", error);
    res.status(500).json({ message: "Failed to update order" });
  }
});
router3.delete("/orders/bulk-delete", requireAuth, async (req, res) => {
  console.log("\u{1F5D1}\uFE0F Bulk delete request received");
  try {
    const { user } = req;
    const { orderIds } = req.body;
    console.log("\u{1F464} User info:", { id: user?.id, role: user?.role, name: user?.name });
    console.log("\u{1F4C4} Request body:", req.body);
    if (user.role !== "admin") {
      console.log("\u274C Access denied: User is not admin");
      return res.status(403).json({
        message: "\uAD00\uB9AC\uC790\uB9CC \uC77C\uAD04 \uC0AD\uC81C\uAC00 \uAC00\uB2A5\uD569\uB2C8\uB2E4."
      });
    }
    if (!orderIds || !Array.isArray(orderIds) || orderIds.length === 0) {
      console.log("\u274C Invalid request: Missing or invalid orderIds");
      return res.status(400).json({
        message: "\uC0AD\uC81C\uD560 \uBC1C\uC8FC\uC11C ID \uBAA9\uB85D\uC774 \uD544\uC694\uD569\uB2C8\uB2E4."
      });
    }
    const numericOrderIds = orderIds.map((id) => {
      const numId = typeof id === "string" ? parseInt(id, 10) : id;
      if (isNaN(numId)) {
        throw new Error(`Invalid order ID: ${id}`);
      }
      return numId;
    });
    console.log(`\u{1F5D1}\uFE0F \uAD00\uB9AC\uC790 \uC77C\uAD04 \uC0AD\uC81C \uC694\uCCAD: ${numericOrderIds.length}\uAC1C \uBC1C\uC8FC\uC11C`, { admin: user.name, orderIds: numericOrderIds });
    console.log("\u{1F50D} Looking up orders for validation...");
    const validOrders = [];
    for (const orderId of numericOrderIds) {
      const order = await storage.getPurchaseOrder(orderId);
      if (order) {
        validOrders.push(order);
      } else {
        console.log(`\u26A0\uFE0F Order not found: ${orderId}`);
      }
    }
    if (validOrders.length === 0) {
      return res.status(404).json({
        message: "\uC0AD\uC81C\uD560 \uC218 \uC788\uB294 \uBC1C\uC8FC\uC11C\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4."
      });
    }
    console.log(`\u{1F5D1}\uFE0F Deleting ${validOrders.length} valid orders...`);
    const deletedOrders = [];
    const failedDeletions = [];
    for (const order of validOrders) {
      try {
        console.log(`\u{1F5D1}\uFE0F Deleting order ${order.id} (${order.orderNumber})`);
        await storage.deletePurchaseOrder(order.id);
        deletedOrders.push(order);
        console.log(`\u2705 Successfully deleted order ${order.id}`);
      } catch (deleteError) {
        console.error(`\u274C Failed to delete order ${order.id}:`, deleteError);
        failedDeletions.push({
          orderId: order.id,
          orderNumber: order.orderNumber,
          error: deleteError instanceof Error ? deleteError.message : "Unknown error"
        });
      }
    }
    console.log(`\u2705 \uC77C\uAD04 \uC0AD\uC81C \uC644\uB8CC: ${deletedOrders.length}\uAC1C \uC131\uACF5, ${failedDeletions.length}\uAC1C \uC2E4\uD328`);
    const response = {
      message: `${deletedOrders.length}\uAC1C\uC758 \uBC1C\uC8FC\uC11C\uAC00 \uC0AD\uC81C\uB418\uC5C8\uC2B5\uB2C8\uB2E4.`,
      deletedCount: deletedOrders.length,
      deletedOrders: deletedOrders.map((o) => ({ id: o.id, orderNumber: o.orderNumber }))
    };
    if (failedDeletions.length > 0) {
      response.partialFailure = true;
      response.failedCount = failedDeletions.length;
      response.failedDeletions = failedDeletions;
      response.message += ` (${failedDeletions.length}\uAC1C\uB294 \uC0AD\uC81C\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.)`;
    }
    res.json(response);
  } catch (error) {
    console.error("\u274C \uC77C\uAD04 \uC0AD\uC81C \uC624\uB958:", error);
    res.status(500).json({
      message: "\uBC1C\uC8FC\uC11C \uC77C\uAD04 \uC0AD\uC81C\uC5D0 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4.",
      error: error instanceof Error ? error.message : "\uC54C \uC218 \uC5C6\uB294 \uC624\uB958",
      stack: process.env.NODE_ENV === "development" ? error instanceof Error ? error.stack : void 0 : void 0
    });
  }
});
router3.delete("/orders/:id", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.id, 10);
    const order = await storage.getPurchaseOrder(orderId);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    if (order.status !== "draft") {
      return res.status(403).json({ message: "Cannot delete submitted orders" });
    }
    await storage.deletePurchaseOrder(orderId);
    res.json({ message: "Order deleted successfully" });
  } catch (error) {
    console.error("Error deleting order:", error);
    res.status(500).json({ message: "Failed to delete order" });
  }
});
router3.post("/orders/:id/approve", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.id, 10);
    const userId = req.user?.id;
    const { comments, stepInstanceId } = req.body;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    if (stepInstanceId) {
      const response = await fetch(`http://localhost:3000/api/approval-settings/step-instances/${stepInstanceId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          "Cookie": req.headers.cookie || ""
        },
        body: JSON.stringify({
          status: "approved",
          comments
        })
      });
      if (!response.ok) {
        throw new Error("Failed to update approval step");
      }
      const isComplete = await approval_routing_service_default.isApprovalComplete(orderId);
      if (isComplete) {
        const result = await OrderService.approveOrder(orderId, userId);
        res.json({
          ...result,
          approvalComplete: true,
          message: "\uBAA8\uB4E0 \uC2B9\uC778 \uB2E8\uACC4\uAC00 \uC644\uB8CC\uB418\uC5B4 \uC8FC\uBB38\uC774 \uC2B9\uC778\uB418\uC5C8\uC2B5\uB2C8\uB2E4."
        });
      } else {
        const nextStep = await approval_routing_service_default.getNextApprovalStep(orderId);
        const progress = await approval_routing_service_default.getApprovalProgress(orderId);
        res.json({
          success: true,
          approvalComplete: false,
          nextStep,
          progress,
          message: `\uC2B9\uC778 \uB2E8\uACC4\uAC00 \uC644\uB8CC\uB418\uC5C8\uC2B5\uB2C8\uB2E4. (${progress.progressPercentage}% \uC644\uB8CC)`
        });
      }
    } else {
      const result = await OrderService.approveOrder(orderId, userId);
      res.json(result);
    }
  } catch (error) {
    console.error("Error approving order:", error);
    res.status(500).json({ message: "Failed to approve order" });
  }
});
router3.get("/orders/:id/approval-progress", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.id, 10);
    const progress = await approval_routing_service_default.getApprovalProgress(orderId);
    res.json(progress);
  } catch (error) {
    console.error("Error getting approval progress:", error);
    res.status(500).json({ message: "Failed to get approval progress" });
  }
});
router3.post("/orders/:id/reject", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.id, 10);
    const { reason } = req.body;
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    const result = await OrderService.rejectOrder(orderId, userId, reason);
    res.json(result);
  } catch (error) {
    console.error("Error rejecting order:", error);
    res.status(500).json({ message: "Failed to reject order" });
  }
});
router3.post("/orders/:id/submit", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.id, 10);
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    const result = await OrderService.submitForApproval(orderId, userId);
    res.json(result);
  } catch (error) {
    console.error("Error submitting order:", error);
    res.status(500).json({ message: "Failed to submit order" });
  }
});
router3.get("/orders/pending-approval", requireAuth, async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    const user = await storage.getUser(userId);
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }
    const orders = await OptimizedOrderQueries.getPendingApprovalOrders(user.role);
    res.json(orders);
  } catch (error) {
    console.error("Error fetching pending orders:", error);
    res.status(500).json({ message: "Failed to fetch pending orders" });
  }
});
router3.get("/orders/stats", async (req, res) => {
  try {
    const stats = await OptimizedDashboardQueries.getOrderStatistics();
    res.json(stats);
  } catch (error) {
    console.error("Error fetching order statistics:", error);
    res.status(500).json({ message: "Failed to fetch order statistics" });
  }
});
router3.post("/orders/test-pdf", async (req, res) => {
  try {
    const testOrderData = {
      orderNumber: "PO-TEST-001",
      projectName: "\uD14C\uC2A4\uD2B8 \uD504\uB85C\uC81D\uD2B8",
      vendorName: "\uD14C\uC2A4\uD2B8 \uAC70\uB798\uCC98",
      totalAmount: 1e6,
      items: [
        {
          name: "\uD14C\uC2A4\uD2B8 \uD488\uBAA9 1",
          quantity: 10,
          unit: "EA",
          unitPrice: 5e4,
          totalAmount: 5e5
        },
        {
          name: "\uD14C\uC2A4\uD2B8 \uD488\uBAA9 2",
          quantity: 5,
          unit: "SET",
          unitPrice: 1e5,
          totalAmount: 5e5
        }
      ],
      notes: "\uD14C\uC2A4\uD2B8\uC6A9 \uBC1C\uC8FC\uC11C\uC785\uB2C8\uB2E4.",
      orderDate: /* @__PURE__ */ new Date(),
      createdBy: "\uD14C\uC2A4\uD2B8 \uC0AC\uC6A9\uC790"
    };
    console.log("\u{1F9EA} [Professional PDF] \uD14C\uC2A4\uD2B8 PDF \uC0DD\uC131 \uC2DC\uC791:", testOrderData.orderNumber);
    req.body = { orderData: testOrderData };
    req.user = { id: "test-user" };
    return await generatePDFLogic(req, res);
  } catch (error) {
    console.error("\u{1F9EA} [Professional PDF] \uD14C\uC2A4\uD2B8 \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      error: "PDF \uD14C\uC2A4\uD2B8 \uC2E4\uD328",
      details: error instanceof Error ? error.message : "\uC54C \uC218 \uC5C6\uB294 \uC624\uB958"
    });
  }
});
async function generatePDFLogic(req, res) {
  try {
    const { orderData, options = {} } = req.body;
    if (!orderData) {
      return res.status(400).json({
        success: false,
        error: "\uBC1C\uC8FC\uC11C \uB370\uC774\uD130\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4."
      });
    }
    const requiredFields = ["orderNumber", "projectName", "vendorName"];
    const missingFields = requiredFields.filter((field) => !orderData[field]);
    if (missingFields.length > 0) {
      console.log(`\u26A0\uFE0F PDF \uC0DD\uC131 \uACBD\uACE0: \uD544\uC218 \uD544\uB4DC \uB204\uB77D - ${missingFields.join(", ")}`);
    }
    console.log(`\u{1F4C4} PDF \uC0DD\uC131 \uC694\uCCAD: \uBC1C\uC8FC\uC11C ${orderData.orderNumber || "N/A"}`);
    console.log("\u{1F4C4} PDF \uC0DD\uC131 \uB370\uC774\uD130:", JSON.stringify(orderData, null, 2));
    const timestamp2 = Date.now();
    const tempDir = process.env.VERCEL ? path5.join("/tmp", "temp-pdf") : path5.join(process.cwd(), "uploads/temp-pdf");
    try {
      if (!fs7.existsSync(tempDir)) {
        fs7.mkdirSync(tempDir, { recursive: true });
        console.log(`\u{1F4C1} \uC784\uC2DC \uB514\uB809\uD1A0\uB9AC \uC0DD\uC131: ${tempDir}`);
      }
    } catch (error) {
      console.error(`\u26A0\uFE0F \uC784\uC2DC \uB514\uB809\uD1A0\uB9AC \uC0DD\uC131 \uC2E4\uD328: ${error}`);
      if (process.env.VERCEL) {
        throw new Error("\u{1F680} Vercel \uD658\uACBD\uC5D0\uC11C /tmp \uB514\uB809\uD1A0\uB9AC \uC811\uADFC \uBD88\uAC00");
      }
      throw error;
    }
    const tempHtmlPath = path5.join(tempDir, `order-${timestamp2}.html`);
    const tempPdfPath = path5.join(tempDir, `order-${timestamp2}.pdf`);
    console.log(`\u{1F4C4} \uC784\uC2DC \uD30C\uC77C \uACBD\uB85C - HTML: ${tempHtmlPath}, PDF: ${tempPdfPath}`);
    try {
      let companyInfo = null;
      try {
        const companies3 = await storage.getCompanies();
        if (companies3 && companies3.length > 0) {
          companyInfo = companies3.find((c) => c.isActive) || companies3[0];
          console.log("\u{1F4C4} \uD68C\uC0AC \uC815\uBCF4 \uC870\uD68C:", companyInfo);
        }
      } catch (error) {
        console.error("\u26A0\uFE0F \uD68C\uC0AC \uC815\uBCF4 \uC870\uD68C \uC2E4\uD328:", error);
      }
      let extractedDeliveryPlace = orderData.deliveryPlace || "";
      let extractedMajorCategory = orderData.majorCategory || "";
      let extractedMiddleCategory = orderData.middleCategory || "";
      let extractedMinorCategory = orderData.minorCategory || "";
      let cleanedNotes = orderData.notes || "";
      if (orderData.notes) {
        const lines = orderData.notes.split("\n");
        const extractedData = [];
        const structuredData = [];
        lines.forEach((line) => {
          const trimmedLine = line.trim();
          if (!trimmedLine) return;
          if (trimmedLine.startsWith("\uB0A9\uD488\uCC98: ")) {
            if (!extractedDeliveryPlace) {
              extractedDeliveryPlace = trimmedLine.replace("\uB0A9\uD488\uCC98: ", "").trim();
            }
          } else if (trimmedLine.startsWith("\uB300\uBD84\uB958: ")) {
            if (!extractedMajorCategory) {
              extractedMajorCategory = trimmedLine.replace("\uB300\uBD84\uB958: ", "").trim();
            }
            structuredData.push(`\uB300\uBD84\uB958: ${trimmedLine.replace("\uB300\uBD84\uB958: ", "").trim()}`);
          } else if (trimmedLine.startsWith("\uC911\uBD84\uB958: ")) {
            if (!extractedMiddleCategory) {
              extractedMiddleCategory = trimmedLine.replace("\uC911\uBD84\uB958: ", "").trim();
            }
            structuredData.push(`\uC911\uBD84\uB958: ${trimmedLine.replace("\uC911\uBD84\uB958: ", "").trim()}`);
          } else if (trimmedLine.startsWith("\uC18C\uBD84\uB958: ")) {
            if (!extractedMinorCategory) {
              extractedMinorCategory = trimmedLine.replace("\uC18C\uBD84\uB958: ", "").trim();
            }
            structuredData.push(`\uC18C\uBD84\uB958: ${trimmedLine.replace("\uC18C\uBD84\uB958: ", "").trim()}`);
          } else if (!trimmedLine.startsWith("\uB0A9\uD488\uCC98 \uC774\uBA54\uC77C: ")) {
            extractedData.push(trimmedLine);
          }
        });
        const allNotes = [];
        if (!orderData.majorCategory && !orderData.middleCategory && !orderData.minorCategory && structuredData.length > 0) {
          allNotes.push(...structuredData);
        }
        if (extractedData.length > 0) {
          allNotes.push(...extractedData);
        }
        cleanedNotes = allNotes.length > 0 ? allNotes.join(" | ") : "";
      }
      let creatorInfo = null;
      if (orderData.createdById || orderData.user?.id) {
        try {
          const userId = orderData.createdById || orderData.user?.id;
          const user = await storage.getUser(userId);
          if (user) {
            creatorInfo = {
              name: user.name || "",
              email: user.email || "",
              phone: user.phone || ""
            };
            console.log("\u{1F4C4} \uBC1C\uC8FC \uC0DD\uC131\uC790 \uC815\uBCF4:", creatorInfo);
          }
        } catch (error) {
          console.error("\u26A0\uFE0F \uC0AC\uC6A9\uC790 \uC815\uBCF4 \uC870\uD68C \uC2E4\uD328:", error);
        }
      }
      const safeOrderData = {
        // Company info (발주업체)
        companyName: companyInfo?.companyName || "(\uC8FC)\uC775\uC9C4\uC5D4\uC9C0\uB2C8\uC5B4\uB9C1",
        companyBusinessNumber: companyInfo?.businessNumber || "",
        companyAddress: companyInfo?.address || "",
        // Use creator's info for contact person details
        companyPhone: creatorInfo?.phone || companyInfo?.phone || "",
        companyEmail: creatorInfo?.email || companyInfo?.email || "",
        companyContactPerson: creatorInfo?.name || orderData.createdBy || orderData.user?.name || "\uC2DC\uC2A4\uD15C",
        // Order info
        orderNumber: orderData.orderNumber || "PO-TEMP-001",
        projectName: orderData.projectName || orderData.project?.projectName || "\uD604\uC7A5 \uBBF8\uC9C0\uC815",
        vendorName: orderData.vendorName || orderData.vendor?.name || "\uAC70\uB798\uCC98 \uBBF8\uC9C0\uC815",
        vendorBusinessNumber: orderData.vendor?.businessNumber || orderData.vendorBusinessNumber || "",
        vendorPhone: orderData.vendor?.phone || orderData.vendorPhone || "",
        vendorEmail: orderData.vendor?.email || orderData.vendorEmail || "",
        vendorAddress: orderData.vendor?.address || orderData.vendorAddress || "",
        vendorContactPerson: orderData.vendor?.contactPerson || orderData.vendorContactPerson || "",
        totalAmount: Number(orderData.totalAmount) || 0,
        items: Array.isArray(orderData.items) ? orderData.items : [],
        notes: cleanedNotes,
        orderDate: orderData.orderDate || (/* @__PURE__ */ new Date()).toISOString(),
        deliveryDate: orderData.deliveryDate || null,
        deliveryPlace: extractedDeliveryPlace,
        createdBy: orderData.createdBy || orderData.user?.name || "\uC2DC\uC2A4\uD15C",
        createdAt: orderData.createdAt || (/* @__PURE__ */ new Date()).toISOString(),
        status: orderData.status || "draft",
        approvedBy: orderData.approvedBy || "",
        approvedAt: orderData.approvedAt || null,
        paymentTerms: orderData.paymentTerms || "",
        deliveryMethod: orderData.deliveryMethod || "",
        majorCategory: extractedMajorCategory,
        middleCategory: extractedMiddleCategory,
        minorCategory: extractedMinorCategory
      };
      const orderHtml = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>\uBC1C\uC8FC\uC11C - ${safeOrderData.orderNumber}</title>
  <style>
    @page {
      size: A4;
      margin: 15mm 10mm;
    }
    body {
      font-family: 'Noto Sans KR', 'Malgun Gothic', '\uB9D1\uC740 \uACE0\uB515', sans-serif;
      margin: 0;
      padding: 0;
      line-height: 1.4;
      color: #333;
      font-size: 11px;
    }
    .header {
      text-align: center;
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 2px solid #3B82F6;
    }
    .header h1 {
      color: #1F2937;
      margin: 0;
      font-size: 24px;
      font-weight: bold;
    }
    .header .subtitle {
      margin: 5px 0 0 0;
      color: #6B7280;
      font-size: 12px;
    }
    .company-vendor-section {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
      margin-bottom: 15px;
    }
    .company-box, .vendor-box {
      border: 1px solid #D1D5DB;
      border-radius: 6px;
      padding: 10px;
      background-color: #F9FAFB;
    }
    .box-title {
      font-weight: bold;
      color: #1F2937;
      font-size: 12px;
      margin-bottom: 8px;
      padding-bottom: 5px;
      border-bottom: 1px solid #E5E7EB;
    }
    .info-grid {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr;
      gap: 8px;
      margin-bottom: 15px;
    }
    .info-grid.two-col {
      grid-template-columns: 1fr 1fr;
    }
    .info-item {
      padding: 6px 8px;
      border: 1px solid #E5E7EB;
      border-radius: 4px;
      background-color: #FFFFFF;
    }
    .info-label {
      font-weight: bold;
      color: #6B7280;
      margin-bottom: 2px;
      font-size: 9px;
    }
    .info-value {
      color: #1F2937;
      font-size: 11px;
      word-break: break-all;
    }
    .compact-info {
      display: flex;
      align-items: baseline;
      gap: 5px;
    }
    .compact-label {
      font-weight: bold;
      color: #6B7280;
      font-size: 9px;
    }
    .compact-value {
      color: #1F2937;
      font-size: 10px;
    }
    .section-title {
      color: #374151;
      border-bottom: 1px solid #D1D5DB;
      padding-bottom: 5px;
      margin: 15px 0 10px 0;
      font-size: 13px;
      font-weight: bold;
    }
    .items-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
      font-size: 10px;
    }
    .items-table th,
    .items-table td {
      border: 1px solid #D1D5DB;
      padding: 4px 6px;
      text-align: left;
    }
    .items-table th {
      background-color: #F3F4F6;
      font-weight: bold;
      color: #374151;
      text-align: center;
      font-size: 9px;
    }
    .items-table tbody tr:nth-child(even) {
      background-color: #F9FAFB;
    }
    .items-table .number-cell {
      text-align: center;
    }
    .items-table .amount-cell {
      text-align: right;
    }
    .total-row {
      background-color: #EEF2FF !important;
      font-weight: bold;
    }
    .notes-section {
      margin-top: 15px;
      padding: 10px;
      background-color: #F3F4F6;
      border-radius: 4px;
    }
    .notes-title {
      margin-top: 0;
      color: #374151;
      font-size: 11px;
      font-weight: bold;
    }
    .notes-content {
      margin: 5px 0 0 0;
      color: #6B7280;
      line-height: 1.4;
      font-size: 10px;
    }
    .footer {
      margin-top: 40px;
      text-align: center;
      color: #9CA3AF;
      font-size: 10px;
      border-top: 1px solid #E5E7EB;
      padding-top: 15px;
    }
    .watermark {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) rotate(-45deg);
      font-size: 80px;
      color: rgba(59, 130, 246, 0.08);
      z-index: -1;
      pointer-events: none;
      font-weight: bold;
    }
    .empty-state {
      text-align: center;
      color: #6B7280;
      font-style: italic;
      padding: 20px;
    }
  </style>
</head>
<body>
  <div class="watermark">\uBC1C\uC8FC\uC11C</div>
  
  <div class="header">
    <h1>\uAD6C\uB9E4 \uBC1C\uC8FC\uC11C</h1>
    <p class="subtitle">Purchase Order</p>
  </div>

  <!-- \uBC1C\uC8FC\uC5C5\uCCB4 \uBC0F \uAC70\uB798\uCC98 \uC815\uBCF4 (\uC88C\uC6B0 \uBC30\uCE58) -->
  <div class="company-vendor-section">
    <!-- \uBC1C\uC8FC\uC5C5\uCCB4 \uC815\uBCF4 -->
    <div class="company-box">
      <div class="box-title">\uBC1C\uC8FC\uC5C5\uCCB4</div>
      <div class="compact-info">
        <span class="compact-label">\uC5C5\uCCB4\uBA85:</span>
        <span class="compact-value" style="font-weight: bold;">${safeOrderData.companyName}</span>
      </div>
      ${safeOrderData.companyBusinessNumber ? `
      <div class="compact-info">
        <span class="compact-label">\uC0AC\uC5C5\uC790\uBC88\uD638:</span>
        <span class="compact-value">${safeOrderData.companyBusinessNumber}</span>
      </div>
      ` : ""}
      ${safeOrderData.companyContactPerson ? `
      <div class="compact-info">
        <span class="compact-label">\uB2F4\uB2F9\uC790:</span>
        <span class="compact-value">${safeOrderData.companyContactPerson}</span>
      </div>
      ` : ""}
      ${safeOrderData.companyPhone ? `
      <div class="compact-info">
        <span class="compact-label">\uC5F0\uB77D\uCC98:</span>
        <span class="compact-value">${safeOrderData.companyPhone}</span>
      </div>
      ` : ""}
      ${safeOrderData.companyEmail ? `
      <div class="compact-info">
        <span class="compact-label">\uC774\uBA54\uC77C:</span>
        <span class="compact-value">${safeOrderData.companyEmail}</span>
      </div>
      ` : ""}
      ${safeOrderData.companyAddress ? `
      <div class="compact-info">
        <span class="compact-label">\uC8FC\uC18C:</span>
        <span class="compact-value">${safeOrderData.companyAddress}</span>
      </div>
      ` : ""}
    </div>

    <!-- \uAC70\uB798\uCC98 \uC815\uBCF4 -->
    <div class="vendor-box">
      <div class="box-title">\uAC70\uB798\uCC98</div>
      <div class="compact-info">
        <span class="compact-label">\uC5C5\uCCB4\uBA85:</span>
        <span class="compact-value" style="font-weight: bold;">${safeOrderData.vendorName}</span>
      </div>
      ${safeOrderData.vendorBusinessNumber ? `
      <div class="compact-info">
        <span class="compact-label">\uC0AC\uC5C5\uC790\uBC88\uD638:</span>
        <span class="compact-value">${safeOrderData.vendorBusinessNumber}</span>
      </div>
      ` : ""}
      ${safeOrderData.vendorContactPerson ? `
      <div class="compact-info">
        <span class="compact-label">\uB2F4\uB2F9\uC790:</span>
        <span class="compact-value">${safeOrderData.vendorContactPerson}</span>
      </div>
      ` : ""}
      ${safeOrderData.vendorPhone ? `
      <div class="compact-info">
        <span class="compact-label">\uC5F0\uB77D\uCC98:</span>
        <span class="compact-value">${safeOrderData.vendorPhone}</span>
      </div>
      ` : ""}
      ${safeOrderData.vendorEmail ? `
      <div class="compact-info">
        <span class="compact-label">\uC774\uBA54\uC77C:</span>
        <span class="compact-value">${safeOrderData.vendorEmail}</span>
      </div>
      ` : ""}
      ${safeOrderData.vendorAddress ? `
      <div class="compact-info">
        <span class="compact-label">\uC8FC\uC18C:</span>
        <span class="compact-value">${safeOrderData.vendorAddress}</span>
      </div>
      ` : ""}
    </div>
  </div>

  <!-- \uBC1C\uC8FC \uC815\uBCF4 (\uCEF4\uD329\uD2B8\uD55C \uADF8\uB9AC\uB4DC) -->
  <div class="info-grid">
    <div class="info-item">
      <div class="info-label">\uBC1C\uC8FC\uC11C \uBC88\uD638</div>
      <div class="info-value">${safeOrderData.orderNumber}</div>
    </div>
    <div class="info-item">
      <div class="info-label">\uBC1C\uC8FC\uC77C</div>
      <div class="info-value">${new Date(safeOrderData.orderDate).toLocaleDateString("ko-KR")}</div>
    </div>
    <div class="info-item">
      <div class="info-label">\uD604\uC7A5</div>
      <div class="info-value">${safeOrderData.projectName}</div>
    </div>
    <div class="info-item">
      <div class="info-label">\uB0A9\uAE30\uC77C</div>
      <div class="info-value">${safeOrderData.deliveryDate ? new Date(safeOrderData.deliveryDate).toLocaleDateString("ko-KR") : "\uBBF8\uC815"}</div>
    </div>
    <div class="info-item">
      <div class="info-label">\uB0A9\uD488\uC7A5\uC18C</div>
      <div class="info-value">${safeOrderData.deliveryPlace || "\uBBF8\uC815"}</div>
    </div>
    <div class="info-item">
      <div class="info-label">\uC791\uC131\uC790</div>
      <div class="info-value">${safeOrderData.createdBy}</div>
    </div>
  </div>

  ${safeOrderData.majorCategory || safeOrderData.middleCategory || safeOrderData.minorCategory ? `
  <h3 class="section-title">\uBD84\uB958 \uC815\uBCF4</h3>
  <div class="info-grid">
    ${safeOrderData.majorCategory ? `
    <div class="info-item">
      <div class="info-label">\uB300\uBD84\uB958</div>
      <div class="info-value">${safeOrderData.majorCategory}</div>
    </div>
    ` : ""}
    ${safeOrderData.middleCategory ? `
    <div class="info-item">
      <div class="info-label">\uC911\uBD84\uB958</div>
      <div class="info-value">${safeOrderData.middleCategory}</div>
    </div>
    ` : ""}
    ${safeOrderData.minorCategory ? `
    <div class="info-item">
      <div class="info-label">\uC18C\uBD84\uB958</div>
      <div class="info-value">${safeOrderData.minorCategory}</div>
    </div>
    ` : ""}
  </div>
  ` : ""}

  <h3 class="section-title">\uBC1C\uC8FC \uD488\uBAA9</h3>
  
  <table class="items-table">
    <thead>
      <tr>
        <th style="width: 50px;">\uC21C\uBC88</th>
        <th>\uD488\uBAA9\uBA85</th>
        <th>\uADDC\uACA9</th>
        <th style="width: 80px;">\uC218\uB7C9</th>
        <th style="width: 60px;">\uB2E8\uC704</th>
        <th style="width: 120px;">\uB2E8\uAC00</th>
        <th style="width: 120px;">\uAE08\uC561</th>
      </tr>
    </thead>
    <tbody>
      ${safeOrderData.items.length > 0 ? safeOrderData.items.map((item, index2) => `
          <tr>
            <td class="number-cell">${index2 + 1}</td>
            <td>${item.name || item.itemName || item.item_name || "\uD488\uBAA9\uBA85 \uC5C6\uC74C"}</td>
            <td>${item.specification || "-"}</td>
            <td class="amount-cell">${(item.quantity || 0).toLocaleString()}</td>
            <td class="number-cell">${item.unit || "EA"}</td>
            <td class="amount-cell">\u20A9${(item.unitPrice || item.unit_price || 0).toLocaleString()}</td>
            <td class="amount-cell">\u20A9${(item.totalAmount || item.total_amount || (item.quantity || 0) * (item.unitPrice || item.unit_price || 0)).toLocaleString()}</td>
          </tr>
        `).join("") : '<tr><td colspan="7" class="empty-state">\uD488\uBAA9 \uC815\uBCF4\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4.</td></tr>'}
      <tr class="total-row">
        <td colspan="6" class="amount-cell" style="font-weight: bold;">\uCD1D \uAE08\uC561</td>
        <td class="amount-cell" style="font-weight: bold;">\u20A9${safeOrderData.totalAmount.toLocaleString()}</td>
      </tr>
    </tbody>
  </table>

  ${safeOrderData.notes ? `
  <div class="notes-section">
    <h4 class="notes-title">\uBE44\uACE0</h4>
    <div class="notes-content">${safeOrderData.notes.replace(/\|/g, '<span style="color: #D1D5DB; margin: 0 8px;">|</span>')}</div>
  </div>
  ` : ""}

  <div class="footer">
    \uC774 \uBB38\uC11C\uB294 \uC2DC\uC2A4\uD15C\uC5D0\uC11C \uC790\uB3D9 \uC0DD\uC131\uB418\uC5C8\uC2B5\uB2C8\uB2E4.<br>
    \uC0DD\uC131\uC77C\uC2DC: ${(/* @__PURE__ */ new Date()).toLocaleString("ko-KR")} | \uBB38\uC11C ID: ${timestamp2}
  </div>
</body>
</html>
      `;
      try {
        fs7.writeFileSync(tempHtmlPath, orderHtml, "utf8");
        console.log(`\u2705 HTML \uD30C\uC77C \uC0DD\uC131 \uC644\uB8CC: ${tempHtmlPath}`);
      } catch (writeError) {
        throw new Error(`HTML \uD30C\uC77C \uC0DD\uC131 \uC2E4\uD328: ${writeError.message}`);
      }
      const isServerless = !!(process.env.VERCEL || process.env.AWS_LAMBDA_FUNCTION_NAME || process.env.NETLIFY);
      if (isServerless) {
        console.log("\u{1F680} Serverless \uD658\uACBD \uAC10\uC9C0 - HTML \uAE30\uBC18 PDF \uC0DD\uC131");
        const htmlForPdf = orderHtml.replace(
          "</head>",
          `<script>
            function generatePDF() {
              window.print();
            }
            window.onload = function() {
              if (window.location.search.includes('print=true')) {
                setTimeout(generatePDF, 1000);
              }
            };
          </script>
          </head>`
        );
        fs7.writeFileSync(tempPdfPath.replace(".pdf", ".html"), htmlForPdf);
        console.log("\u2705 HTML \uD30C\uC77C \uC0DD\uC131 \uC644\uB8CC (\uD074\uB77C\uC774\uC5B8\uD2B8 PDF \uBCC0\uD658\uC6A9)");
        fs7.writeFileSync(tempPdfPath, "PDF generation pending - use browser print");
      } else {
        let browser = null;
        try {
          console.log("\u{1F680} Playwright \uBE0C\uB77C\uC6B0\uC800 \uC2DC\uC791...");
          const { chromium: chromium2 } = await import("playwright-chromium");
          browser = await chromium2.launch({
            headless: true,
            args: [
              "--no-sandbox",
              "--disable-setuid-sandbox",
              "--disable-dev-shm-usage",
              "--disable-accelerated-2d-canvas",
              "--no-first-run",
              "--no-zygote",
              "--disable-gpu",
              "--disable-background-timer-throttling",
              "--disable-backgrounding-occluded-windows",
              "--disable-renderer-backgrounding"
            ],
            timeout: 6e4
            // 1 minute timeout
          });
          const page = await browser.newPage();
          await page.setViewportSize({ width: 1200, height: 1600 });
          await page.emulateMedia({ media: "print" });
          console.log("\u{1F4C4} HTML \uCF58\uD150\uCE20 \uB85C\uB529...");
          await page.setContent(orderHtml, {
            waitUntil: "networkidle",
            timeout: 3e4
          });
          console.log("\u{1F4C4} PDF \uC0DD\uC131 \uC911...");
          await page.pdf({
            path: tempPdfPath,
            format: "A4",
            landscape: false,
            printBackground: true,
            preferCSSPageSize: true,
            margin: {
              top: "20mm",
              bottom: "20mm",
              left: "15mm",
              right: "15mm"
            }
          });
          console.log("\u2705 PDF \uC0DD\uC131 \uC644\uB8CC");
        } catch (playwrightError) {
          console.error("\u274C Playwright \uC624\uB958:", playwrightError);
          throw new Error(`PDF \uC0DD\uC131 \uC2E4\uD328: ${playwrightError.message}`);
        } finally {
          if (browser) {
            await browser.close();
            console.log("\u{1F512} Playwright \uBE0C\uB77C\uC6B0\uC800 \uC885\uB8CC");
          }
        }
      }
      if (!fs7.existsSync(tempPdfPath)) {
        throw new Error("PDF \uD30C\uC77C\uC774 \uC0DD\uC131\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4.");
      }
      const stats = fs7.statSync(tempPdfPath);
      if (stats.size === 0) {
        throw new Error("PDF \uD30C\uC77C\uC774 \uBE44\uC5B4\uC788\uC2B5\uB2C8\uB2E4.");
      }
      console.log(`\u{1F4CA} PDF \uD30C\uC77C \uD06C\uAE30: ${(stats.size / 1024).toFixed(2)} KB`);
      const pdfUrl = `/api/orders/download-pdf/${timestamp2}`;
      console.log(`\u2705 PDF \uC0DD\uC131 \uC644\uB8CC: ${pdfUrl}`);
      try {
        if (fs7.existsSync(tempHtmlPath)) {
          fs7.unlinkSync(tempHtmlPath);
        }
      } catch (cleanupError) {
        console.warn("\u26A0\uFE0F HTML \uD30C\uC77C \uC815\uB9AC \uC2E4\uD328:", cleanupError.message);
      }
      setTimeout(() => {
        try {
          if (fs7.existsSync(tempPdfPath)) {
            fs7.unlinkSync(tempPdfPath);
            console.log(`\u{1F5D1}\uFE0F \uC784\uC2DC PDF \uD30C\uC77C \uC815\uB9AC \uC644\uB8CC: ${tempPdfPath}`);
          }
        } catch (cleanupError) {
          console.warn("\u26A0\uFE0F PDF \uD30C\uC77C \uC815\uB9AC \uC2E4\uD328:", cleanupError.message);
        }
      }, 60 * 60 * 1e3);
      res.json({
        success: true,
        pdfUrl,
        message: "PDF\uAC00 \uC131\uACF5\uC801\uC73C\uB85C \uC0DD\uC131\uB418\uC5C8\uC2B5\uB2C8\uB2E4.",
        fileSize: stats.size
      });
    } catch (conversionError) {
      console.error("\u274C PDF \uBCC0\uD658 \uC624\uB958:", conversionError);
      try {
        if (fs7.existsSync(tempHtmlPath)) fs7.unlinkSync(tempHtmlPath);
        if (fs7.existsSync(tempPdfPath)) fs7.unlinkSync(tempPdfPath);
      } catch (cleanupError) {
        console.warn("\u26A0\uFE0F \uC784\uC2DC \uD30C\uC77C \uC815\uB9AC \uC2E4\uD328:", cleanupError.message);
      }
      res.status(500).json({
        success: false,
        error: "PDF \uC0DD\uC131 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
        details: conversionError instanceof Error ? conversionError.message : "\uC54C \uC218 \uC5C6\uB294 \uC624\uB958"
      });
    }
  } catch (error) {
    console.error("\u274C PDF \uC0DD\uC131 API \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      error: "PDF \uC0DD\uC131\uC5D0 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4.",
      details: error instanceof Error ? error.message : "\uC54C \uC218 \uC5C6\uB294 \uC624\uB958"
    });
  }
}
router3.post("/orders/generate-pdf", requireAuth, async (req, res) => {
  return await generatePDFLogic(req, res);
});
router3.post("/orders/:id/regenerate-pdf", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.id);
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    const [order] = await db.select().from(purchaseOrders).where(eq10(purchaseOrders.id, orderId)).limit(1);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    console.log(`\u{1F4C4} [Regenerate PDF] Starting PROFESSIONAL PDF regeneration for Order ID ${orderId}`);
    const result = await ProfessionalPDFGenerationService.generateProfessionalPurchaseOrderPDF(
      orderId,
      userId
    );
    if (!result.success) {
      console.error(`\u274C [Regenerate PDF] Professional PDF generation failed`);
      return res.status(500).json({
        success: false,
        message: "PDF \uC7AC\uC0DD\uC131 \uC2E4\uD328",
        error: result.error || "PDF \uC0DD\uC131 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
      });
    }
    console.log(`\u2705 [Regenerate PDF] PROFESSIONAL PDF generated successfully`);
    res.json({
      success: true,
      message: "\uC804\uBB38\uC801 PDF\uAC00 \uC131\uACF5\uC801\uC73C\uB85C \uC7AC\uC0DD\uC131\uB418\uC5B4 \uC800\uC7A5\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
      attachmentId: result.attachmentId,
      pdfPath: result.pdfPath,
      downloadUrl: `/api/attachments/${result.attachmentId}`
    });
  } catch (error) {
    console.error("PDF regeneration error:", error);
    res.status(500).json({
      success: false,
      message: "PDF \uC7AC\uC0DD\uC131 \uC911 \uC624\uB958 \uBC1C\uC0DD",
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router3.post("/orders/:id/generate-professional-pdf", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.id);
    const userId = req.user?.id;
    console.log(`\u{1F4C4} [Professional PDF] \uC804\uBB38\uC801 PDF \uC0DD\uC131 \uC694\uCCAD: Order ID ${orderId}, User ID ${userId}`);
    if (!userId) {
      return res.status(401).json({
        success: false,
        message: "\uC0AC\uC6A9\uC790 \uC778\uC99D\uC774 \uD544\uC694\uD569\uB2C8\uB2E4"
      });
    }
    const result = await ProfessionalPDFGenerationService.generateProfessionalPurchaseOrderPDF(
      orderId,
      userId
    );
    if (result.success) {
      console.log(`\u2705 [Professional PDF] PDF \uC0DD\uC131 \uC131\uACF5: ${result.pdfPath}`);
      res.json({
        success: true,
        message: "\uC804\uBB38\uC801 \uBC1C\uC8FC\uC11C PDF\uAC00 \uC131\uACF5\uC801\uC73C\uB85C \uC0DD\uC131\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
        attachmentId: result.attachmentId,
        pdfPath: result.pdfPath,
        downloadUrl: `/api/attachments/${result.attachmentId}`
      });
    } else {
      console.error(`\u274C [Professional PDF] PDF \uC0DD\uC131 \uC2E4\uD328: ${result.error}`);
      res.status(500).json({
        success: false,
        message: "\uC804\uBB38\uC801 PDF \uC0DD\uC131\uC5D0 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4",
        error: result.error
      });
    }
  } catch (error) {
    console.error("\u274C [Professional PDF] \uC11C\uBC84 \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      message: "\uC11C\uBC84 \uC624\uB958\uB85C \uC778\uD55C PDF \uC0DD\uC131 \uC2E4\uD328",
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
if (process.env.NODE_ENV === "development") {
  router3.post("/orders/test-professional-pdf", async (req, res) => {
    try {
      console.log("\u{1F9EA} [Professional PDF] \uD14C\uC2A4\uD2B8 PDF \uC0DD\uC131 \uC2DC\uC791");
      const { orderId = 1, userId = "test-user" } = req.body;
      const result = await ProfessionalPDFGenerationService.generateProfessionalPurchaseOrderPDF(
        orderId,
        userId
      );
      if (result.success) {
        console.log(`\u2705 [Professional PDF] \uD14C\uC2A4\uD2B8 PDF \uC0DD\uC131 \uC131\uACF5`);
        res.json({
          success: true,
          message: "\uD14C\uC2A4\uD2B8 \uC804\uBB38\uC801 PDF \uC0DD\uC131 \uC644\uB8CC",
          attachmentId: result.attachmentId,
          pdfPath: result.pdfPath,
          fileSize: result.pdfBuffer?.length || 0,
          downloadUrl: `/api/attachments/${result.attachmentId}`
        });
      } else {
        console.error(`\u274C [Professional PDF] \uD14C\uC2A4\uD2B8 PDF \uC0DD\uC131 \uC2E4\uD328: ${result.error}`);
        res.status(500).json({
          success: false,
          message: "\uD14C\uC2A4\uD2B8 PDF \uC0DD\uC131 \uC2E4\uD328",
          error: result.error
        });
      }
    } catch (error) {
      console.error("\u274C [Professional PDF] \uD14C\uC2A4\uD2B8 \uC624\uB958:", error);
      res.status(500).json({
        success: false,
        message: "\uD14C\uC2A4\uD2B8 PDF \uC0DD\uC131 \uC911 \uC624\uB958 \uBC1C\uC0DD",
        error: error instanceof Error ? error.message : "Unknown error"
      });
    }
  });
  console.log("\u{1F9EA} Development mode: Professional PDF test endpoint available at /api/orders/test-professional-pdf");
}
if (process.env.NODE_ENV === "development") {
  console.log("\u{1F9EA} Development mode: PDF test endpoint available at /api/orders/test-pdf");
} else {
  router3.all("/orders/test-pdf", (req, res) => {
    res.status(404).json({ error: "Test endpoint not available in production" });
  });
}
router3.get("/orders/download-pdf/:timestamp", async (req, res) => {
  try {
    const { timestamp: timestamp2 } = req.params;
    const { download } = req.query;
    console.log(`\u{1F4C4} PDF \uB2E4\uC6B4\uB85C\uB4DC \uC694\uCCAD: timestamp=${timestamp2}, download=${download}`);
    if (process.env.VERCEL) {
      try {
        const dbPath = `db://pdf-${timestamp2}`;
        console.log(`\u{1F4C4} \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uC5D0\uC11C PDF \uC870\uD68C: ${dbPath}`);
        const attachment = await storage.getAttachmentByPath(dbPath);
        if (attachment && attachment.fileData) {
          console.log(`\u{1F4C4} \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uC5D0\uC11C PDF \uBC1C\uACAC: ${attachment.originalName} (\uD06C\uAE30: ${attachment.fileSize} bytes)`);
          const pdfBuffer = Buffer.from(attachment.fileData, "base64");
          console.log(`\u{1F4C4} PDF \uBC84\uD37C \uC0DD\uC131 \uC644\uB8CC: ${pdfBuffer.length} bytes`);
          res.setHeader("Access-Control-Allow-Origin", "*");
          res.setHeader("Access-Control-Allow-Methods", "GET");
          res.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
          res.setHeader("X-Frame-Options", "SAMEORIGIN");
          res.setHeader("Content-Type", "application/pdf");
          res.setHeader("Content-Length", pdfBuffer.length.toString());
          if (download === "true") {
            res.setHeader("Content-Disposition", `attachment; filename*=UTF-8''${encodeURIComponent("\uBC1C\uC8FC\uC11C.pdf")}`);
          } else {
            res.setHeader("Content-Disposition", `inline; filename*=UTF-8''${encodeURIComponent("\uBC1C\uC8FC\uC11C.pdf")}`);
            res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
            res.setHeader("Pragma", "no-cache");
            res.setHeader("Expires", "0");
          }
          res.send(pdfBuffer);
          return;
        } else {
          console.log(`\u{1F4C4} \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uC5D0\uC11C PDF \uCC3E\uC9C0 \uBABB\uD568: ${dbPath}`);
        }
      } catch (dbError) {
        console.error("\u274C \uB370\uC774\uD130\uBCA0\uC774\uC2A4 PDF \uC870\uD68C \uC624\uB958:", dbError);
      }
    }
    const basePath = process.env.VERCEL ? path5.join("/tmp", "temp-pdf", `order-${timestamp2}`) : path5.join(process.cwd(), "uploads/temp-pdf", `order-${timestamp2}`);
    const pdfPath = `${basePath}.pdf`;
    const htmlPath = `${basePath}.html`;
    console.log(`\u{1F4C4} \uD30C\uC77C \uC2DC\uC2A4\uD15C\uC5D0\uC11C \uD30C\uC77C \uC694\uCCAD: ${basePath}.*`);
    console.log(`\u{1F4C4} PDF \uC874\uC7AC: ${fs7.existsSync(pdfPath)}, HTML \uC874\uC7AC: ${fs7.existsSync(htmlPath)}`);
    if (process.env.VERCEL && !fs7.existsSync(pdfPath) && fs7.existsSync(htmlPath)) {
      const htmlContent = fs7.readFileSync(htmlPath, "utf-8");
      res.setHeader("Content-Type", "text/html; charset=utf-8");
      res.setHeader("Cache-Control", "no-cache");
      if (download === "true") {
        res.setHeader("Content-Disposition", `attachment; filename="order-${timestamp2}.html"`);
      }
      res.send(htmlContent);
      return;
    }
    if (fs7.existsSync(pdfPath)) {
      try {
        const stat = fs7.statSync(pdfPath);
        console.log(`\u{1F4CA} PDF \uD30C\uC77C \uC815\uBCF4: \uD06C\uAE30 ${(stat.size / 1024).toFixed(2)} KB`);
        res.setHeader("Access-Control-Allow-Origin", "*");
        res.setHeader("Access-Control-Allow-Methods", "GET");
        res.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        res.setHeader("X-Frame-Options", "SAMEORIGIN");
        if (download === "true") {
          console.log("\u{1F4E5} \uB2E4\uC6B4\uB85C\uB4DC \uBAA8\uB4DC\uB85C PDF \uC81C\uACF5");
          res.setHeader("Content-Disposition", `attachment; filename*=UTF-8''${encodeURIComponent("\uBC1C\uC8FC\uC11C.pdf")}`);
          res.setHeader("Content-Type", "application/pdf");
          res.setHeader("Content-Length", stat.size.toString());
          const downloadStream = fs7.createReadStream(pdfPath);
          downloadStream.on("error", (error) => {
            console.error("\u274C PDF \uB2E4\uC6B4\uB85C\uB4DC \uC2A4\uD2B8\uB9BC \uC624\uB958:", error);
            if (!res.headersSent) {
              res.status(500).json({ error: "PDF \uC77D\uAE30 \uC2E4\uD328" });
            }
          });
          downloadStream.pipe(res);
        } else {
          console.log("\u{1F441}\uFE0F \uBBF8\uB9AC\uBCF4\uAE30 \uBAA8\uB4DC\uB85C PDF \uC81C\uACF5");
          res.setHeader("Content-Type", "application/pdf");
          res.setHeader("Content-Disposition", `inline; filename*=UTF-8''${encodeURIComponent("\uBC1C\uC8FC\uC11C.pdf")}`);
          res.setHeader("Content-Length", stat.size.toString());
          res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
          res.setHeader("Pragma", "no-cache");
          res.setHeader("Expires", "0");
          const pdfStream = fs7.createReadStream(pdfPath);
          pdfStream.on("error", (error) => {
            console.error("\u274C PDF \uC2A4\uD2B8\uB9BC \uC624\uB958:", error);
            if (!res.headersSent) {
              res.status(500).json({
                success: false,
                error: "PDF \uC77D\uAE30 \uC2E4\uD328",
                details: error.message
              });
            }
          });
          pdfStream.on("open", () => {
            console.log("\u2705 PDF \uC2A4\uD2B8\uB9BC \uC2DC\uC791");
          });
          pdfStream.on("end", () => {
            console.log("\u2705 PDF \uC2A4\uD2B8\uB9BC \uC644\uB8CC");
          });
          pdfStream.pipe(res);
        }
      } catch (statError) {
        console.error("\u274C PDF \uD30C\uC77C \uC0C1\uD0DC \uD655\uC778 \uC624\uB958:", statError);
        res.status(500).json({
          success: false,
          error: "PDF \uD30C\uC77C \uC815\uBCF4\uB97C \uC77D\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
          details: statError.message
        });
      }
    } else {
      console.warn(`\u26A0\uFE0F PDF \uD30C\uC77C \uC5C6\uC74C: ${pdfPath}`);
      res.status(404).json({
        success: false,
        error: "PDF \uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
        details: "\uD30C\uC77C\uC774 \uC0AD\uC81C\uB418\uC5C8\uAC70\uB098 \uC0DD\uC131\uB418\uC9C0 \uC54A\uC558\uC744 \uC218 \uC788\uC2B5\uB2C8\uB2E4."
      });
    }
  } catch (error) {
    console.error("\u274C PDF \uB2E4\uC6B4\uB85C\uB4DC \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      error: "PDF \uB2E4\uC6B4\uB85C\uB4DC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
      details: error instanceof Error ? error.message : "\uC54C \uC218 \uC5C6\uB294 \uC624\uB958"
    });
  }
});
router3.post("/orders/send-email", requireAuth, async (req, res) => {
  try {
    const {
      orderData,
      pdfUrl,
      excelUrl,
      recipients,
      emailSettings: emailSettings2,
      to,
      cc,
      bcc,
      subject,
      message,
      attachPdf = true,
      attachExcel = false,
      selectedAttachments = []
      // NEW: Handle selectedAttachments from frontend
    } = req.body;
    console.log("\u{1F4E7} \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC694\uCCAD:", {
      orderData,
      pdfUrl,
      excelUrl,
      recipients,
      to,
      cc,
      bcc,
      subject,
      message,
      attachPdf,
      attachExcel,
      selectedAttachments
    });
    const recipientEmails = recipients || to;
    if (!recipientEmails || recipientEmails.length === 0) {
      return res.status(400).json({ error: "\uC218\uC2E0\uC790\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4." });
    }
    const emailOptions = {
      to: recipientEmails,
      cc: cc || emailSettings2?.cc,
      subject: subject || emailSettings2?.subject || `\uBC1C\uC8FC\uC11C - ${orderData.orderNumber || ""}`,
      orderNumber: orderData.orderNumber,
      vendorName: orderData.vendorName,
      totalAmount: orderData.totalAmount,
      additionalMessage: message || emailSettings2?.message
    };
    let attachments3 = [];
    let attachmentsList = [];
    if (attachPdf && pdfUrl) {
      if (pdfUrl.includes("/api/attachments/") && pdfUrl.includes("/download")) {
        const attachmentIdMatch = pdfUrl.match(/\/api\/attachments\/(\d+)\/download/);
        if (attachmentIdMatch) {
          const attachmentId = parseInt(attachmentIdMatch[1]);
          console.log("\u{1F4CE} PDF \uCCA8\uBD80 \uC2DC\uB3C4 (DB\uC5D0\uC11C):", attachmentId);
          try {
            const [attachment] = await db.select({
              id: attachments.id,
              originalName: attachments.originalName,
              filePath: attachments.filePath,
              mimeType: attachments.mimeType,
              fileData: attachments.fileData
            }).from(attachments).where(eq10(attachments.id, attachmentId));
            if (attachment) {
              if (attachment.fileData) {
                attachments3.push({
                  filename: attachment.originalName || `\uBC1C\uC8FC\uC11C_${orderData.orderNumber || Date.now()}.pdf`,
                  content: Buffer.from(attachment.fileData, "base64"),
                  contentType: attachment.mimeType || "application/pdf"
                });
                attachmentsList.push("\uBC1C\uC8FC\uC11C.pdf (PDF \uD30C\uC77C)");
                console.log("\u2705 PDF \uCCA8\uBD80 \uC131\uACF5 (DB Base64)");
              } else if (attachment.filePath && fs7.existsSync(attachment.filePath)) {
                attachments3.push({
                  filename: attachment.originalName || `\uBC1C\uC8FC\uC11C_${orderData.orderNumber || Date.now()}.pdf`,
                  path: attachment.filePath,
                  contentType: attachment.mimeType || "application/pdf"
                });
                attachmentsList.push("\uBC1C\uC8FC\uC11C.pdf (PDF \uD30C\uC77C)");
                console.log("\u2705 PDF \uCCA8\uBD80 \uC131\uACF5 (\uD30C\uC77C \uACBD\uB85C)");
              } else {
                console.log("\u274C PDF \uCCA8\uBD80 \uC2E4\uD328: \uD30C\uC77C \uB370\uC774\uD130 \uC5C6\uC74C");
              }
            } else {
              console.log("\u274C PDF \uCCA8\uBD80 \uC2E4\uD328: \uCCA8\uBD80\uD30C\uC77C \uC815\uBCF4 \uC5C6\uC74C");
            }
          } catch (error) {
            console.error("\u274C PDF \uCCA8\uBD80 \uC624\uB958:", error);
          }
        }
      } else {
        const pdfPath = path5.join(__dirname2, "../../", pdfUrl.replace(/^\//, ""));
        console.log("\u{1F4CE} PDF \uCCA8\uBD80 \uC2DC\uB3C4 (\uC9C1\uC811 \uACBD\uB85C):", pdfPath);
        if (fs7.existsSync(pdfPath)) {
          attachments3.push({
            filename: `\uBC1C\uC8FC\uC11C_${orderData.orderNumber || Date.now()}.pdf`,
            path: pdfPath,
            contentType: "application/pdf"
          });
          attachmentsList.push("\uBC1C\uC8FC\uC11C.pdf (PDF \uD30C\uC77C)");
          console.log("\u2705 PDF \uCCA8\uBD80 \uC131\uACF5 (\uC9C1\uC811 \uACBD\uB85C)");
        } else {
          console.log("\u274C PDF \uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC74C:", pdfPath);
        }
      }
    }
    if (attachExcel && excelUrl) {
      if (excelUrl.includes("/api/attachments/") && excelUrl.includes("/download")) {
        const attachmentIdMatch = excelUrl.match(/\/api\/attachments\/(\d+)\/download/);
        if (attachmentIdMatch) {
          const attachmentId = parseInt(attachmentIdMatch[1]);
          console.log("\u{1F4CE} Excel \uCCA8\uBD80 \uC2DC\uB3C4 (DB\uC5D0\uC11C):", attachmentId);
          try {
            const [attachment] = await db.select({
              id: attachments.id,
              originalName: attachments.originalName,
              filePath: attachments.filePath,
              mimeType: attachments.mimeType,
              fileData: attachments.fileData
            }).from(attachments).where(eq10(attachments.id, attachmentId));
            if (attachment) {
              if (attachment.fileData) {
                attachments3.push({
                  filename: attachment.originalName || `\uBC1C\uC8FC\uC11C_${orderData.orderNumber || Date.now()}.xlsx`,
                  content: Buffer.from(attachment.fileData, "base64"),
                  contentType: attachment.mimeType || "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                });
                attachmentsList.push("\uBC1C\uC8FC\uC11C.xlsx (Excel \uD30C\uC77C)");
                console.log("\u2705 Excel \uCCA8\uBD80 \uC131\uACF5 (DB Base64)");
              } else if (attachment.filePath && fs7.existsSync(attachment.filePath)) {
                attachments3.push({
                  filename: attachment.originalName || `\uBC1C\uC8FC\uC11C_${orderData.orderNumber || Date.now()}.xlsx`,
                  path: attachment.filePath,
                  contentType: attachment.mimeType || "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                });
                attachmentsList.push("\uBC1C\uC8FC\uC11C.xlsx (Excel \uD30C\uC77C)");
                console.log("\u2705 Excel \uCCA8\uBD80 \uC131\uACF5 (\uD30C\uC77C \uACBD\uB85C)");
              } else {
                console.log("\u274C Excel \uCCA8\uBD80 \uC2E4\uD328: \uD30C\uC77C \uB370\uC774\uD130 \uC5C6\uC74C");
              }
            } else {
              console.log("\u274C Excel \uCCA8\uBD80 \uC2E4\uD328: \uCCA8\uBD80\uD30C\uC77C \uC815\uBCF4 \uC5C6\uC74C");
            }
          } catch (error) {
            console.error("\u274C Excel \uCCA8\uBD80 \uC624\uB958:", error);
          }
        }
      } else {
        const excelPath = path5.join(__dirname2, "../../", excelUrl.replace(/^\//, ""));
        console.log("\u{1F4CE} Excel \uCCA8\uBD80 \uC2DC\uB3C4 (\uC9C1\uC811 \uACBD\uB85C):", excelPath);
        if (fs7.existsSync(excelPath)) {
          attachments3.push({
            filename: `\uBC1C\uC8FC\uC11C_${orderData.orderNumber || Date.now()}.xlsx`,
            path: excelPath,
            contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
          });
          attachmentsList.push("\uBC1C\uC8FC\uC11C.xlsx (Excel \uD30C\uC77C)");
          console.log("\u2705 Excel \uCCA8\uBD80 \uC131\uACF5 (\uC9C1\uC811 \uACBD\uB85C)");
        } else {
          console.log("\u274C Excel \uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC74C:", excelPath);
        }
      }
    }
    if (selectedAttachments && Array.isArray(selectedAttachments) && selectedAttachments.length > 0) {
      console.log("\u{1F4CE} \uCC98\uB9AC\uD560 \uC120\uD0DD\uB41C \uCCA8\uBD80\uD30C\uC77C IDs:", selectedAttachments);
      console.log("\u{1F4CE} attachPdf:", attachPdf, "attachExcel:", attachExcel);
      console.log("\u{1F4CE} pdfUrl:", pdfUrl, "excelUrl:", excelUrl);
      const processedAttachmentIds = /* @__PURE__ */ new Set();
      if (attachPdf && pdfUrl && pdfUrl.includes("/api/attachments/") && pdfUrl.includes("/download")) {
        const pdfAttachmentIdMatch = pdfUrl.match(/\/api\/attachments\/(\d+)\/download/);
        if (pdfAttachmentIdMatch && attachments3.length > 0) {
          const pdfId = parseInt(pdfAttachmentIdMatch[1]);
          console.log("\u{1F50D} PDF already processed by old logic, ID:", pdfId);
          processedAttachmentIds.add(pdfId);
        }
      }
      if (attachExcel && excelUrl && excelUrl.includes("/api/attachments/") && excelUrl.includes("/download")) {
        const excelAttachmentIdMatch = excelUrl.match(/\/api\/attachments\/(\d+)\/download/);
        if (excelAttachmentIdMatch) {
          const excelId = parseInt(excelAttachmentIdMatch[1]);
          const excelProcessed = attachmentsList.some((item) => item.includes("Excel"));
          if (excelProcessed) {
            console.log("\u{1F50D} Excel already processed by old logic, ID:", excelId);
            processedAttachmentIds.add(excelId);
          } else {
            console.log("\u26A0\uFE0F Excel URL exists but not processed by old logic, will process in selectedAttachments");
          }
        }
      }
      for (const attachmentId of selectedAttachments) {
        try {
          if (processedAttachmentIds.has(attachmentId)) {
            console.log("\u26A0\uFE0F \uCCA8\uBD80\uD30C\uC77C \uC774\uBBF8 \uCC98\uB9AC\uB428 (\uAE30\uC874 \uB85C\uC9C1):", attachmentId);
            continue;
          }
          const [attachment] = await db.select({
            id: attachments.id,
            originalName: attachments.originalName,
            filePath: attachments.filePath,
            mimeType: attachments.mimeType,
            fileData: attachments.fileData
          }).from(attachments).where(eq10(attachments.id, attachmentId));
          if (attachment) {
            if (attachment.fileData) {
              attachments3.push({
                filename: attachment.originalName,
                content: Buffer.from(attachment.fileData, "base64"),
                contentType: attachment.mimeType || "application/octet-stream"
              });
              attachmentsList.push(attachment.originalName);
              console.log("\u2705 \uC120\uD0DD\uB41C \uCCA8\uBD80\uD30C\uC77C \uCD94\uAC00 \uC131\uACF5 (DB Base64):", attachment.originalName);
            } else if (attachment.filePath && fs7.existsSync(attachment.filePath)) {
              attachments3.push({
                filename: attachment.originalName,
                path: attachment.filePath,
                contentType: attachment.mimeType || "application/octet-stream"
              });
              attachmentsList.push(attachment.originalName);
              console.log("\u2705 \uC120\uD0DD\uB41C \uCCA8\uBD80\uD30C\uC77C \uCD94\uAC00 \uC131\uACF5 (\uD30C\uC77C \uACBD\uB85C):", attachment.originalName);
            } else {
              console.log("\u274C \uC120\uD0DD\uB41C \uCCA8\uBD80\uD30C\uC77C \uCC98\uB9AC \uC2E4\uD328 (\uB370\uC774\uD130 \uC5C6\uC74C):", attachment.originalName);
            }
          } else {
            console.log("\u274C \uC120\uD0DD\uB41C \uCCA8\uBD80\uD30C\uC77C \uC815\uBCF4 \uC5C6\uC74C, ID:", attachmentId);
          }
        } catch (error) {
          console.error("\u274C \uC120\uD0DD\uB41C \uCCA8\uBD80\uD30C\uC77C \uCC98\uB9AC \uC624\uB958, ID:", attachmentId, error);
        }
      }
    }
    console.log(`\u{1F4CE} \uCD1D ${attachments3.length}\uAC1C \uCCA8\uBD80\uD30C\uC77C:`, attachmentsList);
    const generateEmailContent = (options, attachmentsList2 = []) => {
      const formatCurrency = (amount) => {
        return new Intl.NumberFormat("ko-KR", {
          style: "currency",
          currency: "KRW"
        }).format(amount);
      };
      const formatDate = (dateString) => {
        try {
          const date2 = new Date(dateString);
          return date2.toLocaleDateString("ko-KR", {
            year: "numeric",
            month: "long",
            day: "numeric"
          });
        } catch {
          return dateString;
        }
      };
      return `
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="UTF-8">
            <style>
              body {
                font-family: 'Malgun Gothic', Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 600px;
                margin: 0 auto;
                padding: 20px;
              }
              
              .header {
                background-color: #007bff;
                color: white;
                padding: 20px;
                border-radius: 8px 8px 0 0;
                text-align: center;
              }
              
              .content {
                background-color: #f8f9fa;
                padding: 30px;
                border-radius: 0 0 8px 8px;
              }
              
              .info-table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
              }
              
              .info-table th,
              .info-table td {
                border: 1px solid #ddd;
                padding: 12px;
                text-align: left;
              }
              
              .info-table th {
                background-color: #e9ecef;
                font-weight: bold;
                width: 30%;
              }
              
              .attachments {
                background-color: #e7f3ff;
                padding: 15px;
                border-radius: 5px;
                margin: 20px 0;
              }
              
              .footer {
                margin-top: 30px;
                padding-top: 20px;
                border-top: 1px solid #ddd;
                font-size: 12px;
                color: #666;
                text-align: center;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>\u{1F4CB} \uBC1C\uC8FC\uC11C \uC1A1\uBD80</h1>
              <p>\uAD6C\uB9E4 \uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C</p>
            </div>
            
            <div class="content">
              <p>\uC548\uB155\uD558\uC138\uC694,</p>
              <p>\uBC1C\uC8FC\uC11C\uB97C \uC1A1\uBD80\uB4DC\uB9BD\uB2C8\uB2E4. \uCCA8\uBD80\uB41C \uD30C\uC77C\uC744 \uD655\uC778\uD558\uC5EC \uC8FC\uC2DC\uAE30 \uBC14\uB78D\uB2C8\uB2E4.</p>
              
              ${options.orderNumber ? `
                <table class="info-table">
                  <tr>
                    <th>\uBC1C\uC8FC\uBC88\uD638</th>
                    <td>${options.orderNumber}</td>
                  </tr>
                  ${options.vendorName ? `
                    <tr>
                      <th>\uAC70\uB798\uCC98\uBA85</th>
                      <td>${options.vendorName}</td>
                    </tr>
                  ` : ""}
                  ${options.totalAmount ? `
                    <tr>
                      <th>\uCD1D \uAE08\uC561</th>
                      <td><strong>${formatCurrency(options.totalAmount)}</strong></td>
                    </tr>
                  ` : ""}
                </table>
              ` : ""}
              
              ${attachmentsList2.length > 0 ? `
                <div class="attachments">
                  <h3>\u{1F4CE} \uCCA8\uBD80\uD30C\uC77C</h3>
                  <ul>
                    ${attachmentsList2.map((attachment) => `<li>${attachment}</li>`).join("")}
                  </ul>
                </div>
              ` : ""}
              
              ${options.additionalMessage ? `
                <div style="background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0;">
                  <h3>\u{1F4DD} \uCD94\uAC00 \uC548\uB0B4\uC0AC\uD56D</h3>
                  <p>${options.additionalMessage}</p>
                </div>
              ` : ""}
              
              <p>
                \uBC1C\uC8FC\uC11C \uAC80\uD1A0 \uD6C4 \uD655\uC778 \uD68C\uC2E0 \uBD80\uD0C1\uB4DC\uB9BD\uB2C8\uB2E4.<br>
                \uBB38\uC758\uC0AC\uD56D\uC774 \uC788\uC73C\uC2DC\uBA74 \uC5B8\uC81C\uB4E0\uC9C0 \uC5F0\uB77D\uC8FC\uC2DC\uAE30 \uBC14\uB78D\uB2C8\uB2E4.
              </p>
              
              <p>\uAC10\uC0AC\uD569\uB2C8\uB2E4.</p>
            </div>
            
            <div class="footer">
              <p>
                \uC774 \uBA54\uC77C\uC740 \uAD6C\uB9E4 \uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C\uC5D0\uC11C \uC790\uB3D9\uC73C\uB85C \uBC1C\uC1A1\uB418\uC5C8\uC2B5\uB2C8\uB2E4.<br>
                \uBC1C\uC1A1 \uC2DC\uAC04: ${(/* @__PURE__ */ new Date()).toLocaleString("ko-KR")}
              </p>
            </div>
          </body>
        </html>
      `;
    };
    console.log("\u{1F4E7} sendPOWithOriginalFormat \uD638\uCD9C \uC804 \uC635\uC158:", {
      to: emailOptions.to,
      cc: emailOptions.cc,
      subject: emailOptions.subject,
      attachmentsCount: attachments3.length
    });
    const emailHtml = generateEmailContent(emailOptions, attachmentsList);
    const emailSettingsService = new EmailSettingsService();
    const smtpConfig = await emailSettingsService.getDecryptedSettings();
    if (!smtpConfig) {
      throw new Error("\uC774\uBA54\uC77C \uC124\uC815\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4. \uAD00\uB9AC\uC790 \uC124\uC815\uC5D0\uC11C SMTP \uC815\uBCF4\uB97C \uD655\uC778\uD574\uC8FC\uC138\uC694.");
    }
    const transporter2 = nodemailer3.createTransport(smtpConfig);
    const mailOptions = {
      from: smtpConfig.auth.user,
      to: Array.isArray(emailOptions.to) ? emailOptions.to.join(", ") : emailOptions.to,
      cc: emailOptions.cc ? Array.isArray(emailOptions.cc) ? emailOptions.cc.join(", ") : emailOptions.cc : void 0,
      subject: emailOptions.subject || `\uBC1C\uC8FC\uC11C - ${orderData.orderNumber || ""}`,
      html: emailHtml,
      attachments: attachments3
    };
    if (process.env.NODE_ENV === "development" || !process.env.EMAIL_USER) {
      console.log("\u{1F4E7} [\uAC1C\uBC1C \uBAA8\uB4DC] \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2DC\uBBAC\uB808\uC774\uC158:", {
        to: mailOptions.to,
        cc: mailOptions.cc,
        subject: mailOptions.subject,
        attachmentsCount: attachments3.length
      });
      res.json({
        success: true,
        messageId: `mock-${Date.now()}`,
        mockMode: true,
        message: "\uAC1C\uBC1C \uD658\uACBD: \uC774\uBA54\uC77C\uC774 \uC2E4\uC81C\uB85C \uBC1C\uC1A1\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4."
      });
    } else {
      try {
        const info = await transporter2.sendMail(mailOptions);
        console.log("\u{1F4E7} \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC131\uACF5:", info.messageId);
        if (orderData && orderData.orderNumber) {
          try {
            console.log(`\u{1F504} \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC2DC\uB3C4: ${orderData.orderNumber} \u2192 sent`);
            await updateOrderStatusAfterEmail(orderData.orderNumber);
            console.log(`\u2705 \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC644\uB8CC: ${orderData.orderNumber} \u2192 sent`);
          } catch (updateError) {
            console.error(`\u274C \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC2E4\uD328: ${orderData.orderNumber}`, updateError);
          }
        } else {
          console.log(`\u26A0\uFE0F \uBC1C\uC8FC\uC11C \uC815\uBCF4\uAC00 \uC5C6\uC5B4 \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8\uB97C \uAC74\uB108\uB700:`, { orderData });
        }
        res.json({ success: true, messageId: info.messageId });
      } catch (emailError) {
        console.error("\u{1F4E7} \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328:", emailError);
        res.status(500).json({
          error: "\uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328",
          details: emailError instanceof Error ? emailError.message : "Unknown error"
        });
      }
    }
  } catch (error) {
    console.error("\uC774\uBA54\uC77C \uBC1C\uC1A1 \uC624\uB958:", error);
    res.status(500).json({
      error: "\uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router3.post("/orders/send-email-simple", requireAuth, async (req, res) => {
  try {
    const { to, cc, subject, body, orderData, attachPdf, attachExcel } = req.body;
    console.log("\u{1F4E7} \uAC04\uD3B8 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC694\uCCAD:", { to, cc, subject, attachments: { attachPdf, attachExcel } });
    if (!to || to.length === 0) {
      return res.status(400).json({ error: "\uC218\uC2E0\uC790\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4." });
    }
    const toEmails = to.map(
      (recipient) => typeof recipient === "string" ? recipient : recipient.email
    ).filter(Boolean);
    const ccEmails = cc ? cc.map(
      (recipient) => typeof recipient === "string" ? recipient : recipient.email
    ).filter(Boolean) : [];
    if (toEmails.length === 0) {
      return res.status(400).json({ error: "\uC720\uD6A8\uD55C \uC774\uBA54\uC77C \uC8FC\uC18C\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4." });
    }
    if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {
      console.warn("\u26A0\uFE0F SMTP \uC124\uC815\uC774 \uC5C6\uC5B4\uC11C \uC774\uBA54\uC77C\uC744 \uBC1C\uC1A1\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.");
      return res.json({
        success: true,
        message: "\uC774\uBA54\uC77C \uAE30\uB2A5\uC774 \uC544\uC9C1 \uC124\uC815\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4. (\uAC1C\uBC1C \uBAA8\uB4DC)",
        mockData: { to: toEmails, cc: ccEmails, subject }
      });
    }
    const emailData = {
      orderNumber: orderData?.orderNumber || "PO-" + Date.now(),
      projectName: orderData?.projectName || "\uD504\uB85C\uC81D\uD2B8",
      vendorName: orderData?.vendorName || "\uAC70\uB798\uCC98",
      location: orderData?.location || "\uD604\uC7A5",
      orderDate: orderData?.orderDate || (/* @__PURE__ */ new Date()).toLocaleDateString("ko-KR"),
      deliveryDate: orderData?.deliveryDate || (/* @__PURE__ */ new Date()).toLocaleDateString("ko-KR"),
      totalAmount: orderData?.totalAmount || 0,
      userName: req.user?.name || "\uB2F4\uB2F9\uC790",
      userPhone: req.user?.phone || "\uC5F0\uB77D\uCC98"
    };
    let excelPath = "";
    if (attachExcel && orderData?.excelFilePath) {
      excelPath = path5.join(__dirname2, "../../", orderData.excelFilePath.replace(/^\//, ""));
      if (!fs7.existsSync(excelPath)) {
        console.warn("\u26A0\uFE0F \uC5D1\uC140 \uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4:", excelPath);
        excelPath = "";
      }
    }
    if (!excelPath) {
      const tempDir = path5.join(__dirname2, "../../uploads/temp");
      if (!fs7.existsSync(tempDir)) {
        fs7.mkdirSync(tempDir, { recursive: true });
      }
      excelPath = path5.join(tempDir, `temp_${Date.now()}.txt`);
      fs7.writeFileSync(excelPath, `\uBC1C\uC8FC\uC11C \uC0C1\uC138 \uB0B4\uC6A9

${body}`);
    }
    const result = await emailService.sendPOWithOriginalFormat(excelPath, {
      to: toEmails,
      cc: ccEmails,
      subject: subject || `\uBC1C\uC8FC\uC11C - ${emailData.orderNumber}`,
      body: body || `\uBC1C\uC8FC\uC11C\uB97C \uCCA8\uBD80\uD569\uB2C8\uB2E4.

\uBC1C\uC8FC\uBC88\uD638: ${emailData.orderNumber}
\uD504\uB85C\uC81D\uD2B8: ${emailData.projectName}
\uAC70\uB798\uCC98: ${emailData.vendorName}`,
      orderData: emailData,
      userId: req.user?.id,
      orderId: orderData?.orderId
    });
    if (excelPath.includes("temp_")) {
      try {
        fs7.unlinkSync(excelPath);
      } catch (err) {
        console.warn("\uC784\uC2DC \uD30C\uC77C \uC0AD\uC81C \uC2E4\uD328:", err);
      }
    }
    console.log("\u{1F4E7} \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC131\uACF5:", result);
    if (result.success && emailData && emailData.orderNumber) {
      try {
        console.log(`\u{1F504} [\uAC04\uD3B8\uBC1C\uC1A1] \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC2DC\uB3C4: ${emailData.orderNumber} \u2192 sent`);
        await updateOrderStatusAfterEmail(emailData.orderNumber);
        console.log(`\u2705 [\uAC04\uD3B8\uBC1C\uC1A1] \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC644\uB8CC: ${emailData.orderNumber} \u2192 sent`);
      } catch (updateError) {
        console.error(`\u274C [\uAC04\uD3B8\uBC1C\uC1A1] \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC2E4\uD328: ${emailData.orderNumber}`, updateError);
      }
    } else {
      console.log(`\u26A0\uFE0F [\uAC04\uD3B8\uBC1C\uC1A1] \uBC1C\uC8FC\uC11C \uC815\uBCF4\uAC00 \uC5C6\uC5B4 \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8\uB97C \uAC74\uB108\uB700:`, {
        resultSuccess: result.success,
        emailData: emailData?.orderNumber || "no orderNumber"
      });
    }
    res.json({ success: true, ...result });
  } catch (error) {
    console.error("\uC774\uBA54\uC77C \uBC1C\uC1A1 \uC624\uB958:", error);
    res.status(500).json({
      error: "\uC774\uBA54\uC77C \uBC1C\uC1A1\uC5D0 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4.",
      details: error instanceof Error ? error.message : "\uC54C \uC218 \uC5C6\uB294 \uC624\uB958"
    });
  }
});
router3.post("/orders/send-email-with-excel", requireAuth, async (req, res) => {
  try {
    const { emailSettings: emailSettings2, excelFilePath, orderData } = req.body;
    console.log("\u{1F4E7} \uC5D1\uC140 \uD30C\uC77C \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC694\uCCAD:", { emailSettings: emailSettings2, excelFilePath });
    if (!emailSettings2.to) {
      return res.status(400).json({ error: "\uC218\uC2E0\uC790\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4." });
    }
    if (!excelFilePath) {
      return res.status(400).json({ error: "\uC5D1\uC140 \uD30C\uC77C \uACBD\uB85C\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4." });
    }
    const absoluteExcelPath = excelFilePath.startsWith("http") ? excelFilePath.replace(/^https?:\/\/[^\/]+/, "") : excelFilePath;
    const localExcelPath = path5.join(__dirname2, "../../", absoluteExcelPath.replace(/^\//, ""));
    console.log("\u{1F4E7} \uC5D1\uC140 \uD30C\uC77C \uACBD\uB85C:", localExcelPath);
    if (!fs7.existsSync(localExcelPath)) {
      return res.status(400).json({ error: "\uC5D1\uC140 \uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4." });
    }
    const result = await emailService.sendPOWithOriginalFormat(
      localExcelPath,
      {
        to: emailSettings2.to,
        cc: emailSettings2.cc,
        subject: emailSettings2.subject,
        orderNumber: emailSettings2.orderNumber,
        vendorName: emailSettings2.vendorName,
        totalAmount: emailSettings2.totalAmount,
        additionalMessage: emailSettings2.message
      }
    );
    if (result.success) {
      console.log("\u{1F4E7} \uC5D1\uC140 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC131\uACF5");
      if (emailSettings2 && emailSettings2.orderNumber) {
        try {
          await updateOrderStatusAfterEmail(emailSettings2.orderNumber);
          console.log(`\u{1F4CB} \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC644\uB8CC: ${emailSettings2.orderNumber} \u2192 sent`);
        } catch (updateError) {
          console.error(`\u274C \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC2E4\uD328: ${emailSettings2.orderNumber}`, updateError);
        }
      }
      res.json({ success: true, messageId: result.messageId });
    } else {
      console.error("\u{1F4E7} \uC5D1\uC140 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328:", result.error);
      res.status(500).json({ error: result.error });
    }
  } catch (error) {
    console.error("\uC5D1\uC140 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC624\uB958:", error);
    res.status(500).json({
      error: "\uC5D1\uC140 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router3.post("/test-email-smtp", async (req, res) => {
  try {
    console.log("\u{1F50D} SMTP \uD14C\uC2A4\uD2B8 \uC2DC\uC791...");
    console.log("\u{1F527} SMTP \uC124\uC815:", {
      host: process.env.SMTP_HOST,
      port: process.env.SMTP_PORT,
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS ? "***\uC124\uC815\uB428***" : "\u274C \uC124\uC815\uC548\uB428"
    });
    const { testEmail } = req.body;
    const recipientEmail = testEmail || "davidswyang@gmail.com";
    const testOrderData = {
      orderNumber: "SMTP-TEST-001",
      projectName: "\uB124\uC774\uBC84 SMTP \uD14C\uC2A4\uD2B8",
      vendorName: "System Test",
      location: "Test Environment",
      orderDate: (/* @__PURE__ */ new Date()).toLocaleDateString("ko-KR"),
      deliveryDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1e3).toLocaleDateString("ko-KR"),
      totalAmount: 999999,
      userName: "System Tester",
      userPhone: "010-0000-0000"
    };
    const fs22 = __require("fs");
    const path20 = __require("path");
    const testExcelPath = path20.join(__dirname2, "../../uploads/smtp-test.txt");
    fs22.writeFileSync(testExcelPath, "SMTP Test File - " + (/* @__PURE__ */ new Date()).toISOString());
    const result = await emailService.sendPOWithOriginalFormat(testExcelPath, {
      to: [recipientEmail],
      cc: [],
      subject: "SMTP \uD14C\uC2A4\uD2B8 - \uBC1C\uC8FC\uC11C",
      body: "SMTP \uC124\uC815 \uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C\uC785\uB2C8\uB2E4.",
      orderData: testOrderData,
      userId: "system-test",
      orderId: 9999
    });
    try {
      fs22.unlinkSync(testExcelPath);
    } catch (e) {
      console.warn("\uC784\uC2DC \uD30C\uC77C \uC0AD\uC81C \uC2E4\uD328:", e.message);
    }
    if (result.success) {
      console.log("\u2705 SMTP \uD14C\uC2A4\uD2B8 \uC131\uACF5!");
      res.json({
        success: true,
        message: "\u2705 \uB124\uC774\uBC84 SMTP \uD14C\uC2A4\uD2B8 \uC131\uACF5!",
        messageId: result.messageId,
        acceptedRecipients: result.acceptedRecipients,
        rejectedRecipients: result.rejectedRecipients,
        testEmail: recipientEmail,
        smtp: {
          host: process.env.SMTP_HOST,
          port: process.env.SMTP_PORT,
          user: process.env.SMTP_USER
        }
      });
    } else {
      console.error("\u274C SMTP \uD14C\uC2A4\uD2B8 \uC2E4\uD328");
      res.status(500).json({
        success: false,
        message: "\u274C SMTP \uD14C\uC2A4\uD2B8 \uC2E4\uD328",
        error: "\uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328"
      });
    }
  } catch (error) {
    console.error("\u274C SMTP \uD14C\uC2A4\uD2B8 \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      message: "\u274C SMTP \uD14C\uC2A4\uD2B8 \uC624\uB958",
      error: error instanceof Error ? error.message : "Unknown error",
      details: {
        code: error.code,
        response: error.response
      }
    });
  }
});
router3.get("/orders/:orderId/attachments", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.orderId, 10);
    console.log(`\u{1F4CE} \uBC1C\uC8FC\uC11C \uCCA8\uBD80\uD30C\uC77C \uBAA9\uB85D \uC694\uCCAD: \uBC1C\uC8FC\uC11C ID ${orderId}`);
    const attachments3 = await storage.getAttachments(orderId);
    const attachmentList = attachments3.map((attachment) => ({
      id: attachment.id,
      originalName: attachment.originalName,
      storedName: attachment.storedName,
      fileSize: attachment.fileSize,
      mimeType: attachment.mimeType,
      uploadedAt: attachment.uploadedAt,
      uploadedBy: attachment.uploadedBy,
      // 파일 타입 분류
      type: attachment.mimeType === "application/pdf" ? "pdf" : attachment.mimeType?.includes("excel") || attachment.originalName?.endsWith(".xlsx") ? "excel" : "other"
    }));
    console.log(`\u{1F4CE} \uBC1C\uC8FC\uC11C ${orderId}\uC758 \uCCA8\uBD80\uD30C\uC77C: ${attachmentList.length}\uAC1C`);
    res.json({
      success: true,
      orderId,
      attachments: attachmentList
    });
  } catch (error) {
    console.error("Error fetching order attachments:", error);
    res.status(500).json({
      success: false,
      error: "\uCCA8\uBD80\uD30C\uC77C \uBAA9\uB85D\uC744 \uAC00\uC838\uC624\uB294\uB370 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4.",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router3.get("/orders/:orderId/attachments/:attachmentId/download", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.orderId, 10);
    const attachmentId = parseInt(req.params.attachmentId, 10);
    console.log(`\u{1F4CE} \uD30C\uC77C \uB2E4\uC6B4\uB85C\uB4DC \uC694\uCCAD: \uBC1C\uC8FC\uC11C ID ${orderId}, \uCCA8\uBD80\uD30C\uC77C ID ${attachmentId}`);
    const attachment = await storage.getAttachment(orderId, attachmentId);
    if (!attachment) {
      console.log(`\u274C \uCCA8\uBD80\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC74C: ID ${attachmentId}`);
      return res.status(404).json({
        error: "\uCCA8\uBD80\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
        attachmentId
      });
    }
    console.log(`\u{1F4CE} \uCCA8\uBD80\uD30C\uC77C \uC815\uBCF4:`, {
      originalName: attachment.originalName,
      storedName: attachment.storedName,
      filePath: attachment.filePath,
      fileSize: attachment.fileSize
    });
    const originalName = decodeKoreanFilename(attachment.originalName);
    const encodedFilename = encodeURIComponent(originalName);
    res.setHeader("Content-Type", attachment.mimeType || "application/octet-stream");
    res.setHeader("Content-Disposition", `attachment; filename="${originalName}"; filename*=UTF-8''${encodedFilename}`);
    res.setHeader("Cache-Control", "no-cache");
    console.log(`\u{1F4E4} \uD30C\uC77C \uB2E4\uC6B4\uB85C\uB4DC \uC2DC\uC791: ${originalName}`);
    if (attachment.filePath.startsWith("db://") && attachment.fileData) {
      console.log(`\u{1F4BE} DB\uC5D0\uC11C \uD30C\uC77C \uB370\uC774\uD130 \uC77D\uAE30: ${attachment.filePath}`);
      const fileBuffer = Buffer.from(attachment.fileData, "base64");
      res.setHeader("Content-Length", fileBuffer.length);
      console.log(`\u{1F4CA} \uD30C\uC77C \uD06C\uAE30 (DB): ${(fileBuffer.length / 1024).toFixed(2)} KB`);
      res.send(fileBuffer);
      console.log(`\u2705 \uD30C\uC77C \uB2E4\uC6B4\uB85C\uB4DC \uC644\uB8CC (DB): ${originalName}`);
    } else {
      let filePath = attachment.filePath;
      if (!path5.isAbsolute(filePath)) {
        filePath = path5.join(__dirname2, "../../", filePath);
      }
      console.log(`\u{1F4C2} \uD30C\uC77C \uACBD\uB85C: ${filePath}`);
      if (!fs7.existsSync(filePath)) {
        console.log(`\u274C \uD30C\uC77C\uC774 \uC874\uC7AC\uD558\uC9C0 \uC54A\uC74C: ${filePath}`);
        return res.status(404).json({
          error: "\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
          filePath: attachment.filePath
        });
      }
      const stats = fs7.statSync(filePath);
      console.log(`\u{1F4CA} \uD30C\uC77C \uD06C\uAE30: ${(stats.size / 1024).toFixed(2)} KB`);
      res.setHeader("Content-Length", stats.size);
      const fileStream = fs7.createReadStream(filePath);
      fileStream.on("error", (error) => {
        console.error("\u274C \uD30C\uC77C \uC2A4\uD2B8\uB9BC \uC624\uB958:", error);
        if (!res.headersSent) {
          res.status(500).json({
            error: "\uD30C\uC77C \uC77D\uAE30 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
            details: error.message
          });
        }
      });
      fileStream.on("end", () => {
        console.log(`\u2705 \uD30C\uC77C \uB2E4\uC6B4\uB85C\uB4DC \uC644\uB8CC: ${originalName}`);
      });
      fileStream.pipe(res);
    }
  } catch (error) {
    console.error("\u274C \uCCA8\uBD80\uD30C\uC77C \uB2E4\uC6B4\uB85C\uB4DC \uC624\uB958:", error);
    res.status(500).json({
      error: "\uD30C\uC77C \uB2E4\uC6B4\uB85C\uB4DC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
      details: error instanceof Error ? error.message : "\uC54C \uC218 \uC5C6\uB294 \uC624\uB958"
    });
  }
});
router3.post("/orders/:id/complete-delivery", requireAuth, async (req, res) => {
  try {
    const userId = req.user.id;
    const user = await storage.getUser(userId);
    const orderId = parseInt(req.params.id);
    const order = await storage.getPurchaseOrder(orderId);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    if (user?.role !== "admin" && order.userId !== user?.id) {
      return res.status(403).json({ message: "Access denied - insufficient permissions" });
    }
    const currentStatus = order.orderStatus || order.status;
    if (currentStatus !== "created" && currentStatus !== "sent") {
      return res.status(400).json({
        message: "\uC8FC\uBB38\uC774 \uBC1C\uC8FC\uC0DD\uC131 \uB610\uB294 \uBC1C\uC1A1\uB428 \uC0C1\uD0DC\uAC00 \uC544\uB2D9\uB2C8\uB2E4. \uB0A9\uD488\uAC80\uC218\uC644\uB8CC\uB294 \uBC1C\uC8FC\uC0DD\uC131 \uB610\uB294 \uBC1C\uC1A1\uB41C \uC8FC\uBB38\uC5D0\uC11C\uB9CC \uAC00\uB2A5\uD569\uB2C8\uB2E4."
      });
    }
    const updatedOrder = await storage.updatePurchaseOrder(orderId, {
      status: "completed",
      orderStatus: "delivered",
      updatedAt: /* @__PURE__ */ new Date()
    });
    await storage.createOrderHistory({
      orderId,
      action: "delivery_completed",
      details: "\uB0A9\uD488\uAC80\uC218\uC644\uB8CC",
      userId,
      timestamp: /* @__PURE__ */ new Date()
    });
    res.json({
      message: "\uB0A9\uD488\uAC80\uC218\uAC00 \uC644\uB8CC\uB418\uC5C8\uC2B5\uB2C8\uB2E4.",
      order: updatedOrder
    });
  } catch (error) {
    console.error("Error completing delivery:", error);
    res.status(500).json({
      message: "\uB0A9\uD488\uAC80\uC218 \uC644\uB8CC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
var orders_default = router3;

// server/routes/vendors.ts
import { Router as Router4 } from "express";
var router4 = Router4();
router4.get("/vendors", async (req, res) => {
  try {
    console.log("\u{1F3EA} Fetching vendors from database...");
    const vendors3 = await storage.getVendors();
    console.log(`\u2705 Successfully fetched ${vendors3.length} vendors`);
    res.json(vendors3);
  } catch (error) {
    console.error("\u274C Error fetching vendors:", error);
    console.error("Error name:", error?.name);
    console.error("Error message:", error?.message);
    console.error("Error stack:", error?.stack);
    res.status(500).json({
      message: "Failed to fetch vendors",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router4.get("/vendors/:id", requireAuth, async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const vendor = await storage.getVendor(id);
    if (!vendor) {
      return res.status(404).json({ message: "Vendor not found" });
    }
    res.json(vendor);
  } catch (error) {
    console.error("Error fetching vendor:", error);
    res.status(500).json({ message: "Failed to fetch vendor" });
  }
});
router4.post("/vendors", requireAuth, async (req, res) => {
  try {
    console.log("\u{1F50D} Vendor creation request body:", req.body);
    console.log("\u{1F50D} User:", req.user);
    const vendorData = {
      name: req.body.name,
      businessNumber: req.body.businessNumber || null,
      contactPerson: req.body.contactPerson,
      email: req.body.email,
      phone: req.body.phone || null,
      address: req.body.address || null,
      businessType: req.body.businessType || null
    };
    console.log("\u{1F50D} Prepared vendor data:", vendorData);
    let attempts = 0;
    const maxAttempts = 3;
    while (attempts < maxAttempts) {
      try {
        const vendor = await storage.createVendor(vendorData);
        console.log("\u2705 Vendor created successfully:", vendor);
        return res.status(201).json(vendor);
      } catch (dbError) {
        attempts++;
        if (attempts >= maxAttempts) {
          throw dbError;
        }
        console.log(`\u{1F504} Database operation failed, retrying (${attempts}/${maxAttempts})...`);
        await new Promise((resolve) => setTimeout(resolve, 1e3));
      }
    }
  } catch (error) {
    console.error("\u274C Error creating vendor:", error);
    console.error("\u274C Error details:", error.message);
    console.error("\u274C Error stack:", error.stack);
    res.status(500).json({
      message: "Failed to create vendor",
      error: error.message
    });
  }
});
router4.put("/vendors/:id", requireAuth, async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    console.log("\u{1F50D} Vendor update request - ID:", id);
    console.log("\u{1F50D} Update data:", req.body);
    const updatedVendor = await storage.updateVendor(id, req.body);
    if (!updatedVendor) {
      return res.status(404).json({ message: "Vendor not found" });
    }
    console.log("\u2705 Vendor updated successfully:", updatedVendor);
    res.json(updatedVendor);
  } catch (error) {
    console.error("\u274C Error updating vendor:", error);
    res.status(500).json({ message: "Failed to update vendor" });
  }
});
router4.delete("/vendors/:id", requireAuth, async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    await storage.deleteVendor(id);
    res.status(204).send();
  } catch (error) {
    console.error("Error deleting vendor:", error);
    res.status(500).json({ message: "Failed to delete vendor" });
  }
});
router4.post("/vendors/validate", async (req, res) => {
  try {
    const { vendorName } = req.body;
    if (!vendorName) {
      return res.status(400).json({
        isValid: false,
        error: "Vendor name is required"
      });
    }
    console.log(`\u{1F50D} Validating vendor: ${vendorName}`);
    const vendors3 = await storage.getVendors();
    const matchedVendor = vendors3.find(
      (vendor) => vendor.name.toLowerCase().includes(vendorName.toLowerCase()) || vendorName.toLowerCase().includes(vendor.name.toLowerCase())
    );
    if (matchedVendor) {
      console.log(`\u2705 Vendor found: ${matchedVendor.name}`);
      res.json({
        isValid: true,
        vendorId: matchedVendor.id,
        vendorName: matchedVendor.name,
        vendorEmail: matchedVendor.email,
        contactPerson: matchedVendor.contactPerson,
        phone: matchedVendor.phone
      });
    } else {
      console.log(`\u26A0\uFE0F Vendor not found: ${vendorName}`);
      res.json({
        isValid: false,
        message: "\uB4F1\uB85D\uB418\uC9C0 \uC54A\uC740 \uAC70\uB798\uCC98\uC785\uB2C8\uB2E4.",
        suggestions: vendors3.filter(
          (vendor) => vendor.name.toLowerCase().includes(vendorName.toLowerCase().substring(0, 2)) || vendorName.toLowerCase().substring(0, 2).includes(vendor.name.toLowerCase().substring(0, 2))
        ).slice(0, 5).map((vendor) => ({
          id: vendor.id,
          name: vendor.name,
          email: vendor.email
        }))
      });
    }
  } catch (error) {
    console.error("\u274C Error validating vendor:", error);
    res.status(500).json({
      isValid: false,
      error: "Failed to validate vendor",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
var vendors_default = router4;

// server/routes/items.ts
import { Router as Router5 } from "express";
init_schema();
var router5 = Router5();
router5.get("/items", async (req, res) => {
  try {
    console.log("\u{1F528} Fetching items (using reliable mock data)...");
    const mockItems = [
      {
        id: 1,
        name: "\uCCA0\uADFC D16",
        code: "REBAR_D16",
        category: "\uAC74\uC124\uC790\uC7AC",
        unit: "\uD1A4",
        price: 85e4,
        description: "16mm \uCCA0\uADFC, KS D 3504 \uD45C\uC900",
        isActive: true,
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      },
      {
        id: 2,
        name: "\uC2DC\uBA58\uD2B8 1\uC885",
        code: "CEMENT_T1",
        category: "\uAC74\uC124\uC790\uC7AC",
        unit: "\uD3EC",
        price: 8500,
        description: "\uD3EC\uD2C0\uB79C\uB4DC \uC2DC\uBA58\uD2B8 1\uC885, 40kg",
        isActive: true,
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      },
      {
        id: 3,
        name: "\uC804\uC120 THHN 2.5sq",
        code: "WIRE_THHN_25",
        category: "\uC804\uAE30\uC790\uC7AC",
        unit: "m",
        price: 1200,
        description: "THHN \uC804\uC120 2.5\uD3C9\uBC29\uBBF8\uB9AC\uBBF8\uD130",
        isActive: true,
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      },
      {
        id: 4,
        name: "PVC \uD30C\uC774\uD504 100mm",
        code: "PVC_PIPE_100",
        category: "\uBC30\uAD00\uC790\uC7AC",
        unit: "m",
        price: 3500,
        description: "PVC \uD30C\uC774\uD504 100mm \uC9C1\uACBD",
        isActive: true,
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      }
    ];
    console.log(`\u2705 Successfully returning ${mockItems.length} items (mock data)`);
    res.json(mockItems);
  } catch (error) {
    console.error("\u274C Error in items endpoint:", error);
    res.status(500).json({
      message: "Failed to fetch items",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router5.get("/items/categories", async (req, res) => {
  try {
    console.log("\u{1F3F7}\uFE0F Fetching item categories (using reliable mock data)...");
    const mockCategories = [
      { id: 1, name: "\uAC74\uC124\uC790\uC7AC", description: "\uAC74\uC124\uC5D0 \uD544\uC694\uD55C \uAE30\uBCF8 \uC790\uC7AC" },
      { id: 2, name: "\uC804\uAE30\uC790\uC7AC", description: "\uC804\uAE30 \uC124\uBE44 \uAD00\uB828 \uC790\uC7AC" },
      { id: 3, name: "\uBC30\uAD00\uC790\uC7AC", description: "\uBC30\uAD00 \uBC0F \uAE09\uC218 \uAD00\uB828 \uC790\uC7AC" },
      { id: 4, name: "\uB9C8\uAC10\uC790\uC7AC", description: "\uB0B4\uC678\uC7A5 \uB9C8\uAC10 \uC790\uC7AC" },
      { id: 5, name: "\uC548\uC804\uC6A9\uD488", description: "\uD604\uC7A5 \uC548\uC804 \uAD00\uB828 \uC6A9\uD488" }
    ];
    console.log(`\u2705 Successfully returning ${mockCategories.length} categories (mock data)`);
    res.json(mockCategories);
  } catch (error) {
    console.error("\u274C Error in item categories endpoint:", error);
    res.status(500).json({
      message: "Failed to fetch item categories",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router5.get("/items/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    const item = await storage.getItem(id);
    if (!item) {
      return res.status(404).json({ message: "Item not found" });
    }
    res.json(item);
  } catch (error) {
    console.error("Error fetching item:", error);
    res.status(500).json({ message: "Failed to fetch item" });
  }
});
router5.post("/items", async (req, res) => {
  try {
    const validatedData = insertItemSchema.parse(req.body);
    const item = await storage.createItem(validatedData);
    res.status(201).json(item);
  } catch (error) {
    console.error("Error creating item:", error);
    res.status(500).json({ message: "Failed to create item" });
  }
});
router5.put("/items/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    const updatedItem = await storage.updateItem(id, req.body);
    res.json(updatedItem);
  } catch (error) {
    console.error("Error updating item:", error);
    res.status(500).json({ message: "Failed to update item" });
  }
});
router5.delete("/items/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    await storage.deleteItem(id);
    res.json({ message: "Item deleted successfully" });
  } catch (error) {
    console.error("Error deleting item:", error);
    res.status(500).json({ message: "Failed to delete item" });
  }
});
router5.get("/item-categories", async (req, res) => {
  try {
    const categories = await storage.getItemCategories();
    res.json(categories);
  } catch (error) {
    console.error("Error fetching item categories:", error);
    res.status(500).json({ message: "Failed to fetch item categories" });
  }
});
router5.get("/item-categories/major", async (req, res) => {
  try {
    const categories = await storage.getMajorCategories();
    res.json(categories);
  } catch (error) {
    console.error("Error fetching major categories:", error);
    res.status(500).json({ message: "Failed to fetch major categories" });
  }
});
router5.get("/item-categories/middle", async (req, res) => {
  try {
    const { majorId } = req.query;
    const categories = await storage.getMiddleCategories(majorId ? parseInt(majorId) : void 0);
    res.json(categories);
  } catch (error) {
    console.error("Error fetching middle categories:", error);
    res.status(500).json({ message: "Failed to fetch middle categories" });
  }
});
router5.get("/item-categories/minor", async (req, res) => {
  try {
    const { middleId } = req.query;
    const categories = await storage.getMinorCategories(middleId ? parseInt(middleId) : void 0);
    res.json(categories);
  } catch (error) {
    console.error("Error fetching minor categories:", error);
    res.status(500).json({ message: "Failed to fetch minor categories" });
  }
});
router5.post("/item-categories", async (req, res) => {
  try {
    const category = await storage.createItemCategory(req.body);
    res.status(201).json(category);
  } catch (error) {
    console.error("Error creating item category:", error);
    res.status(500).json({ message: "Failed to create item category" });
  }
});
router5.put("/item-categories/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    const updatedCategory = await storage.updateItemCategory(id, req.body);
    res.json(updatedCategory);
  } catch (error) {
    console.error("Error updating item category:", error);
    res.status(500).json({ message: "Failed to update item category" });
  }
});
router5.delete("/item-categories/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    await storage.deleteItemCategory(id);
    res.json({ message: "Item category deleted successfully" });
  } catch (error) {
    console.error("Error deleting item category:", error);
    res.status(500).json({ message: "Failed to delete item category" });
  }
});
var items_default = router5;

// server/routes/dashboard.ts
import { Router as Router6 } from "express";
import { sql as sql4 } from "drizzle-orm";
var router6 = Router6();
router6.get("/dashboard/test-db", async (req, res) => {
  try {
    const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
    const result = await db2.execute(sql4`SELECT COUNT(*) as count FROM purchase_orders`);
    res.json({ success: true, data: result });
  } catch (error) {
    console.error("DB test error:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});
router6.get("/dashboard/unified", async (req, res) => {
  try {
    if (req.query.force === "true") {
      cache.delete("unified_dashboard_data");
    }
    const stats = await OptimizedDashboardQueries.getUnifiedDashboardData();
    res.json(stats);
  } catch (error) {
    console.error("Error fetching dashboard data:", error);
    res.status(500).json({ message: "Failed to fetch dashboard data" });
  }
});
router6.get("/dashboard/recent-projects", async (req, res) => {
  try {
    const projects2 = await storage.getRecentProjectsThisMonth();
    res.json(projects2);
  } catch (error) {
    console.error("Error fetching recent projects:", error);
    res.status(500).json({ message: "Failed to fetch recent projects" });
  }
});
router6.get("/dashboard/urgent-orders", async (req, res) => {
  try {
    const orders = await storage.getUrgentOrders();
    res.json(orders);
  } catch (error) {
    console.error("Error fetching urgent orders:", error);
    res.status(500).json({ message: "Failed to fetch urgent orders" });
  }
});
router6.get("/dashboard/order-status-stats", async (req, res) => {
  try {
    const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
    if (!db2) {
      throw new Error("Database connection not available");
    }
    const statsResult = await db2.execute(
      sql4`SELECT 
        po.order_status as status,
        COUNT(*) as count,
        COALESCE(SUM(po.total_amount), 0) as totalAmount
      FROM purchase_orders po
      WHERE po.order_status IS NOT NULL
      GROUP BY po.order_status
      ORDER BY po.order_status`
    );
    const totalResult = await db2.execute(
      sql4`SELECT COUNT(*) as total FROM purchase_orders WHERE order_status IS NOT NULL`
    );
    const total = parseInt(totalResult.rows[0]?.total || "0");
    const stats = statsResult.rows.map((row) => ({
      status: row.status,
      count: parseInt(row.count || "0"),
      totalAmount: parseFloat(row.totalAmount || "0"),
      percentage: total > 0 ? Math.round(parseInt(row.count || "0") / total * 100) : 0
    }));
    const allStatuses = ["draft", "created", "sent", "delivered"];
    const completeStats = allStatuses.map((status) => {
      const existing = stats.find((s) => s.status === status);
      return existing || {
        status,
        count: 0,
        totalAmount: 0,
        percentage: 0
      };
    });
    res.json({
      stats: completeStats,
      total
    });
  } catch (error) {
    console.error("\u274C Order status stats error:", error);
    res.status(500).json({
      message: "Failed to fetch order status statistics",
      error: error.message
    });
  }
});
var dashboard_default = router6;

// server/routes/companies.ts
import { Router as Router7 } from "express";
init_schema();
import { sql as sql5 } from "drizzle-orm";
var router7 = Router7();
router7.get("/companies/debug", async (req, res) => {
  console.log("\u{1F50D} Debug endpoint called");
  try {
    console.log("\u{1F50D} Attempting to import db module...");
    const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
    console.log("\u{1F50D} DB module imported successfully");
    console.log("\u{1F50D} Attempting basic query...");
    const basicTest = await db2.execute(sql5`SELECT 1 as test`);
    console.log("\u{1F50D} Basic query successful:", basicTest);
    res.json({
      databaseUrlSet: !!process.env.DATABASE_URL,
      databaseUrlPreview: process.env.DATABASE_URL ? process.env.DATABASE_URL.substring(0, 30) + "..." : "not set",
      nodeEnv: process.env.NODE_ENV,
      allDbEnvVars: Object.keys(process.env).filter((key) => key.includes("DATABASE")),
      vercelEnv: process.env.VERCEL_ENV,
      dbConnection: "success",
      basicQueryResult: basicTest
    });
  } catch (error) {
    console.error("\u{1F50D} Debug endpoint error:", error);
    res.json({
      // Changed from res.status(500).json to res.json
      databaseUrlSet: !!process.env.DATABASE_URL,
      databaseUrlPreview: process.env.DATABASE_URL ? process.env.DATABASE_URL.substring(0, 30) + "..." : "not set",
      nodeEnv: process.env.NODE_ENV,
      allDbEnvVars: Object.keys(process.env).filter((key) => key.includes("DATABASE")),
      vercelEnv: process.env.VERCEL_ENV,
      dbConnection: "failed",
      error: error?.message,
      errorCode: error?.code,
      errorName: error?.name,
      stack: error?.stack?.substring(0, 500)
      // Add first 500 chars of stack trace
    });
  }
});
router7.get("/companies", async (req, res) => {
  try {
    console.log("\u{1F3E2} Fetching companies from database...");
    const companies3 = await storage.getCompanies();
    console.log(`\u2705 Successfully returning ${companies3.length} companies from database`);
    res.json(companies3);
  } catch (error) {
    console.error("\u274C Error fetching companies from database:", error);
    console.log("\u{1F504} Falling back to mock data for reliability...");
    const mockCompanies = [
      {
        id: 1,
        companyName: "\uC0BC\uC131\uAC74\uC124",
        businessNumber: "123-45-67890",
        address: "\uC11C\uC6B8\uC2DC \uAC15\uB0A8\uAD6C \uD14C\uD5E4\uB780\uB85C 123",
        contactPerson: "\uD64D\uAE38\uB3D9",
        phone: "02-1234-5678",
        email: "contact@samsung-construction.com",
        isActive: true,
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      },
      {
        id: 2,
        companyName: "\uD604\uB300\uAC74\uC124",
        businessNumber: "987-65-43210",
        address: "\uC11C\uC6B8\uC2DC \uC11C\uCD08\uAD6C \uAC15\uB0A8\uB300\uB85C 456",
        contactPerson: "\uAE40\uCCA0\uC218",
        phone: "02-9876-5432",
        email: "contact@hyundai-construction.com",
        isActive: true,
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      },
      {
        id: 3,
        companyName: "\uB300\uC6B0\uAC74\uC124",
        businessNumber: "555-66-77890",
        address: "\uC11C\uC6B8\uC2DC \uC911\uAD6C \uC138\uC885\uB300\uB85C 789",
        contactPerson: "\uC774\uC601\uD76C",
        phone: "02-5555-6666",
        email: "contact@daewoo-construction.com",
        isActive: true,
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      }
    ];
    console.log(`\u2705 Successfully returning ${mockCompanies.length} companies (fallback mock data)`);
    res.json(mockCompanies);
  }
});
router7.post("/companies", logoUpload.single("logo"), async (req, res) => {
  try {
    const companyData = { ...req.body };
    if (req.file) {
      companyData.logoUrl = `/uploads/${req.file.filename}`;
    }
    const validatedData = insertCompanySchema.parse(companyData);
    const company = await storage.createCompany(validatedData);
    res.status(201).json(company);
  } catch (error) {
    console.error("Error creating company:", error);
    res.status(500).json({ message: "Failed to create company" });
  }
});
router7.put("/companies/:id", logoUpload.single("logo"), async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    const updateData = { ...req.body };
    if (req.file) {
      updateData.logoUrl = `/uploads/${req.file.filename}`;
    }
    const updatedCompany = await storage.updateCompany(id, updateData);
    res.json(updatedCompany);
  } catch (error) {
    console.error("Error updating company:", error);
    res.status(500).json({ message: "Failed to update company" });
  }
});
var companies_default = router7;

// server/routes/admin.ts
import { Router as Router8 } from "express";
init_db();
init_schema();
import { eq as eq11, and as and7 } from "drizzle-orm";
var router8 = Router8();
router8.get("/users", requireAuth, requireAdmin, async (req, res) => {
  try {
    const users3 = await storage.getUsers();
    res.json(users3);
  } catch (error) {
    console.error("Error fetching users:", error);
    res.status(500).json({ message: "Failed to fetch users" });
  }
});
router8.get("/positions", async (req, res) => {
  try {
    const positions = await storage.getPositions();
    res.json(positions);
  } catch (error) {
    console.error("Error fetching positions:", error);
    res.status(500).json({ message: "Failed to fetch positions" });
  }
});
router8.get("/ui-terms", async (req, res) => {
  try {
    const terms = await storage.getUiTerms();
    res.json(terms);
  } catch (error) {
    console.error("Error fetching UI terms:", error);
    res.status(500).json({ message: "Failed to fetch UI terms" });
  }
});
router8.post("/ui-terms", requireAuth, requireAdmin, async (req, res) => {
  try {
    const term = await storage.createUiTerm(req.body);
    res.status(201).json(term);
  } catch (error) {
    console.error("Error creating UI term:", error);
    res.status(500).json({ message: "Failed to create UI term" });
  }
});
router8.get("/templates", async (req, res) => {
  try {
    const templates = await storage.getOrderTemplates();
    res.json(templates);
  } catch (error) {
    console.error("Error fetching templates:", error);
    res.status(500).json({ message: "Failed to fetch templates" });
  }
});
router8.get("/templates/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    const template = await storage.getOrderTemplate(id);
    if (!template) {
      return res.status(404).json({ message: "Template not found" });
    }
    res.json(template);
  } catch (error) {
    console.error("Error fetching template:", error);
    res.status(500).json({ message: "Failed to fetch template" });
  }
});
router8.post("/templates", requireAuth, async (req, res) => {
  try {
    const template = await storage.createOrderTemplate(req.body);
    res.status(201).json(template);
  } catch (error) {
    console.error("Error creating template:", error);
    res.status(500).json({ message: "Failed to create template" });
  }
});
router8.put("/templates/:id", requireAuth, async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    const template = await storage.updateOrderTemplate(id, req.body);
    res.json(template);
  } catch (error) {
    console.error("Error updating template:", error);
    res.status(500).json({ message: "Failed to update template" });
  }
});
router8.delete("/templates/:id", requireAuth, async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    await storage.deleteOrderTemplate(id);
    res.json({ message: "Template deleted successfully" });
  } catch (error) {
    console.error("Error deleting template:", error);
    res.status(500).json({ message: "Failed to delete template" });
  }
});
router8.get("/approval-workflow-settings", requireAuth, requireAdmin, async (req, res) => {
  try {
    const settings = await db.select().from(approvalWorkflowSettings).where(
      and7(
        eq11(approvalWorkflowSettings.isActive, true),
        eq11(approvalWorkflowSettings.companyId, 1)
      )
    ).limit(1);
    if (settings.length === 0) {
      res.json({
        id: 0,
        companyId: 1,
        approvalMode: "staged",
        directApprovalRoles: [],
        stagedApprovalThresholds: {
          field_worker: 0,
          project_manager: 5e6,
          hq_management: 3e7,
          executive: 1e8,
          admin: 999999999
        },
        requireAllStages: true,
        skipLowerStages: false,
        isActive: true
      });
    } else {
      res.json(settings[0]);
    }
  } catch (error) {
    console.error("Error fetching workflow settings:", error);
    res.status(500).json({ error: "Failed to fetch workflow settings" });
  }
});
router8.put("/approval-workflow-settings", requireAuth, requireAdmin, async (req, res) => {
  try {
    const {
      approvalMode,
      directApprovalRoles,
      stagedApprovalThresholds,
      requireAllStages,
      skipLowerStages
    } = req.body;
    const existing = await db.select().from(approvalWorkflowSettings).where(eq11(approvalWorkflowSettings.companyId, 1)).limit(1);
    if (existing.length === 0) {
      const [newSettings] = await db.insert(approvalWorkflowSettings).values({
        companyId: 1,
        approvalMode,
        directApprovalRoles,
        stagedApprovalThresholds,
        requireAllStages,
        skipLowerStages,
        isActive: true,
        createdBy: req.user.id
      }).returning();
      res.json(newSettings);
    } else {
      const [updatedSettings] = await db.update(approvalWorkflowSettings).set({
        approvalMode,
        directApprovalRoles,
        stagedApprovalThresholds,
        requireAllStages,
        skipLowerStages,
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq11(approvalWorkflowSettings.id, existing[0].id)).returning();
      res.json(updatedSettings);
    }
  } catch (error) {
    console.error("Error updating workflow settings:", error);
    res.status(500).json({ error: "Failed to update workflow settings" });
  }
});
var admin_default = router8;

// server/routes/excel-automation.ts
import { Router as Router9 } from "express";
import multer2 from "multer";
import path8 from "path";
import fs10 from "fs";

// server/utils/excel-automation-service.ts
init_db();
init_schema();
init_po_template_processor_mock();
import { eq as eq14, inArray as inArray2 } from "drizzle-orm";

// server/utils/vendor-validation.ts
init_db();
init_schema();
import { eq as eq13, sql as sql6 } from "drizzle-orm";
function levenshteinDistance(str1, str2) {
  const matrix = [];
  if (str1.length === 0) return str2.length;
  if (str2.length === 0) return str1.length;
  for (let i = 0; i <= str2.length; i++) {
    matrix[i] = [i];
  }
  for (let j = 0; j <= str1.length; j++) {
    matrix[0][j] = j;
  }
  for (let i = 1; i <= str2.length; i++) {
    for (let j = 1; j <= str1.length; j++) {
      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1,
          // substitution
          matrix[i][j - 1] + 1,
          // insertion
          matrix[i - 1][j] + 1
          // deletion
        );
      }
    }
  }
  return matrix[str2.length][str1.length];
}
function calculateSimilarity(str1, str2) {
  if (!str1 || !str2) return 0;
  const distance = levenshteinDistance(str1.toLowerCase(), str2.toLowerCase());
  const maxLength = Math.max(str1.length, str2.length);
  return maxLength === 0 ? 1 : (maxLength - distance) / maxLength;
}
function generateFallbackSuggestions(vendorName) {
  const commonVendorPatterns = [
    "\u321C\uC0BC\uC131\uC804\uC790",
    "\u321CLG\uC804\uC790",
    "\u321C\uD604\uB300\uC790\uB3D9\uCC28",
    "\u321CSK\uD558\uC774\uB2C9\uC2A4",
    "\u321C\uD3EC\uC2A4\uCF54",
    "\u321C\uC0BC\uC131\uBB3C\uC0B0",
    "\u321C\uD604\uB300\uAC74\uC124",
    "\u321C\uB300\uC6B0\uAC74\uC124",
    "\u321CGS\uAC74\uC124",
    "\u321C\uB86F\uB370\uAC74\uC124",
    "\u321C\uD55C\uD654\uC2DC\uC2A4\uD15C",
    "\u321C\uB450\uC0B0\uC911\uACF5\uC5C5",
    "\u321C\uCF54\uC6E8\uC774",
    "\u321C\uC544\uBAA8\uB808\uD37C\uC2DC\uD53D",
    "\u321CCJ\uC81C\uC77C\uC81C\uB2F9",
    "\u321C\uC2E0\uC138\uACC4",
    "\u321C\uB86F\uB370\uB9C8\uD2B8",
    "\u321C\uC774\uB9C8\uD2B8",
    "\u321C\uD648\uD50C\uB7EC\uC2A4",
    "\u321C\uBA54\uAC00\uB9C8\uD2B8",
    "\uD14C\uD06C\uB180\uB85C\uC9C0\u321C",
    "\uC5D4\uC9C0\uB2C8\uC5B4\uB9C1\u321C",
    "\uAC74\uC124\u321C",
    "\uC804\uC790\u321C",
    "\uC2DC\uC2A4\uD15C\u321C",
    "\uC194\uB8E8\uC158\u321C",
    "\uC11C\uBE44\uC2A4\u321C",
    "\uCEE8\uC124\uD305\u321C",
    "\uAC1C\uBC1C\u321C",
    "\uC81C\uC870\u321C"
  ];
  const suggestions = commonVendorPatterns.map((pattern) => {
    const similarity = calculateSimilarity(vendorName, pattern);
    const distance = levenshteinDistance(vendorName.toLowerCase(), pattern.toLowerCase());
    return {
      id: Math.floor(Math.random() * 1e3),
      // Mock ID
      name: pattern,
      email: `contact@${pattern.replace(/㈜/g, "").toLowerCase()}.co.kr`,
      phone: "02-0000-0000",
      contactPerson: "\uB2F4\uB2F9\uC790",
      similarity,
      distance
    };
  }).filter((suggestion) => suggestion.similarity >= 0.2).sort((a, b) => b.similarity - a.similarity).slice(0, 3);
  console.log(`\u{1F504} \uD3F4\uBC31 \uCD94\uCC9C \uC0DD\uC131: ${suggestions.length}\uAC1C \uCD94\uCC9C`);
  return suggestions;
}
async function validateVendorName(vendorName, vendorType = "\uAC70\uB798\uCC98") {
  console.log(`\u{1F50D} ${vendorType} \uAC80\uC99D \uC2DC\uC791: "${vendorName}"`);
  try {
    const quickTest = new Promise((_, reject) => {
      setTimeout(() => reject(new Error("Quick DB test timeout")), 1e4);
    });
    const testQuery = db.select({ count: sql6`1` }).from(vendors).limit(1);
    await Promise.race([testQuery, quickTest]);
    console.log(`\u2705 \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0 \uD655\uC778\uB428`);
  } catch (quickTestError) {
    const errorMessage = quickTestError instanceof Error ? quickTestError.message : "\uC54C \uC218 \uC5C6\uB294 \uC624\uB958";
    console.log(`\u{1F504} \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0 \uC2E4\uD328 \uAC10\uC9C0, \uC989\uC2DC \uD3F4\uBC31 \uBAA8\uB4DC\uB85C \uC804\uD658: "${vendorName}"`, errorMessage);
    const fallbackSuggestions = generateFallbackSuggestions(vendorName);
    return {
      vendorName,
      exists: false,
      exactMatch: void 0,
      suggestions: fallbackSuggestions
    };
  }
  try {
    let exactMatch = [];
    let aliasMatch = [];
    let allVendors = [];
    try {
      const dbTimeout = new Promise((_, reject) => {
        setTimeout(() => reject(new Error("Database connection timeout")), 5e3);
      });
      const exactMatchQuery = db.select({
        id: vendors.id,
        name: vendors.name,
        email: vendors.email,
        phone: vendors.phone,
        contactPerson: vendors.contactPerson,
        aliases: vendors.aliases
      }).from(vendors).where(eq13(vendors.name, vendorName)).limit(1);
      const aliasMatchQuery = db.select({
        id: vendors.id,
        name: vendors.name,
        email: vendors.email,
        phone: vendors.phone,
        contactPerson: vendors.contactPerson,
        aliases: vendors.aliases
      }).from(vendors).where(sql6`${vendors.aliases}::jsonb @> ${JSON.stringify([vendorName])}::jsonb`).limit(1);
      const allVendorsQuery = db.select({
        id: vendors.id,
        name: vendors.name,
        email: vendors.email,
        phone: vendors.phone,
        contactPerson: vendors.contactPerson,
        aliases: vendors.aliases
      }).from(vendors).where(eq13(vendors.isActive, true));
      exactMatch = await Promise.race([exactMatchQuery, dbTimeout]);
      aliasMatch = await Promise.race([aliasMatchQuery, dbTimeout]);
      allVendors = await Promise.race([allVendorsQuery, dbTimeout]);
    } catch (dbError) {
      console.log(`\u{1F504} \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0 \uC2E4\uD328, \uD3F4\uBC31 \uBAA8\uB4DC\uB85C \uC2E4\uD589: "${vendorName}"`);
      console.log(`DB \uC624\uB958:`, dbError?.message || dbError);
      const fallbackSuggestions = generateFallbackSuggestions(vendorName);
      return {
        vendorName,
        exists: false,
        exactMatch: void 0,
        suggestions: fallbackSuggestions
      };
    }
    const finalMatch = exactMatch.length > 0 ? exactMatch[0] : aliasMatch.length > 0 ? aliasMatch[0] : null;
    const suggestions = allVendors.map((vendor) => {
      const nameSimilarity = calculateSimilarity(vendorName, vendor.name);
      const nameDistance = levenshteinDistance(vendorName.toLowerCase(), vendor.name.toLowerCase());
      let maxAliasSimilarity = 0;
      let minAliasDistance = Infinity;
      if (vendor.aliases && Array.isArray(vendor.aliases)) {
        vendor.aliases.forEach((alias) => {
          const aliasSimilarity = calculateSimilarity(vendorName, alias);
          const aliasDistance = levenshteinDistance(vendorName.toLowerCase(), alias.toLowerCase());
          if (aliasSimilarity > maxAliasSimilarity) {
            maxAliasSimilarity = aliasSimilarity;
            minAliasDistance = aliasDistance;
          }
        });
      }
      const finalSimilarity = Math.max(nameSimilarity, maxAliasSimilarity);
      const finalDistance = Math.min(nameDistance, minAliasDistance);
      return {
        ...vendor,
        similarity: finalSimilarity,
        distance: finalDistance,
        matchedBy: finalSimilarity === nameSimilarity ? "name" : "alias"
      };
    }).filter((vendor) => {
      const isAlreadyMatched = finalMatch && vendor.id === finalMatch.id;
      return !isAlreadyMatched && vendor.similarity >= 0.3;
    }).sort((a, b) => {
      if (b.similarity !== a.similarity) {
        return b.similarity - a.similarity;
      }
      return a.distance - b.distance;
    }).slice(0, 5);
    const result = {
      vendorName,
      exists: finalMatch !== null,
      exactMatch: finalMatch || void 0,
      suggestions
    };
    console.log(`\u2705 ${vendorType} \uAC80\uC99D \uC644\uB8CC: exists=${result.exists}, suggestions=${suggestions.length}\uAC1C`);
    if (result.exactMatch) {
      const matchType = exactMatch.length > 0 ? "\uC774\uB984" : "\uBCC4\uCE6D";
      console.log(`\u{1F4CD} \uC815\uD655\uD55C \uB9E4\uCE6D (${matchType}): ${result.exactMatch.name} (ID: ${result.exactMatch.id})`);
      if (result.exactMatch.aliases && result.exactMatch.aliases.length > 0) {
        console.log(`   \uBCC4\uCE6D: ${result.exactMatch.aliases.join(", ")}`);
      }
    }
    suggestions.forEach((suggestion, index2) => {
      const matchInfo = suggestion.matchedBy === "alias" ? " [\uBCC4\uCE6D \uB9E4\uCE6D]" : "";
      console.log(`\u{1F4A1} \uCD94\uCC9C ${index2 + 1}: ${suggestion.name} (\uC720\uC0AC\uB3C4: ${(suggestion.similarity * 100).toFixed(1)}%${matchInfo})`);
    });
    return result;
  } catch (error) {
    console.error(`\u274C \uAC70\uB798\uCC98 \uAC80\uC99D \uC911 \uC624\uB958:`, error);
    if (error?.message?.includes("database") || error?.message?.includes("connection") || error?.message?.includes("fetch failed") || error?.message?.includes("NeonDbError") || error?.message?.includes("ENOTFOUND") || error?.name === "NeonDbError" || error?.code === "ENOTFOUND") {
      console.log(`\u{1F504} \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0 \uC2E4\uD328, \uD3F4\uBC31 \uBAA8\uB4DC\uB85C \uC2E4\uD589: "${vendorName}"`);
      const fallbackSuggestions = generateFallbackSuggestions(vendorName);
      return {
        vendorName,
        exists: false,
        // Can't verify without DB
        exactMatch: void 0,
        suggestions: fallbackSuggestions
      };
    }
    throw new Error(`\uAC70\uB798\uCC98 \uAC80\uC99D \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4: ${error}`);
  }
}
async function checkEmailConflict(vendorName, excelEmail) {
  try {
    console.log(`\u{1F4E7} \uC774\uBA54\uC77C \uCDA9\uB3CC \uAC80\uC0AC: "${vendorName}" - "${excelEmail}"`);
    let dbVendor = [];
    try {
      const dbTimeout = new Promise((_, reject) => {
        setTimeout(() => reject(new Error("Database connection timeout")), 3e3);
      });
      const dbVendorQuery = db.select({
        id: vendors.id,
        name: vendors.name,
        email: vendors.email,
        aliases: vendors.aliases
      }).from(vendors).where(
        sql6`${vendors.name} = ${vendorName} OR ${vendors.aliases}::jsonb @> ${JSON.stringify([vendorName])}::jsonb`
      ).limit(1);
      dbVendor = await Promise.race([dbVendorQuery, dbTimeout]);
    } catch (dbError) {
      console.log(`\u{1F504} \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0 \uC2E4\uD328, \uC774\uBA54\uC77C \uCDA9\uB3CC \uAC80\uC0AC \uC2A4\uD0B5: "${vendorName}"`);
      return {
        type: "no_conflict",
        excelEmail
      };
    }
    if (dbVendor.length === 0) {
      console.log(`\u2705 \uC774\uBA54\uC77C \uCDA9\uB3CC \uC5C6\uC74C: \uAC70\uB798\uCC98\uAC00 DB\uC5D0 \uC5C6\uC74C`);
      return {
        type: "no_conflict",
        excelEmail
      };
    }
    const vendor = dbVendor[0];
    if (vendor.email.toLowerCase() === excelEmail.toLowerCase()) {
      console.log(`\u2705 \uC774\uBA54\uC77C \uCDA9\uB3CC \uC5C6\uC74C: \uB3D9\uC77C\uD55C \uC774\uBA54\uC77C`);
      return {
        type: "no_conflict",
        excelEmail,
        dbEmail: vendor.email,
        vendorId: vendor.id,
        vendorName: vendor.name
      };
    }
    console.log(`\u26A0\uFE0F \uC774\uBA54\uC77C \uCDA9\uB3CC \uBC1C\uACAC: Excel="${excelEmail}" vs DB="${vendor.email}"`);
    return {
      type: "conflict",
      excelEmail,
      dbEmail: vendor.email,
      vendorId: vendor.id,
      vendorName: vendor.name
    };
  } catch (error) {
    console.error(`\u274C \uC774\uBA54\uC77C \uCDA9\uB3CC \uAC80\uC0AC \uC911 \uC624\uB958:`, error);
    if (error?.message?.includes("database") || error?.message?.includes("connection") || error?.message?.includes("fetch failed") || error?.message?.includes("NeonDbError") || error?.message?.includes("ENOTFOUND") || error?.name === "NeonDbError" || error?.code === "ENOTFOUND") {
      console.log(`\u{1F504} \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0 \uC2E4\uD328, \uC774\uBA54\uC77C \uCDA9\uB3CC \uAC80\uC0AC \uC2A4\uD0B5`);
      return {
        type: "no_conflict",
        excelEmail
      };
    }
    throw new Error(`\uC774\uBA54\uC77C \uCDA9\uB3CC \uAC80\uC0AC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4: ${error}`);
  }
}
async function validateMultipleVendors(vendorData) {
  try {
    console.log(`\u{1F504} \uB2E4\uC911 \uAC70\uB798\uCC98 \uAC80\uC99D \uC2DC\uC791: ${vendorData.length}\uAC1C \uD56D\uBAA9`);
    const vendorValidations = [];
    const deliveryValidations = [];
    const emailConflicts = [];
    for (const data of vendorData) {
      try {
        const vendorValidation = await validateVendorName(data.vendorName, "\uAC70\uB798\uCC98");
        vendorValidations.push(vendorValidation);
      } catch (error) {
        console.error(`\u274C \uAC70\uB798\uCC98 "${data.vendorName}" \uAC80\uC99D \uC2E4\uD328:`, error?.message || error);
        vendorValidations.push({
          vendorName: data.vendorName,
          exists: false,
          exactMatch: void 0,
          suggestions: generateFallbackSuggestions(data.vendorName)
        });
      }
      try {
        if (data.deliveryName && data.deliveryName !== data.vendorName) {
          const deliveryValidation = await validateVendorName(data.deliveryName, "\uB0A9\uD488\uCC98");
          deliveryValidations.push(deliveryValidation);
        }
      } catch (error) {
        console.error(`\u274C \uB0A9\uD488\uCC98 "${data.deliveryName}" \uAC80\uC99D \uC2E4\uD328:`, error?.message || error);
        if (data.deliveryName && data.deliveryName !== data.vendorName) {
          deliveryValidations.push({
            vendorName: data.deliveryName,
            exists: false,
            exactMatch: void 0,
            suggestions: generateFallbackSuggestions(data.deliveryName)
          });
        }
      }
      try {
        if (data.email) {
          const emailConflict = await checkEmailConflict(data.vendorName, data.email);
          emailConflicts.push(emailConflict);
        }
      } catch (error) {
        console.error(`\u274C \uC774\uBA54\uC77C \uCDA9\uB3CC \uAC80\uC0AC \uC2E4\uD328 "${data.vendorName}":`, error?.message || error);
        if (data.email) {
          emailConflicts.push({
            type: "no_conflict",
            excelEmail: data.email
          });
        }
      }
    }
    console.log(`\u2705 \uB2E4\uC911 \uAC70\uB798\uCC98 \uAC80\uC99D \uC644\uB8CC: \uAC70\uB798\uCC98=${vendorValidations.length}, \uB0A9\uD488\uCC98=${deliveryValidations.length}, \uC774\uBA54\uC77C\uCDA9\uB3CC=${emailConflicts.filter((c) => c.type === "conflict").length}`);
    return {
      vendorValidations,
      deliveryValidations,
      emailConflicts
    };
  } catch (error) {
    console.error(`\u274C \uB2E4\uC911 \uAC70\uB798\uCC98 \uAC80\uC99D \uC911 \uC624\uB958:`, error);
    throw new Error(`\uB2E4\uC911 \uAC70\uB798\uCC98 \uAC80\uC99D \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4: ${error}`);
  }
}

// server/utils/excel-automation-service.ts
init_excel_input_sheet_remover();
init_debug_logger();

// server/utils/excel-attachment-service.ts
init_db();
init_schema();
import fs8 from "fs";
import path6 from "path";
var ExcelAttachmentService = class {
  /**
   * 처리된 Excel 파일을 attachments 테이블에 저장
   * @param orderId 발주서 ID
   * @param processedExcelPath 처리된 Excel 파일 경로 (Input 시트 제거됨)
   * @param originalFileName 원본 파일명
   * @param uploadedBy 업로드한 사용자 ID
   */
  static async saveProcessedExcelFile(orderId, processedExcelPath, originalFileName, uploadedBy) {
    try {
      console.log(`\u{1F4CE} Excel \uCCA8\uBD80\uD30C\uC77C \uC800\uC7A5 \uC2DC\uC791: ${processedExcelPath}`);
      if (!fs8.existsSync(processedExcelPath)) {
        return {
          success: false,
          error: `\uCC98\uB9AC\uB41C Excel \uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4: ${processedExcelPath}`
        };
      }
      const stats = fs8.statSync(processedExcelPath);
      const fileName = path6.basename(processedExcelPath);
      const fileBuffer = fs8.readFileSync(processedExcelPath);
      const base64Data = fileBuffer.toString("base64");
      const [attachment] = await db.insert(attachments).values({
        orderId,
        originalName: originalFileName,
        storedName: fileName,
        filePath: `db://${fileName}`,
        // Base64 저장 표시
        fileSize: stats.size,
        mimeType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        uploadedBy,
        uploadedAt: /* @__PURE__ */ new Date(),
        fileData: base64Data
        // Base64 데이터 저장
      }).returning({ id: attachments.id });
      console.log(`\u2705 Excel \uCCA8\uBD80\uD30C\uC77C \uC800\uC7A5 \uC644\uB8CC: ID ${attachment.id}, \uD06C\uAE30: ${Math.round(stats.size / 1024)}KB`);
      return {
        success: true,
        attachmentId: attachment.id
      };
    } catch (error) {
      console.error("\u274C Excel \uCCA8\uBD80\uD30C\uC77C \uC800\uC7A5 \uC2E4\uD328:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * 원본 Excel 파일도 첨부파일로 저장 (필요시)
   */
  static async saveOriginalExcelFile(orderId, originalExcelPath, originalFileName, uploadedBy) {
    try {
      console.log(`\u{1F4CE} \uC6D0\uBCF8 Excel \uCCA8\uBD80\uD30C\uC77C \uC800\uC7A5 \uC2DC\uC791: ${originalExcelPath}`);
      if (!fs8.existsSync(originalExcelPath)) {
        return {
          success: false,
          error: `\uC6D0\uBCF8 Excel \uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4: ${originalExcelPath}`
        };
      }
      const stats = fs8.statSync(originalExcelPath);
      const fileName = `original_${path6.basename(originalExcelPath)}`;
      const fileBuffer = fs8.readFileSync(originalExcelPath);
      const base64Data = fileBuffer.toString("base64");
      const [attachment] = await db.insert(attachments).values({
        orderId,
        originalName: `[\uC6D0\uBCF8] ${originalFileName}`,
        storedName: fileName,
        filePath: `db://${fileName}`,
        fileSize: stats.size,
        mimeType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        uploadedBy,
        uploadedAt: /* @__PURE__ */ new Date(),
        fileData: base64Data
      }).returning({ id: attachments.id });
      console.log(`\u2705 \uC6D0\uBCF8 Excel \uCCA8\uBD80\uD30C\uC77C \uC800\uC7A5 \uC644\uB8CC: ID ${attachment.id}`);
      return {
        success: true,
        attachmentId: attachment.id
      };
    } catch (error) {
      console.error("\u274C \uC6D0\uBCF8 Excel \uCCA8\uBD80\uD30C\uC77C \uC800\uC7A5 \uC2E4\uD328:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
};

// server/utils/excel-automation-service.ts
import fs9 from "fs";
import path7 from "path";
var ExcelAutomationService = class {
  /**
   * 1단계: Excel 파일 업로드 및 파싱, DB 저장
   */
  static async processExcelUpload(filePath, userId) {
    DebugLogger.logFunctionEntry("ExcelAutomationService.processExcelUpload", {
      filePath,
      userId
    });
    console.log(`\u{1F50D} [DEBUG] Excel \uC790\uB3D9\uD654 \uD504\uB85C\uC138\uC2A4 \uC2DC\uC791 - \uD30C\uC77C: ${filePath}`);
    try {
      console.log(`\u{1F50D} [DEBUG] 0\uB2E8\uACC4: DB \uC5F0\uACB0 \uD14C\uC2A4\uD2B8 \uC2DC\uC791`);
      try {
        await db.select().from(purchaseOrders).limit(1);
        console.log(`\u2705 [DEBUG] DB \uC5F0\uACB0 \uC131\uACF5`);
      } catch (dbError) {
        console.error(`\u274C [DEBUG] DB \uC5F0\uACB0 \uC2E4\uD328:`, dbError);
        throw new Error(`\uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0 \uC2E4\uD328: ${dbError instanceof Error ? dbError.message : "Unknown DB error"}`);
      }
      console.log(`\u{1F50D} [DEBUG] 1\uB2E8\uACC4: Excel \uD30C\uC77C \uD30C\uC2F1 \uC2DC\uC791`);
      const parseResult = POTemplateProcessorMock.parseInputSheet(filePath);
      console.log(`\u{1F50D} [DEBUG] 1\uB2E8\uACC4 \uC644\uB8CC: ${parseResult.success ? "\uC131\uACF5" : "\uC2E4\uD328"}`);
      if (!parseResult.success) {
        console.log(`\u274C [DEBUG] Excel \uD30C\uC2F1 \uC2E4\uD328: ${parseResult.error}`);
        return {
          success: false,
          error: `Excel \uD30C\uC2F1 \uC2E4\uD328: ${parseResult.error}`
        };
      }
      console.log(`\u2705 [DEBUG] Excel \uD30C\uC2F1 \uC131\uACF5: ${parseResult.totalOrders}\uAC1C \uBC1C\uC8FC\uC11C, ${parseResult.totalItems}\uAC1C \uC544\uC774\uD15C`);
      console.log(`\u{1F50D} [DEBUG] 2\uB2E8\uACC4: DB \uC800\uC7A5 \uC2DC\uC791`);
      const saveResult = await POTemplateProcessorMock.saveToDatabase(
        parseResult.orders || [],
        userId
      );
      console.log(`\u{1F50D} [DEBUG] 2\uB2E8\uACC4 \uC644\uB8CC: ${saveResult.success ? "\uC131\uACF5" : "\uC2E4\uD328"}`);
      if (!saveResult.success) {
        console.log(`\u274C [DEBUG] DB \uC800\uC7A5 \uC2E4\uD328: ${saveResult.error}`);
        return {
          success: false,
          error: `DB \uC800\uC7A5 \uC2E4\uD328: ${saveResult.error}`
        };
      }
      console.log(`\u2705 [DEBUG] DB \uC800\uC7A5 \uC131\uACF5: ${saveResult.savedOrders}\uAC1C \uBC1C\uC8FC\uC11C \uC800\uC7A5\uB428`);
      console.log(`\u{1F50D} [DEBUG] 2.5\uB2E8\uACC4: \uCC98\uB9AC\uB41C Excel \uD30C\uC77C \uCCA8\uBD80 \uC2DC\uC791`);
      console.log(`\u{1F4CA} [DEBUG] saveResult:`, JSON.stringify(saveResult, null, 2));
      const originalFileName = path7.basename(filePath);
      if (saveResult.savedOrderNumbers && saveResult.savedOrderNumbers.length > 0) {
        console.log(`\u{1F4CB} [DEBUG] \uBC1C\uC8FC\uC11C \uBC88\uD638\uB4E4:`, saveResult.savedOrderNumbers);
        try {
          const orders = await db.select({ id: purchaseOrders.id, orderNumber: purchaseOrders.orderNumber }).from(purchaseOrders).where(inArray2(purchaseOrders.orderNumber, saveResult.savedOrderNumbers));
          console.log(`\u{1F50D} [DEBUG] \uC870\uD68C\uB41C \uBC1C\uC8FC\uC11C\uB4E4:`, orders);
          const processedExcelPath = filePath.replace(/\.(xlsx?)$/i, "_processed.$1");
          const removeResult = await removeAllInputSheets(filePath, processedExcelPath);
          if (removeResult.success && fs9.existsSync(processedExcelPath)) {
            console.log(`\u2705 [DEBUG] Input \uC2DC\uD2B8 \uC81C\uAC70 \uC644\uB8CC: ${processedExcelPath}`);
            for (const order of orders) {
              const attachResult = await ExcelAttachmentService.saveProcessedExcelFile(
                order.id,
                processedExcelPath,
                originalFileName,
                userId
              );
              if (attachResult.success) {
                console.log(`\u2705 [DEBUG] \uBC1C\uC8FC\uC11C ${order.orderNumber}\uC5D0 Excel \uCCA8\uBD80\uD30C\uC77C \uC800\uC7A5 \uC644\uB8CC: ID ${attachResult.attachmentId}`);
              } else {
                console.warn(`\u26A0\uFE0F [DEBUG] \uBC1C\uC8FC\uC11C ${order.orderNumber}\uC5D0 Excel \uCCA8\uBD80\uD30C\uC77C \uC800\uC7A5 \uC2E4\uD328: ${attachResult.error}`);
              }
            }
            try {
              fs9.unlinkSync(processedExcelPath);
              console.log(`\u{1F9F9} [DEBUG] \uC784\uC2DC \uCC98\uB9AC\uB41C Excel \uD30C\uC77C \uC815\uB9AC \uC644\uB8CC: ${processedExcelPath}`);
            } catch (cleanupError) {
              console.warn(`\u26A0\uFE0F [DEBUG] \uC784\uC2DC \uD30C\uC77C \uC815\uB9AC \uC2E4\uD328:`, cleanupError);
            }
          } else {
            console.warn(`\u26A0\uFE0F [DEBUG] Input \uC2DC\uD2B8 \uC81C\uAC70 \uC2E4\uD328: ${removeResult.error}`);
          }
        } catch (error) {
          console.warn("Excel \uCCA8\uBD80\uD30C\uC77C \uC800\uC7A5 \uC2E4\uD328:", error);
        }
      }
      console.log(`\u{1F50D} [DEBUG] 2.5\uB2E8\uACC4 \uC644\uB8CC: Excel \uCCA8\uBD80\uD30C\uC77C \uCC98\uB9AC \uC644\uB8CC`);
      console.log(`\u{1F50D} [DEBUG] 3\uB2E8\uACC4: \uAC70\uB798\uCC98 \uAC80\uC99D \uC2DC\uC791`);
      const vendorValidation = await this.validateVendorsFromExcel(filePath);
      console.log(`\u{1F50D} [DEBUG] 3\uB2E8\uACC4 \uC644\uB8CC: \uC720\uD6A8 \uAC70\uB798\uCC98 ${vendorValidation.validVendors.length}\uAC1C, \uBB34\uD6A8 \uAC70\uB798\uCC98 ${vendorValidation.invalidVendors.length}\uAC1C`);
      console.log(`\u{1F50D} [DEBUG] 4\uB2E8\uACC4: \uC774\uBA54\uC77C \uBBF8\uB9AC\uBCF4\uAE30 \uC0DD\uC131 \uC2DC\uC791`);
      const emailPreview = await this.generateEmailPreview(filePath, vendorValidation);
      console.log(`\u{1F50D} [DEBUG] 4\uB2E8\uACC4 \uC644\uB8CC: \uC218\uC2E0\uC790 ${emailPreview.recipients.length}\uBA85`);
      const orderIds = [];
      if (saveResult.savedOrderNumbers && saveResult.savedOrderNumbers.length > 0) {
        try {
          const orders = await db.select({ id: purchaseOrders.id, orderNumber: purchaseOrders.orderNumber }).from(purchaseOrders).where(eq14(purchaseOrders.orderNumber, saveResult.savedOrderNumbers[0]));
          if (orders.length > 0) {
            orderIds.push(orders[0].id);
          }
        } catch (error) {
          console.warn("\uBC1C\uC8FC\uC11C ID \uC870\uD68C \uC2E4\uD328:", error);
        }
      }
      const result = {
        success: true,
        data: {
          savedOrders: saveResult.savedOrders,
          savedOrderNumbers: saveResult.savedOrderNumbers,
          orderIds,
          // 첫 번째 발주서 ID 추가
          vendorValidation,
          emailPreview
        }
      };
      console.log(`\u2705 [DEBUG] \uC804\uCCB4 \uD504\uB85C\uC138\uC2A4 \uC131\uACF5 \uC644\uB8CC`);
      DebugLogger.logFunctionExit("ExcelAutomationService.processExcelUpload", result);
      return result;
    } catch (error) {
      console.log(`\u{1F4A5} [DEBUG] \uC804\uCCB4 \uD504\uB85C\uC138\uC2A4 \uC2E4\uD328: ${error instanceof Error ? error.message : "Unknown error"}`);
      DebugLogger.logError("ExcelAutomationService.processExcelUpload", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * 2단계: 거래처명 검증 및 이메일 추출
   */
  static async validateVendorsFromExcel(filePath) {
    DebugLogger.logFunctionEntry("ExcelAutomationService.validateVendorsFromExcel", { filePath });
    try {
      const parseResult = POTemplateProcessorMock.parseInputSheet(filePath);
      if (!parseResult.success || !parseResult.orders) {
        throw new Error("Excel \uD30C\uC2F1 \uC2E4\uD328");
      }
      const allVendorNames = [];
      const allDeliveryNames = [];
      for (const order of parseResult.orders) {
        if (order.vendorName && order.vendorName.trim()) {
          allVendorNames.push(order.vendorName.trim());
        }
        for (const item of order.items) {
          if (item.vendorName && item.vendorName.trim()) {
            allVendorNames.push(item.vendorName.trim());
          }
          if (item.deliveryName && item.deliveryName.trim()) {
            allDeliveryNames.push(item.deliveryName.trim());
          }
        }
      }
      const uniqueVendorNames = Array.from(new Set(allVendorNames));
      const uniqueDeliveryNames = Array.from(new Set(allDeliveryNames));
      console.log(`\u{1F4CB} \uAC80\uC99D\uD560 \uAC70\uB798\uCC98\uBA85 (${uniqueVendorNames.length}\uAC1C): ${uniqueVendorNames.join(", ")}`);
      console.log(`\u{1F4CB} \uAC80\uC99D\uD560 \uB0A9\uD488\uCC98\uBA85 (${uniqueDeliveryNames.length}\uAC1C): ${uniqueDeliveryNames.join(", ")}`);
      const vendorDeliveryPairs = [];
      for (const order of parseResult.orders) {
        for (const item of order.items) {
          const vendorName = item.vendorName?.trim() || order.vendorName?.trim() || "";
          const deliveryName = item.deliveryName?.trim() || vendorName;
          if (vendorName) {
            vendorDeliveryPairs.push({
              vendorName,
              deliveryName
            });
          }
        }
      }
      const uniquePairs = vendorDeliveryPairs.filter(
        (pair, index2, self) => self.findIndex((p) => p.vendorName === pair.vendorName && p.deliveryName === pair.deliveryName) === index2
      );
      console.log(`\u{1F4CB} \uAC80\uC99D\uD560 \uAC70\uB798\uCC98-\uB0A9\uD488\uCC98 \uC30D (${uniquePairs.length}\uAC1C): ${uniquePairs.map((p) => `${p.vendorName}\u2192${p.deliveryName}`).join(", ")}`);
      const vendorData = uniquePairs.map((pair) => ({
        vendorName: pair.vendorName,
        deliveryName: pair.deliveryName,
        email: void 0
        // 이메일은 별도로 추출하지 않음
      }));
      const validationResults2 = await validateMultipleVendors(vendorData);
      const validVendors = [];
      const invalidVendors = [];
      for (const result of validationResults2.vendorValidations) {
        if (result.exists && result.exactMatch) {
          validVendors.push({
            vendorName: result.vendorName,
            email: result.exactMatch.email,
            vendorId: result.exactMatch.id
          });
        } else {
          invalidVendors.push({
            vendorName: result.vendorName,
            suggestions: result.suggestions.map((s) => ({
              id: s.id,
              name: s.name,
              email: s.email,
              similarity: s.similarity
            }))
          });
        }
      }
      const validationStep = {
        validVendors,
        invalidVendors,
        needsUserAction: invalidVendors.length > 0
      };
      console.log(`\u2705 \uC720\uD6A8\uD55C \uAC70\uB798\uCC98: ${validVendors.length}\uAC1C`);
      console.log(`\u26A0\uFE0F \uD655\uC778 \uD544\uC694\uD55C \uAC70\uB798\uCC98: ${invalidVendors.length}\uAC1C`);
      return validationStep;
    } catch (error) {
      DebugLogger.logError("ExcelAutomationService.validateVendorsFromExcel", error);
      return {
        validVendors: [],
        invalidVendors: [],
        needsUserAction: true
      };
    }
  }
  /**
   * 3단계: 이메일 미리보기 생성
   */
  static async generateEmailPreview(filePath, vendorValidation) {
    DebugLogger.logFunctionEntry("ExcelAutomationService.generateEmailPreview", {
      filePath,
      validVendorCount: vendorValidation.validVendors.length
    });
    try {
      const recipients = Array.from(
        new Set(vendorValidation.validVendors.map((v) => v.email))
      ).filter((email) => email && email.trim());
      const timestamp2 = Date.now();
      const processedPath = path7.join(
        path7.dirname(filePath),
        `processed-${timestamp2}.xlsx`
      );
      await removeAllInputSheets(filePath, processedPath);
      const pdfPath = processedPath.replace(/\.(xlsx?)$/i, ".pdf");
      console.log(`\u{1F4C4} Excel\uC744 PDF\uB85C \uBCC0\uD658 \uC2DC\uB3C4 \uC911: ${pdfPath}`);
      let pdfConversionSuccess = false;
      try {
        const result = await UnifiedExcelPdfService.convertExcelToPDF(processedPath, {
          outputPath: pdfPath,
          quality: "high",
          orientation: "landscape",
          excludeSheets: ["Input", "Settings"],
          watermark: "\uBC1C\uC8FC\uC11C",
          retryCount: 2
        });
        if (result.success) {
          pdfConversionSuccess = true;
          const fileSize = result.stats ? Math.round(result.stats.fileSize / 1024) : 0;
          console.log(`\u2705 ${result.engineUsed} \uC5D4\uC9C4\uC73C\uB85C PDF \uBCC0\uD658 \uC131\uACF5: ${pdfPath} (${fileSize}KB)`);
          if (result.warnings && result.warnings.length > 0) {
            console.warn(`\u26A0\uFE0F \uACBD\uACE0: ${result.warnings.join(", ")}`);
          }
        } else {
          throw new Error(result.error || "PDF \uBCC0\uD658 \uC2E4\uD328");
        }
      } catch (pdfError) {
        console.error("\u26A0\uFE0F \uD1B5\uD569 PDF \uC11C\uBE44\uC2A4 \uC2E4\uD328 - Excel \uD30C\uC77C\uB9CC \uCCA8\uBD80\uB429\uB2C8\uB2E4:", pdfError);
      }
      const stats = fs9.statSync(processedPath);
      const pdfStats = pdfConversionSuccess && fs9.existsSync(pdfPath) ? fs9.statSync(pdfPath) : null;
      const emailPreview = {
        recipients,
        subject: `\uBC1C\uC8FC\uC11C - ${path7.basename(filePath, path7.extname(filePath))} (${(/* @__PURE__ */ new Date()).toLocaleDateString("ko-KR")})`,
        attachmentInfo: {
          originalFile: path7.basename(filePath),
          processedFile: path7.basename(processedPath),
          processedPdfFile: pdfStats ? path7.basename(pdfPath) : void 0,
          fileSize: stats.size,
          pdfFileSize: pdfStats ? pdfStats.size : void 0
        },
        canProceed: recipients.length > 0 && !vendorValidation.needsUserAction
      };
      console.log(`\u{1F4E7} \uC774\uBA54\uC77C \uC218\uC2E0\uC790: ${recipients.join(", ")}`);
      console.log(`\u{1F4CE} \uCCA8\uBD80\uD30C\uC77C: ${emailPreview.attachmentInfo.processedFile} (${Math.round(stats.size / 1024)}KB)`);
      if (pdfStats) {
        console.log(`\u{1F4C4} PDF \uD30C\uC77C: ${emailPreview.attachmentInfo.processedPdfFile} (${Math.round(pdfStats.size / 1024)}KB)`);
      }
      return emailPreview;
    } catch (error) {
      DebugLogger.logError("ExcelAutomationService.generateEmailPreview", error);
      return {
        recipients: [],
        subject: "",
        attachmentInfo: {
          originalFile: "",
          processedFile: "",
          fileSize: 0
        },
        canProceed: false
      };
    }
  }
  /**
   * 4단계: 이메일 발송 실행 (Excel과 PDF 첨부)
   */
  static async sendEmails(processedFilePath, recipients, emailOptions = {}) {
    DebugLogger.logFunctionEntry("ExcelAutomationService.sendEmails", {
      processedFilePath,
      recipients,
      emailOptions
    });
    try {
      const emailService4 = new POEmailService();
      const emailResults = [];
      const failedEmails = [];
      for (const email of recipients) {
        try {
          console.log(`\u{1F4E7} \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC911: ${email}`);
          const sendResult = emailOptions.orderId ? await emailService4.sendPOWithOrderItemsFromDB(
            processedFilePath,
            emailOptions.orderId,
            {
              to: email,
              subject: emailOptions.subject || `\uBC1C\uC8FC\uC11C - ${(/* @__PURE__ */ new Date()).toLocaleDateString("ko-KR")}`,
              orderNumber: emailOptions.orderNumber,
              additionalMessage: emailOptions.additionalMessage
            }
          ) : await emailService4.sendPOWithOriginalFormat(
            processedFilePath,
            {
              to: email,
              subject: emailOptions.subject || `\uBC1C\uC8FC\uC11C - ${(/* @__PURE__ */ new Date()).toLocaleDateString("ko-KR")}`,
              orderNumber: emailOptions.orderNumber,
              additionalMessage: emailOptions.additionalMessage
            }
          );
          if (sendResult.success) {
            emailResults.push({
              email,
              status: "sent",
              messageId: sendResult.messageId
            });
          } else {
            throw new Error(sendResult.error || "Email sending failed");
          }
          console.log(`\u2705 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC131\uACF5: ${email}`);
        } catch (emailError) {
          const errorMessage = emailError instanceof Error ? emailError.message : "Unknown error";
          emailResults.push({
            email,
            status: "failed",
            error: errorMessage
          });
          failedEmails.push({
            email,
            error: errorMessage
          });
          console.error(`\u274C \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328: ${email} - ${errorMessage}`);
        }
      }
      const result = {
        success: failedEmails.length === 0,
        sentEmails: emailResults.filter((r) => r.status === "sent").length,
        failedEmails,
        emailResults
      };
      if (result.success && result.sentEmails > 0) {
        const orderNumbersToUpdate = emailOptions.savedOrderNumbers || (emailOptions.orderNumber ? [emailOptions.orderNumber] : []);
        console.log(`\u{1F504} [Excel\uC790\uB3D9\uD654] \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC2DC\uB3C4:`, {
          resultSuccess: result.success,
          sentEmails: result.sentEmails,
          savedOrderNumbers: emailOptions.savedOrderNumbers?.length || 0,
          singleOrderNumber: emailOptions.orderNumber || "none",
          orderNumbersToUpdate: orderNumbersToUpdate.length
        });
        if (orderNumbersToUpdate.length > 0) {
          try {
            await this.updateMultipleOrderStatusToSent(orderNumbersToUpdate);
            console.log(`\u2705 [Excel\uC790\uB3D9\uD654] \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC644\uB8CC: ${orderNumbersToUpdate.length}\uAC1C \uBC1C\uC8FC\uC11C \u2192 sent`);
            console.log(`\u{1F4CB} \uC5C5\uB370\uC774\uD2B8\uB41C \uBC1C\uC8FC\uBC88\uD638\uB4E4:`, orderNumbersToUpdate);
          } catch (updateError) {
            console.error(`\u274C [Excel\uC790\uB3D9\uD654] \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC2E4\uD328:`, updateError);
          }
        } else {
          console.log(`\u26A0\uFE0F [Excel\uC790\uB3D9\uD654] \uC5C5\uB370\uC774\uD2B8\uD560 \uBC1C\uC8FC\uBC88\uD638\uAC00 \uC5C6\uC74C`);
        }
      } else {
        console.log(`\u26A0\uFE0F [Excel\uC790\uB3D9\uD654] \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC870\uAC74 \uBBF8\uCDA9\uC871:`, {
          resultSuccess: result.success,
          sentEmails: result.sentEmails
        });
      }
      DebugLogger.logFunctionExit("ExcelAutomationService.sendEmails", result);
      return result;
    } catch (error) {
      DebugLogger.logError("ExcelAutomationService.sendEmails", error);
      return {
        success: false,
        sentEmails: 0,
        failedEmails: recipients.map((email) => ({
          email,
          error: error instanceof Error ? error.message : "Unknown error"
        })),
        emailResults: []
      };
    }
  }
  /**
   * 발주서 상태를 'sent'로 업데이트하는 헬퍼 메소드
   */
  static async updateOrderStatusToSent(orderNumber) {
    const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
    const { purchaseOrders: purchaseOrders3 } = await Promise.resolve().then(() => (init_schema(), schema_exports));
    const { eq: eq38 } = await import("drizzle-orm");
    await db2.update(purchaseOrders3).set({
      orderStatus: "sent",
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq38(purchaseOrders3.orderNumber, orderNumber));
  }
  /**
   * 여러 발주서의 상태를 'sent'로 업데이트하는 헬퍼 메소드
   */
  static async updateMultipleOrderStatusToSent(orderNumbers) {
    const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
    const { purchaseOrders: purchaseOrders3 } = await Promise.resolve().then(() => (init_schema(), schema_exports));
    const { inArray: inArray7 } = await import("drizzle-orm");
    await db2.update(purchaseOrders3).set({
      orderStatus: "sent",
      updatedAt: /* @__PURE__ */ new Date()
    }).where(inArray7(purchaseOrders3.orderNumber, orderNumbers));
  }
  /**
   * 거래처 선택 결과를 반영하여 이메일 미리보기 업데이트
   */
  static async updateEmailPreviewWithVendorSelection(filePath, selectedVendors) {
    DebugLogger.logFunctionEntry("ExcelAutomationService.updateEmailPreviewWithVendorSelection", {
      filePath,
      selectedVendors
    });
    try {
      const recipients = Array.from(
        new Set(selectedVendors.map((v) => v.selectedVendorEmail))
      ).filter((email) => email && email.trim());
      const timestamp2 = Date.now();
      const processedPath = path7.join(
        path7.dirname(filePath),
        `processed-${timestamp2}.xlsx`
      );
      await removeAllInputSheets(filePath, processedPath);
      const pdfPath = processedPath.replace(/\.(xlsx?)$/i, ".pdf");
      console.log(`\u{1F4C4} Excel\uC744 PDF\uB85C \uBCC0\uD658 \uC2DC\uB3C4 \uC911: ${pdfPath}`);
      let pdfConversionSuccess = false;
      try {
        const result = await UnifiedExcelPdfService.convertExcelToPDF(processedPath, {
          outputPath: pdfPath,
          quality: "high",
          orientation: "landscape",
          excludeSheets: ["Input", "Settings"],
          watermark: "\uBC1C\uC8FC\uC11C",
          retryCount: 2
        });
        if (result.success) {
          pdfConversionSuccess = true;
          const fileSize = result.stats ? Math.round(result.stats.fileSize / 1024) : 0;
          console.log(`\u2705 ${result.engineUsed} \uC5D4\uC9C4\uC73C\uB85C PDF \uBCC0\uD658 \uC131\uACF5: ${pdfPath} (${fileSize}KB)`);
          if (result.warnings && result.warnings.length > 0) {
            console.warn(`\u26A0\uFE0F \uACBD\uACE0: ${result.warnings.join(", ")}`);
          }
        } else {
          throw new Error(result.error || "PDF \uBCC0\uD658 \uC2E4\uD328");
        }
      } catch (pdfError) {
        console.error("\u26A0\uFE0F \uD1B5\uD569 PDF \uC11C\uBE44\uC2A4 \uC2E4\uD328 - Excel \uD30C\uC77C\uB9CC \uCCA8\uBD80\uB429\uB2C8\uB2E4:", pdfError);
      }
      const stats = fs9.statSync(processedPath);
      const pdfStats = pdfConversionSuccess && fs9.existsSync(pdfPath) ? fs9.statSync(pdfPath) : null;
      return {
        recipients,
        subject: `\uBC1C\uC8FC\uC11C - ${path7.basename(filePath, path7.extname(filePath))} (${(/* @__PURE__ */ new Date()).toLocaleDateString("ko-KR")})`,
        attachmentInfo: {
          originalFile: path7.basename(filePath),
          processedFile: path7.basename(processedPath),
          processedPdfFile: pdfStats ? path7.basename(pdfPath) : void 0,
          fileSize: stats.size,
          pdfFileSize: pdfStats ? pdfStats.size : void 0
        },
        canProceed: recipients.length > 0
      };
    } catch (error) {
      DebugLogger.logError("ExcelAutomationService.updateEmailPreviewWithVendorSelection", error);
      return {
        recipients: [],
        subject: "",
        attachmentInfo: {
          originalFile: "",
          processedFile: "",
          fileSize: 0
        },
        canProceed: false
      };
    }
  }
};

// server/routes/excel-automation.ts
init_debug_logger();
var storage2 = multer2.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir2 = process.env.VERCEL ? "/tmp" : "uploads";
    if (!process.env.VERCEL && !fs10.existsSync(uploadDir2)) {
      fs10.mkdirSync(uploadDir2, { recursive: true });
    }
    cb(null, uploadDir2);
  },
  filename: (req, file, cb) => {
    const timestamp2 = Date.now();
    const originalName = Buffer.from(file.originalname, "latin1").toString("utf8");
    cb(null, `${timestamp2}-${originalName}`);
  }
});
var upload2 = multer2({
  storage: storage2,
  fileFilter: (req, file, cb) => {
    console.log("=== Excel Automation File Upload Debug ===");
    console.log("File name:", file.originalname);
    console.log("File MIME type:", file.mimetype);
    const validMimeTypes = [
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      "application/vnd.ms-excel",
      "application/vnd.ms-excel.sheet.macroEnabled.12",
      "application/octet-stream"
      // Sometimes Excel files are uploaded as octet-stream
    ];
    const fileName = file.originalname.toLowerCase();
    const hasValidExtension = fileName.endsWith(".xlsx") || fileName.endsWith(".xls") || fileName.endsWith(".xlsm");
    const hasValidMimeType = validMimeTypes.includes(file.mimetype);
    console.log("Valid MIME type:", hasValidMimeType);
    console.log("Valid extension:", hasValidExtension);
    if (hasValidMimeType && hasValidExtension) {
      console.log("File accepted:", file.originalname);
      cb(null, true);
    } else {
      console.log("File rejected:", file.originalname, "MIME type:", file.mimetype, "Extension valid:", hasValidExtension);
      cb(new Error("Only Excel files are allowed"));
    }
  },
  limits: {
    fileSize: 10 * 1024 * 1024
    // 10MB
  }
});
var router9 = Router9();
router9.post("/upload-and-process", requireAuth, upload2.single("file"), async (req, res) => {
  console.log(`\u{1F680} [API] Excel automation request received`);
  DebugLogger.logExecutionPath("/api/excel-automation/upload-and-process", "ExcelAutomationService.processExcelUpload");
  const timeoutDuration = process.env.VERCEL ? 55e3 : 12e4;
  let responseHandled = false;
  const timeoutHandler = setTimeout(() => {
    if (!responseHandled) {
      console.log(`\u23F1\uFE0F [API] Processing timeout reached (${timeoutDuration}ms)`);
      responseHandled = true;
      res.status(202).json({
        success: false,
        error: "\uCC98\uB9AC \uC2DC\uAC04\uC774 \uCD08\uACFC\uB418\uC5C8\uC2B5\uB2C8\uB2E4. \uD30C\uC77C\uC774 \uB108\uBB34 \uD06C\uAC70\uB098 \uBCF5\uC7A1\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.",
        code: "TIMEOUT",
        message: "\uB354 \uC791\uC740 \uD30C\uC77C\uB85C \uB2E4\uC2DC \uC2DC\uB3C4\uD558\uAC70\uB098 \uD30C\uC77C\uC744 \uB098\uB204\uC5B4 \uC5C5\uB85C\uB4DC\uD574\uC8FC\uC138\uC694."
      });
    }
  }, timeoutDuration);
  try {
    console.log(`\u{1F50D} [API] Request file:`, req.file ? "Present" : "Missing");
    console.log(`\u{1F50D} [API] Request user:`, req.user ? `ID: ${req.user.id}` : "Missing");
    if (!req.file) {
      console.log(`\u274C [API] No file uploaded`);
      clearTimeout(timeoutHandler);
      responseHandled = true;
      return res.status(400).json({
        success: false,
        error: "\uD30C\uC77C\uC774 \uC5C5\uB85C\uB4DC\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4."
      });
    }
    const filePath = req.file.path;
    const userId = req.user?.id;
    if (!userId) {
      console.log(`\u274C [API] User not authenticated`);
      clearTimeout(timeoutHandler);
      responseHandled = true;
      return res.status(401).json({
        success: false,
        error: "\uC0AC\uC6A9\uC790 \uC778\uC99D\uC774 \uD544\uC694\uD569\uB2C8\uB2E4."
      });
    }
    console.log(`\u{1F4C1} [API] Excel \uC790\uB3D9\uD654 \uCC98\uB9AC \uC2DC\uC791: ${filePath}, \uC0AC\uC6A9\uC790: ${userId}, \uD30C\uC77C\uD06C\uAE30: ${req.file.size}bytes`);
    console.log(`\u{1F504} [API] ExcelAutomationService.processExcelUpload \uD638\uCD9C \uC2DC\uC791`);
    const result = await ExcelAutomationService.processExcelUpload(filePath, userId);
    console.log(`\u2705 [API] ExcelAutomationService.processExcelUpload \uC644\uB8CC:`, result.success ? "\uC131\uACF5" : "\uC2E4\uD328");
    if (!result.success) {
      if (fs10.existsSync(filePath)) {
        fs10.unlinkSync(filePath);
      }
      clearTimeout(timeoutHandler);
      if (!responseHandled) {
        responseHandled = true;
        return res.status(400).json(result);
      }
      return;
    }
    clearTimeout(timeoutHandler);
    if (!responseHandled) {
      responseHandled = true;
      res.json({
        success: true,
        message: "Excel \uD30C\uC77C \uCC98\uB9AC \uC644\uB8CC",
        data: {
          ...result.data,
          filePath,
          fileName: req.file.originalname,
          fileSize: req.file.size
        }
      });
    }
  } catch (error) {
    clearTimeout(timeoutHandler);
    console.error("\u274C [API] Excel \uC790\uB3D9\uD654 \uCC98\uB9AC \uC624\uB958:", error);
    if (req.file?.path && fs10.existsSync(req.file.path)) {
      console.log(`\u{1F5D1}\uFE0F [API] \uC624\uB958\uB85C \uC778\uD55C \uC784\uC2DC \uD30C\uC77C \uC815\uB9AC: ${req.file.path}`);
      fs10.unlinkSync(req.file.path);
    }
    let errorMessage = "\uC11C\uBC84 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.";
    let statusCode = 500;
    if (error instanceof Error) {
      if (error.message.includes("Database") || error.message.includes("connection")) {
        errorMessage = "\uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.";
        statusCode = 503;
      } else if (error.message.includes("timeout")) {
        errorMessage = "\uCC98\uB9AC \uC2DC\uAC04\uC774 \uCD08\uACFC\uB418\uC5C8\uC2B5\uB2C8\uB2E4. \uD30C\uC77C \uD06C\uAE30\uB97C \uD655\uC778\uD574\uC8FC\uC138\uC694.";
        statusCode = 408;
      } else if (error.message.includes("memory") || error.message.includes("Memory")) {
        errorMessage = "\uBA54\uBAA8\uB9AC \uBD80\uC871\uC73C\uB85C \uCC98\uB9AC\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4. \uB354 \uC791\uC740 \uD30C\uC77C\uB85C \uC2DC\uB3C4\uD574\uC8FC\uC138\uC694.";
        statusCode = 413;
      } else if (error.message.includes("parse") || error.message.includes("Excel")) {
        errorMessage = "Excel \uD30C\uC77C \uD615\uC2DD\uC5D0 \uC624\uB958\uAC00 \uC788\uC2B5\uB2C8\uB2E4. \uD15C\uD50C\uB9BF\uC744 \uD655\uC778\uD574\uC8FC\uC138\uC694.";
        statusCode = 422;
      }
    }
    console.error(`\u274C [API] \uCD5C\uC885 \uC751\uB2F5: ${statusCode} - ${errorMessage}`);
    if (!responseHandled) {
      responseHandled = true;
      res.status(statusCode).json({
        success: false,
        error: errorMessage,
        details: error instanceof Error ? error.message : "Unknown error",
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      });
    }
  }
});
router9.post("/update-email-preview", requireAuth, async (req, res) => {
  DebugLogger.logExecutionPath("/api/excel-automation/update-email-preview", "ExcelAutomationService.updateEmailPreviewWithVendorSelection");
  try {
    const { filePath, selectedVendors } = req.body;
    if (!filePath) {
      return res.status(400).json({
        success: false,
        error: "\uD30C\uC77C \uACBD\uB85C\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4."
      });
    }
    if (!Array.isArray(selectedVendors)) {
      return res.status(400).json({
        success: false,
        error: "\uC120\uD0DD\uB41C \uAC70\uB798\uCC98 \uC815\uBCF4\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4."
      });
    }
    console.log(`\u{1F4E7} \uC774\uBA54\uC77C \uBBF8\uB9AC\uBCF4\uAE30 \uC5C5\uB370\uC774\uD2B8: ${selectedVendors.length}\uAC1C \uAC70\uB798\uCC98`);
    const emailPreview = await ExcelAutomationService.updateEmailPreviewWithVendorSelection(
      filePath,
      selectedVendors
    );
    res.json({
      success: true,
      message: "\uC774\uBA54\uC77C \uBBF8\uB9AC\uBCF4\uAE30 \uC5C5\uB370\uC774\uD2B8 \uC644\uB8CC",
      data: { emailPreview }
    });
  } catch (error) {
    console.error("\uC774\uBA54\uC77C \uBBF8\uB9AC\uBCF4\uAE30 \uC5C5\uB370\uC774\uD2B8 \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      error: "\uC11C\uBC84 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router9.post("/send-emails", requireAuth, async (req, res) => {
  DebugLogger.logExecutionPath("/api/excel-automation/send-emails", "ExcelAutomationService.sendEmails");
  try {
    const {
      processedFilePath,
      recipients,
      savedOrderNumbers = [],
      orderIds = [],
      emailOptions = {}
    } = req.body;
    if (!processedFilePath) {
      return res.status(400).json({
        success: false,
        error: "\uCC98\uB9AC\uB41C \uD30C\uC77C \uACBD\uB85C\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4."
      });
    }
    if (!Array.isArray(recipients) || recipients.length === 0) {
      return res.status(400).json({
        success: false,
        error: "\uC774\uBA54\uC77C \uC218\uC2E0\uC790\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4."
      });
    }
    if (!fs10.existsSync(processedFilePath)) {
      return res.status(400).json({
        success: false,
        error: "\uCC98\uB9AC\uB41C \uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4."
      });
    }
    console.log(`\u{1F4E7} \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2DC\uC791: ${recipients.length}\uBA85`);
    const sendResult = await ExcelAutomationService.sendEmails(
      processedFilePath,
      recipients,
      {
        ...emailOptions,
        savedOrderNumbers,
        // 발주번호들을 함께 전달
        orderId: orderIds.length > 0 ? orderIds[0] : void 0
        // 첫 번째 발주서 ID 전달
      }
    );
    res.json({
      success: sendResult.success,
      message: sendResult.success ? `\uC774\uBA54\uC77C \uBC1C\uC1A1 \uC644\uB8CC (\uC131\uACF5: ${sendResult.sentEmails}\uAC1C)` : `\uC774\uBA54\uC77C \uBC1C\uC1A1 \uBD80\uBD84 \uC2E4\uD328 (\uC131\uACF5: ${sendResult.sentEmails}\uAC1C, \uC2E4\uD328: ${sendResult.failedEmails.length}\uAC1C)`,
      data: sendResult
    });
  } catch (error) {
    console.error("\uC774\uBA54\uC77C \uBC1C\uC1A1 \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      error: "\uC11C\uBC84 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router9.post("/validate-vendors", requireAuth, async (req, res) => {
  try {
    const { filePath } = req.body;
    if (!filePath || !fs10.existsSync(filePath)) {
      return res.status(400).json({
        success: false,
        error: "\uC720\uD6A8\uD55C \uD30C\uC77C \uACBD\uB85C\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4."
      });
    }
    const vendorValidation = await ExcelAutomationService.validateVendorsFromExcel(filePath);
    res.json({
      success: true,
      message: "\uAC70\uB798\uCC98 \uAC80\uC99D \uC644\uB8CC",
      data: { vendorValidation }
    });
  } catch (error) {
    console.error("\uAC70\uB798\uCC98 \uAC80\uC99D \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      error: "\uC11C\uBC84 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router9.get("/download/:filename", requireAuth, (req, res) => {
  try {
    const filename = req.params.filename;
    const filePath = path8.join("uploads", filename);
    if (!fs10.existsSync(filePath)) {
      return res.status(404).json({
        success: false,
        error: "\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4."
      });
    }
    res.download(filePath, filename, (err) => {
      if (err) {
        console.error("\uD30C\uC77C \uB2E4\uC6B4\uB85C\uB4DC \uC624\uB958:", err);
        res.status(500).json({
          success: false,
          error: "\uD30C\uC77C \uB2E4\uC6B4\uB85C\uB4DC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."
        });
      }
    });
  } catch (error) {
    console.error("\uD30C\uC77C \uB2E4\uC6B4\uB85C\uB4DC \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      error: "\uC11C\uBC84 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."
    });
  }
});
router9.post("/debug-upload", requireAuth, upload2.single("file"), async (req, res) => {
  console.log(`\u{1F41B} [DEBUG] Excel automation debug request received`);
  let step = 0;
  const startTime = Date.now();
  try {
    step = 1;
    console.log(`\u{1F41B} [DEBUG] Step ${step}: Request validation`);
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: "\uD30C\uC77C\uC774 \uC5C5\uB85C\uB4DC\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4.",
        step,
        duration: Date.now() - startTime
      });
    }
    step = 2;
    console.log(`\u{1F41B} [DEBUG] Step ${step}: Database connection test`);
    const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
    const { purchaseOrders: purchaseOrders3 } = await Promise.resolve().then(() => (init_schema(), schema_exports));
    await db2.select().from(purchaseOrders3).limit(1);
    console.log(`\u{1F41B} [DEBUG] Step ${step} PASSED: DB connection OK`);
    step = 3;
    console.log(`\u{1F41B} [DEBUG] Step ${step}: File path check`);
    const filePath = req.file.path;
    const fs22 = await import("fs");
    if (!fs22.existsSync(filePath)) {
      return res.status(400).json({
        success: false,
        error: "\uC5C5\uB85C\uB4DC\uB41C \uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
        step,
        duration: Date.now() - startTime
      });
    }
    console.log(`\u{1F41B} [DEBUG] Step ${step} PASSED: File exists at ${filePath}`);
    step = 4;
    console.log(`\u{1F41B} [DEBUG] Step ${step}: Excel parsing test`);
    const { POTemplateProcessorMock: POTemplateProcessorMock2 } = await Promise.resolve().then(() => (init_po_template_processor_mock(), po_template_processor_mock_exports));
    const parseResult = POTemplateProcessorMock2.parseInputSheet(filePath);
    if (!parseResult.success) {
      return res.status(400).json({
        success: false,
        error: `Excel \uD30C\uC2F1 \uC2E4\uD328: ${parseResult.error}`,
        step,
        duration: Date.now() - startTime
      });
    }
    console.log(`\u{1F41B} [DEBUG] Step ${step} PASSED: Excel parsing OK - ${parseResult.totalOrders} orders`);
    return res.json({
      success: true,
      message: "\uB514\uBC84\uADF8 \uD14C\uC2A4\uD2B8 \uC644\uB8CC",
      step,
      duration: Date.now() - startTime,
      data: {
        fileName: req.file.originalname,
        fileSize: req.file.size,
        parsedOrders: parseResult.totalOrders,
        parsedItems: parseResult.totalItems
      }
    });
  } catch (error) {
    console.error(`\u{1F41B} [DEBUG] Error at step ${step}:`, error);
    return res.status(500).json({
      success: false,
      error: `Step ${step}\uC5D0\uC11C \uC624\uB958 \uBC1C\uC0DD: ${error instanceof Error ? error.message : "Unknown error"}`,
      step,
      duration: Date.now() - startTime
    });
  }
});
router9.delete("/cleanup", requireAuth, async (req, res) => {
  try {
    const { filePaths } = req.body;
    if (!Array.isArray(filePaths)) {
      return res.status(400).json({
        success: false,
        error: "\uD30C\uC77C \uACBD\uB85C \uBC30\uC5F4\uC774 \uD544\uC694\uD569\uB2C8\uB2E4."
      });
    }
    let deletedCount = 0;
    const errors = [];
    for (const filePath of filePaths) {
      try {
        if (fs10.existsSync(filePath)) {
          fs10.unlinkSync(filePath);
          deletedCount++;
          console.log(`\u{1F5D1}\uFE0F \uD30C\uC77C \uC0AD\uC81C: ${filePath}`);
        }
      } catch (error) {
        const errorMsg = `${filePath}: ${error instanceof Error ? error.message : "Unknown error"}`;
        errors.push(errorMsg);
        console.error(`\u274C \uD30C\uC77C \uC0AD\uC81C \uC2E4\uD328: ${errorMsg}`);
      }
    }
    res.json({
      success: errors.length === 0,
      message: `\uD30C\uC77C \uC815\uB9AC \uC644\uB8CC (\uC0AD\uC81C: ${deletedCount}\uAC1C, \uC2E4\uD328: ${errors.length}\uAC1C)`,
      data: {
        deletedCount,
        errors
      }
    });
  } catch (error) {
    console.error("\uD30C\uC77C \uC815\uB9AC \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      error: "\uC11C\uBC84 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."
    });
  }
});
var excel_automation_default = router9;

// server/routes/po-template-real.ts
init_po_template_processor_mock();
init_debug_logger();
import { Router as Router10 } from "express";
import multer3 from "multer";
import path12 from "path";
import fs14 from "fs";
import { fileURLToPath as fileURLToPath4 } from "url";

// server/utils/po-email-service-mock.ts
init_po_template_processor_mock();
import nodemailer4 from "nodemailer";
import path9 from "path";
import fs11 from "fs";
import { fileURLToPath as fileURLToPath3 } from "url";
var __filename3 = fileURLToPath3(import.meta.url);
var __dirname3 = path9.dirname(__filename3);
var POEmailServiceMock = class {
  constructor() {
    this.transporter = null;
    if (process.env.SMTP_USER && process.env.SMTP_PASS) {
      this.transporter = nodemailer4.createTransport({
        host: process.env.SMTP_HOST || "smtp.naver.com",
        port: parseInt(process.env.SMTP_PORT || "587"),
        secure: false,
        // true for 465, false for other ports
        auth: {
          user: process.env.SMTP_USER,
          pass: process.env.SMTP_PASS
        },
        tls: {
          rejectUnauthorized: false
        }
      });
    }
  }
  /**
   * 갑지/을지 시트를 Excel과 PDF로 첨부하여 이메일 발송
   */
  async sendPOWithAttachments(originalFilePath, emailOptions) {
    try {
      const timestamp2 = Date.now();
      const uploadsDir = path9.join(__dirname3, "../../uploads");
      const extractedPath = path9.join(uploadsDir, `po-sheets-${timestamp2}.xlsx`);
      const extractResult = POTemplateProcessorMock.extractSheetsToFile(
        originalFilePath,
        extractedPath,
        ["\uAC11\uC9C0", "\uC744\uC9C0"]
      );
      const extractResultData = await extractResult;
      if (!extractResultData.success) {
        return {
          success: false,
          error: `\uC2DC\uD2B8 \uCD94\uCD9C \uC2E4\uD328: ${extractResultData.error}`
        };
      }
      const pdfPath = path9.join(uploadsDir, `po-sheets-${timestamp2}.pdf`);
      const pdfResult = await this.createDummyPDF(pdfPath);
      if (!pdfResult.success) {
        return {
          success: false,
          error: `PDF \uBCC0\uD658 \uC2E4\uD328: ${pdfResult.error}`
        };
      }
      const attachments3 = [];
      if (fs11.existsSync(extractedPath)) {
        attachments3.push({
          filename: `\uBC1C\uC8FC\uC11C_${emailOptions.orderNumber || timestamp2}.xlsx`,
          path: extractedPath,
          contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        });
      }
      if (fs11.existsSync(pdfPath)) {
        attachments3.push({
          filename: `\uBC1C\uC8FC\uC11C_${emailOptions.orderNumber || timestamp2}.pdf`,
          path: pdfPath,
          contentType: "application/pdf"
        });
      }
      const emailContent = this.generateEmailContent(emailOptions);
      let result;
      if (this.transporter) {
        result = await this.sendEmail({
          to: emailOptions.to,
          cc: emailOptions.cc,
          bcc: emailOptions.bcc,
          subject: emailOptions.subject,
          html: emailContent,
          attachments: attachments3
        });
      } else {
        result = await this.sendMockEmail({
          to: emailOptions.to,
          cc: emailOptions.cc,
          bcc: emailOptions.bcc,
          subject: emailOptions.subject,
          html: emailContent,
          attachments: attachments3
        });
      }
      setTimeout(() => {
        this.cleanupTempFiles([extractedPath, pdfPath]);
      }, 5e3);
      return result;
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * 실제 이메일 발송
   */
  async sendEmail(options) {
    try {
      if (!this.transporter) {
        return this.sendMockEmail(options);
      }
      const info = await this.transporter.sendMail({
        from: `"\uBC1C\uC8FC \uC2DC\uC2A4\uD15C" <${process.env.SMTP_USER}>`,
        to: Array.isArray(options.to) ? options.to.join(", ") : options.to,
        cc: options.cc ? Array.isArray(options.cc) ? options.cc.join(", ") : options.cc : void 0,
        bcc: options.bcc ? Array.isArray(options.bcc) ? options.bcc.join(", ") : options.bcc : void 0,
        subject: options.subject,
        text: options.text,
        html: options.html,
        attachments: options.attachments?.map((att) => ({
          filename: att.filename,
          path: att.path,
          contentType: att.contentType
        }))
      });
      return {
        success: true,
        messageId: info.messageId,
        mockMode: false
      };
    } catch (error) {
      console.error("\uC2E4\uC81C \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328, Mock \uBAA8\uB4DC\uB85C \uC804\uD658:", error);
      return this.sendMockEmail(options);
    }
  }
  /**
   * Mock 이메일 발송
   */
  async sendMockEmail(options) {
    const mockLog = {
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      to: options.to,
      cc: options.cc,
      bcc: options.bcc,
      subject: options.subject,
      attachments: options.attachments?.map((att) => ({
        filename: att.filename,
        size: this.getFileSize(att.path),
        contentType: att.contentType
      }))
    };
    console.log("\u{1F4E7} Mock \uC774\uBA54\uC77C \uBC1C\uC1A1:");
    console.log("  \uC218\uC2E0\uC790:", options.to);
    console.log("  \uC81C\uBAA9:", options.subject);
    console.log("  \uCCA8\uBD80\uD30C\uC77C:", options.attachments?.length || 0, "\uAC1C");
    console.log("  \uBC1C\uC1A1 \uC2DC\uAC04:", mockLog.timestamp);
    const logDir = path9.join(__dirname3, "../../logs");
    if (!fs11.existsSync(logDir)) {
      fs11.mkdirSync(logDir, { recursive: true });
    }
    const logFile = path9.join(logDir, `mock-email-${Date.now()}.json`);
    fs11.writeFileSync(logFile, JSON.stringify(mockLog, null, 2));
    return {
      success: true,
      messageId: `mock-${Date.now()}@po-management.local`,
      mockMode: true
    };
  }
  /**
   * 더미 PDF 파일 생성
   */
  async createDummyPDF(pdfPath) {
    try {
      const pdfContent = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
/Resources <<
/Font <<
/F1 5 0 R
>>
>>
>>
endobj

4 0 obj
<<
/Length 55
>>
stream
BT
/F1 12 Tf
100 700 Td
(\uBC1C\uC8FC\uC11C PDF - Mock \uC0DD\uC131) Tj
ET
endstream
endobj

5 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
endobj

xref
0 6
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000274 00000 n 
0000000379 00000 n 
trailer
<<
/Size 6
/Root 1 0 R
>>
startxref
456
%%EOF`;
      fs11.writeFileSync(pdfPath, pdfContent);
      return { success: true };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * 파일 크기 반환
   */
  getFileSize(filePath) {
    try {
      const stats = fs11.statSync(filePath);
      const bytes = stats.size;
      if (bytes === 0) return "0 Bytes";
      const k = 1024;
      const sizes = ["Bytes", "KB", "MB", "GB"];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
    } catch {
      return "Unknown";
    }
  }
  /**
   * 이메일 내용 생성
   */
  generateEmailContent(options) {
    const formatCurrency = (amount) => {
      return new Intl.NumberFormat("ko-KR", {
        style: "currency",
        currency: "KRW"
      }).format(amount);
    };
    const formatDate = (dateString) => {
      try {
        const date2 = new Date(dateString);
        return date2.toLocaleDateString("ko-KR", {
          year: "numeric",
          month: "long",
          day: "numeric"
        });
      } catch {
        return dateString;
      }
    };
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <style>
            body {
              font-family: 'Malgun Gothic', Arial, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 600px;
              margin: 0 auto;
              padding: 20px;
            }
            
            .header {
              background-color: #007bff;
              color: white;
              padding: 20px;
              border-radius: 8px 8px 0 0;
              text-align: center;
            }
            
            .content {
              background-color: #f8f9fa;
              padding: 30px;
              border-radius: 0 0 8px 8px;
            }
            
            .info-table {
              width: 100%;
              border-collapse: collapse;
              margin: 20px 0;
            }
            
            .info-table th,
            .info-table td {
              border: 1px solid #ddd;
              padding: 12px;
              text-align: left;
            }
            
            .info-table th {
              background-color: #e9ecef;
              font-weight: bold;
              width: 30%;
            }
            
            .attachments {
              background-color: #e7f3ff;
              padding: 15px;
              border-radius: 5px;
              margin: 20px 0;
            }
            
            .footer {
              margin-top: 30px;
              padding-top: 20px;
              border-top: 1px solid #ddd;
              font-size: 12px;
              color: #666;
              text-align: center;
            }
            
            .mock-notice {
              background-color: #fff3cd;
              border: 1px solid #ffeaa7;
              padding: 10px;
              border-radius: 5px;
              margin: 15px 0;
              font-size: 14px;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>\u{1F4CB} \uBC1C\uC8FC\uC11C \uC1A1\uBD80</h1>
            <p>\uAD6C\uB9E4 \uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C</p>
          </div>
          
          <div class="content">
            <div class="mock-notice">
              <strong>\u{1F9EA} \uD14C\uC2A4\uD2B8 \uBAA8\uB4DC:</strong> \uC774 \uBA54\uC77C\uC740 \uC2DC\uC2A4\uD15C \uD14C\uC2A4\uD2B8\uC6A9\uC73C\uB85C \uC0DD\uC131\uB418\uC5C8\uC2B5\uB2C8\uB2E4.
            </div>
            
            <p>\uC548\uB155\uD558\uC138\uC694,</p>
            <p>\uBC1C\uC8FC\uC11C\uB97C \uC1A1\uBD80\uB4DC\uB9BD\uB2C8\uB2E4. \uCCA8\uBD80\uB41C \uD30C\uC77C\uC744 \uD655\uC778\uD558\uC5EC \uC8FC\uC2DC\uAE30 \uBC14\uB78D\uB2C8\uB2E4.</p>
            
            ${options.orderNumber ? `
              <table class="info-table">
                <tr>
                  <th>\uBC1C\uC8FC\uBC88\uD638</th>
                  <td>${options.orderNumber}</td>
                </tr>
                ${options.vendorName ? `
                  <tr>
                    <th>\uAC70\uB798\uCC98\uBA85</th>
                    <td>${options.vendorName}</td>
                  </tr>
                ` : ""}
                ${options.orderDate ? `
                  <tr>
                    <th>\uBC1C\uC8FC\uC77C\uC790</th>
                    <td>${formatDate(options.orderDate)}</td>
                  </tr>
                ` : ""}
                ${options.dueDate ? `
                  <tr>
                    <th>\uB0A9\uAE30\uC77C\uC790</th>
                    <td>${formatDate(options.dueDate)}</td>
                  </tr>
                ` : ""}
                ${options.totalAmount ? `
                  <tr>
                    <th>\uCD1D \uAE08\uC561</th>
                    <td><strong>${formatCurrency(options.totalAmount)}</strong></td>
                  </tr>
                ` : ""}
              </table>
            ` : ""}
            
            <div class="attachments">
              <h3>\u{1F4CE} \uCCA8\uBD80\uD30C\uC77C</h3>
              <ul>
                <li>\uBC1C\uC8FC\uC11C.xlsx (Excel \uD30C\uC77C)</li>
                <li>\uBC1C\uC8FC\uC11C.pdf (PDF \uD30C\uC77C)</li>
              </ul>
              <p><small>* \uAC11\uC9C0\uC640 \uC744\uC9C0 \uC2DC\uD2B8\uAC00 \uD3EC\uD568\uB418\uC5B4 \uC788\uC2B5\uB2C8\uB2E4.</small></p>
            </div>
            
            ${options.additionalMessage ? `
              <div style="background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h3>\u{1F4DD} \uCD94\uAC00 \uC548\uB0B4\uC0AC\uD56D</h3>
                <p>${options.additionalMessage}</p>
              </div>
            ` : ""}
            
            <p>
              \uBC1C\uC8FC\uC11C \uAC80\uD1A0 \uD6C4 \uD655\uC778 \uD68C\uC2E0 \uBD80\uD0C1\uB4DC\uB9BD\uB2C8\uB2E4.<br>
              \uBB38\uC758\uC0AC\uD56D\uC774 \uC788\uC73C\uC2DC\uBA74 \uC5B8\uC81C\uB4E0\uC9C0 \uC5F0\uB77D\uC8FC\uC2DC\uAE30 \uBC14\uB78D\uB2C8\uB2E4.
            </p>
            
            <p>\uAC10\uC0AC\uD569\uB2C8\uB2E4.</p>
          </div>
          
          <div class="footer">
            <p>
              \uC774 \uBA54\uC77C\uC740 \uAD6C\uB9E4 \uBC1C\uC8FC \uAD00\uB9AC \uC2DC\uC2A4\uD15C\uC5D0\uC11C \uC790\uB3D9\uC73C\uB85C \uBC1C\uC1A1\uB418\uC5C8\uC2B5\uB2C8\uB2E4.<br>
              \uBC1C\uC1A1 \uC2DC\uAC04: ${(/* @__PURE__ */ new Date()).toLocaleString("ko-KR")}
            </p>
          </div>
        </body>
      </html>
    `;
  }
  /**
   * 임시 파일 정리
   */
  cleanupTempFiles(filePaths) {
    filePaths.forEach((filePath) => {
      try {
        if (fs11.existsSync(filePath)) {
          fs11.unlinkSync(filePath);
          console.log(`\u2705 \uC784\uC2DC \uD30C\uC77C \uC815\uB9AC: ${path9.basename(filePath)}`);
        }
      } catch (error) {
        console.error(`\u274C \uD30C\uC77C \uC815\uB9AC \uC2E4\uD328: ${filePath}`, error);
      }
    });
  }
  /**
   * 이메일 연결 테스트
   */
  async testConnection() {
    try {
      if (!this.transporter) {
        return {
          success: true,
          mockMode: true,
          error: "SMTP \uC124\uC815 \uC5C6\uC74C - Mock \uBAA8\uB4DC \uC0AC\uC6A9"
        };
      }
      await this.transporter.verify();
      return {
        success: true,
        mockMode: false
      };
    } catch (error) {
      return {
        success: true,
        mockMode: true,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
};

// server/utils/excel-to-pdf-mock.ts
import XLSX5 from "xlsx";
import path10 from "path";
import fs12 from "fs";
var ExcelToPdfConverterMock = class {
  /**
   * Excel 파일을 PDF로 변환 (Mock 버전)
   */
  static async convertToPdf(excelPath, options = {}) {
    try {
      if (!fs12.existsSync(excelPath)) {
        return {
          success: false,
          error: "Excel \uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4."
        };
      }
      const workbook = XLSX5.readFile(excelPath);
      const pdfPath = options.outputPath || excelPath.replace(/\.xlsx?m?$/, ".pdf");
      const htmlContent = this.generateHtmlFromWorkbook(workbook);
      const pdfResult = await this.createMockPdf(htmlContent, pdfPath);
      if (!pdfResult.success) {
        return pdfResult;
      }
      return {
        success: true,
        pdfPath
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * 특정 시트들만 PDF로 변환 (Mock 버전)
   */
  static async convertSheetsToPdf(excelPath, sheetNames, options = {}) {
    try {
      if (!fs12.existsSync(excelPath)) {
        return {
          success: false,
          error: "Excel \uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4."
        };
      }
      const workbook = XLSX5.readFile(excelPath);
      const pdfPath = options.outputPath || excelPath.replace(/\.xlsx?m?$/, "-sheets.pdf");
      const htmlContent = this.generateHtmlFromSheets(workbook, sheetNames);
      const pdfResult = await this.createMockPdf(htmlContent, pdfPath);
      if (!pdfResult.success) {
        return pdfResult;
      }
      return {
        success: true,
        pdfPath
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * PDFKit을 사용한 한글 지원 PDF 생성
   */
  static async createMockPdf(htmlContent, pdfPath) {
    try {
      console.log(`\u{1F4C4} PDFKit\uC73C\uB85C \uD55C\uAE00 \uC9C0\uC6D0 PDF \uC0DD\uC131 \uC2DC\uC791: ${path10.basename(pdfPath)}`);
      const PDFDocument = (await import("pdfkit")).default;
      const doc = new PDFDocument({
        size: "A4",
        margins: { top: 50, bottom: 50, left: 50, right: 50 }
      });
      let koreanFontPath = null;
      const possibleFonts = [
        "/System/Library/Fonts/Supplemental/AppleGothic.ttf",
        // macOS
        "/System/Library/Fonts/Supplemental/AppleMyungjo.ttf",
        // macOS 명조
        "C:\\Windows\\Fonts\\malgun.ttf",
        // Windows
        "C:\\Windows\\Fonts\\gulim.ttf",
        // Windows 굴림
        "/usr/share/fonts/truetype/nanum/NanumGothic.ttf"
        // Linux
      ];
      for (const fontPath of possibleFonts) {
        try {
          if (fs12.existsSync(fontPath)) {
            koreanFontPath = fontPath;
            console.log(`\u2705 \uD55C\uAE00 \uD3F0\uD2B8 \uBC1C\uACAC: ${fontPath}`);
            break;
          }
        } catch (error) {
          continue;
        }
      }
      if (koreanFontPath) {
        try {
          doc.registerFont("Korean", koreanFontPath);
          doc.font("Korean");
          console.log(`\u2705 \uD55C\uAE00 \uD3F0\uD2B8 \uB4F1\uB85D \uC644\uB8CC: ${koreanFontPath}`);
        } catch (fontError) {
          console.warn("\u26A0\uFE0F \uD55C\uAE00 \uD3F0\uD2B8 \uB4F1\uB85D \uC2E4\uD328, \uAE30\uBCF8 \uD3F0\uD2B8 \uC0AC\uC6A9:", fontError);
          doc.font("Helvetica");
        }
      } else {
        console.warn("\u26A0\uFE0F \uD55C\uAE00 \uD3F0\uD2B8\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC74C, \uAE30\uBCF8 \uD3F0\uD2B8 \uC0AC\uC6A9");
        doc.font("Helvetica");
      }
      doc.fontSize(20).text("\u{1F4CB} \uAD6C\uB9E4\uBC1C\uC8FC\uC11C (\uC5D1\uC140 \uBCC0\uD658)", 50, 80);
      doc.fontSize(12).moveDown();
      doc.text("\u2705 Excel \uD30C\uC77C\uC774 \uC131\uACF5\uC801\uC73C\uB85C PDF\uB85C \uBCC0\uD658\uB418\uC5C8\uC2B5\uB2C8\uB2E4.");
      doc.moveDown(0.5);
      doc.text("\u{1F527} \uC774 PDF\uB294 \uAC1C\uC120\uB41C \uD55C\uAE00 \uD3F0\uD2B8 \uC9C0\uC6D0 \uAE30\uB2A5\uC73C\uB85C \uC0DD\uC131\uB418\uC5C8\uC2B5\uB2C8\uB2E4.");
      doc.moveDown(0.5);
      doc.text("\u{1F4C5} \uC0DD\uC131 \uC2DC\uAC04: " + (/* @__PURE__ */ new Date()).toLocaleString("ko-KR"));
      doc.moveDown(0.5);
      doc.text("\u{1F4C1} \uD30C\uC77C \uACBD\uB85C: " + path10.basename(pdfPath));
      doc.moveDown(1);
      doc.fontSize(14).text("\u{1F4CA} Excel \uD30C\uC77C \uC815\uBCF4:", 50, doc.y);
      doc.fontSize(10);
      doc.text("\u2022 \uC6D0\uBCF8 Excel \uD30C\uC77C\uC758 \uBAA8\uB4E0 \uC2DC\uD2B8\uAC00 \uCC98\uB9AC\uB418\uC5C8\uC2B5\uB2C8\uB2E4.");
      doc.text("\u2022 \uD55C\uAE00 \uD14D\uC2A4\uD2B8\uAC00 \uC62C\uBC14\uB974\uAC8C \uD45C\uC2DC\uB429\uB2C8\uB2E4.");
      doc.text("\u2022 \uC140 \uC11C\uC2DD\uACFC \uB808\uC774\uC544\uC6C3\uC774 \uBCF4\uC874\uB418\uC5C8\uC2B5\uB2C8\uB2E4.");
      doc.moveDown(1);
      doc.fontSize(14).text("\u26A0\uFE0F \uC911\uC694 \uC548\uB0B4:", 50, doc.y);
      doc.fontSize(10);
      doc.text("\u2022 \uC774 PDF\uB294 \uD14C\uC2A4\uD2B8 \uBAA9\uC801\uC73C\uB85C \uC0DD\uC131\uB41C Mock \uD30C\uC77C\uC785\uB2C8\uB2E4.");
      doc.text("\u2022 \uC2E4\uC81C \uC6B4\uC601 \uD658\uACBD\uC5D0\uC11C\uB294 \uC644\uC804\uD55C Excel\u2192PDF \uBCC0\uD658\uC774 \uC218\uD589\uB429\uB2C8\uB2E4.");
      doc.text("\u2022 \uD55C\uAE00 \uD3F0\uD2B8 \uBB38\uC81C\uAC00 \uD574\uACB0\uB418\uC5C8\uB294\uC9C0 \uD655\uC778\uD574 \uC8FC\uC138\uC694.");
      doc.fontSize(8);
      doc.text(`\uC2DC\uC2A4\uD15C: ${process.platform} | Node.js: ${process.version}`, 50, 700);
      doc.text(`\uD55C\uAE00 \uD3F0\uD2B8: ${koreanFontPath ? path10.basename(koreanFontPath) : "Helvetica (\uAE30\uBCF8)"}`, 50, 715);
      const buffers = [];
      doc.on("data", buffers.push.bind(buffers));
      return new Promise((resolve) => {
        doc.on("end", () => {
          const pdfBuffer = Buffer.concat(buffers);
          fs12.writeFileSync(pdfPath, pdfBuffer);
          console.log(`\u2705 \uD55C\uAE00 \uC9C0\uC6D0 Mock PDF \uC0DD\uC131 \uC644\uB8CC: ${path10.basename(pdfPath)}`);
          resolve({ success: true });
        });
        doc.end();
      });
    } catch (error) {
      console.error("\u274C PDFKit Mock PDF \uC0DD\uC131 \uC2E4\uD328:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * 워크북 전체를 HTML로 변환
   */
  static generateHtmlFromWorkbook(workbook) {
    const sheets = workbook.SheetNames.map((name) => {
      const worksheet = workbook.Sheets[name];
      const htmlTable = XLSX5.utils.sheet_to_html(worksheet);
      return `
        <div class="sheet-container">
          <h2 class="sheet-title">${name}</h2>
          ${htmlTable}
        </div>
        <div class="page-break"></div>
      `;
    }).join("");
    return this.wrapWithHtmlTemplate(sheets);
  }
  /**
   * 특정 시트들만 HTML로 변환
   */
  static generateHtmlFromSheets(workbook, sheetNames) {
    const sheets = sheetNames.filter((name) => workbook.SheetNames.includes(name)).map((name) => {
      const worksheet = workbook.Sheets[name];
      const htmlTable = XLSX5.utils.sheet_to_html(worksheet);
      return `
          <div class="sheet-container">
            <h2 class="sheet-title">${name}</h2>
            ${htmlTable}
          </div>
          <div class="page-break"></div>
        `;
    }).join("");
    return this.wrapWithHtmlTemplate(sheets);
  }
  /**
   * HTML 템플릿으로 래핑
   */
  static wrapWithHtmlTemplate(content) {
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <title>Excel to PDF - Mock</title>
          <style>
            body {
              font-family: 'Malgun Gothic', Arial, sans-serif;
              margin: 0;
              padding: 20px;
              background-color: white;
            }
            
            .mock-notice {
              background-color: #fff3cd;
              border: 1px solid #ffeaa7;
              padding: 10px;
              border-radius: 5px;
              margin-bottom: 20px;
              font-size: 14px;
            }
            
            .sheet-container {
              margin-bottom: 30px;
            }
            
            .sheet-title {
              font-size: 18px;
              font-weight: bold;
              margin-bottom: 15px;
              color: #333;
              border-bottom: 2px solid #007bff;
              padding-bottom: 5px;
            }
            
            table {
              width: 100%;
              border-collapse: collapse;
              margin-bottom: 20px;
              font-size: 12px;
            }
            
            th, td {
              border: 1px solid #ddd;
              padding: 8px;
              text-align: left;
              vertical-align: top;
            }
            
            th {
              background-color: #f8f9fa;
              font-weight: bold;
            }
            
            tr:nth-child(even) {
              background-color: #f9f9f9;
            }
            
            .page-break {
              page-break-before: always;
            }
            
            /* \uC22B\uC790 \uC140 \uC6B0\uCE21 \uC815\uB82C */
            td[data-t="n"] {
              text-align: right;
            }
            
            /* \uBCD1\uD569\uB41C \uC140 \uC2A4\uD0C0\uC77C */
            .merged-cell {
              background-color: #e9ecef;
              font-weight: bold;
              text-align: center;
            }
            
            /* \uC778\uC1C4 \uCD5C\uC801\uD654 */
            @media print {
              body {
                margin: 0;
                padding: 10mm;
              }
              
              .page-break {
                page-break-before: always;
              }
              
              .sheet-container {
                break-inside: avoid;
              }
            }
          </style>
        </head>
        <body>
          <div class="mock-notice">
            <strong>\u{1F9EA} Mock PDF:</strong> \uC774 \uD30C\uC77C\uC740 \uD14C\uC2A4\uD2B8\uC6A9 Mock PDF\uC785\uB2C8\uB2E4. \uC2E4\uC81C \uD658\uACBD\uC5D0\uC11C\uB294 \uC644\uC804\uD55C PDF \uBCC0\uD658\uC774 \uC218\uD589\uB429\uB2C8\uB2E4.
          </div>
          ${content}
        </body>
      </html>
    `;
  }
};
async function convertExcelToPdfMock(excelPath, outputPath, sheetsOnly) {
  const options = {
    outputPath,
    pageFormat: "A4",
    orientation: "portrait"
  };
  if (sheetsOnly && sheetsOnly.length > 0) {
    return ExcelToPdfConverterMock.convertSheetsToPdf(excelPath, sheetsOnly, options);
  } else {
    return ExcelToPdfConverterMock.convertToPdf(excelPath, options);
  }
}

// server/utils/po-template-validator.ts
import XLSX6 from "xlsx";
import fs13 from "fs";
import path11 from "path";
var POTemplateValidator = class {
  static {
    this.REQUIRED_COLUMNS = [
      "\uBC1C\uC8FC\uBC88\uD638",
      "\uBC1C\uC8FC\uC77C\uC790",
      "\uD604\uC7A5\uBA85",
      "\uD488\uBAA9\uBA85",
      "\uC218\uB7C9",
      "\uB2E8\uAC00",
      "\uACF5\uAE09\uAC00\uC561",
      "\uC138\uC561",
      "\uD569\uACC4",
      "\uB0A9\uAE30\uC77C\uC790",
      "\uAC70\uB798\uCC98\uBA85"
    ];
  }
  static {
    this.OPTIONAL_COLUMNS = [
      "\uB300\uBD84\uB958",
      "\uC911\uBD84\uB958",
      "\uC18C\uBD84\uB958",
      "\uADDC\uACA9",
      "\uB0A9\uD488\uCC98",
      "\uBE44\uACE0"
    ];
  }
  static {
    this.VALIDATION_RULES = [
      {
        field: "\uBC1C\uC8FC\uBC88\uD638",
        required: true,
        type: "string",
        minLength: 3,
        maxLength: 50,
        pattern: /^[A-Z0-9-]+$/
      },
      {
        field: "\uBC1C\uC8FC\uC77C\uC790",
        required: true,
        type: "date"
      },
      {
        field: "\uD604\uC7A5\uBA85",
        required: true,
        type: "string",
        minLength: 2,
        maxLength: 100
      },
      {
        field: "\uD488\uBAA9\uBA85",
        required: true,
        type: "string",
        minLength: 1,
        maxLength: 200
      },
      {
        field: "\uC218\uB7C9",
        required: true,
        type: "number",
        customValidator: (value) => value > 0
      },
      {
        field: "\uB2E8\uAC00",
        required: true,
        type: "number",
        customValidator: (value) => value >= 0
      },
      {
        field: "\uACF5\uAE09\uAC00\uC561",
        required: true,
        type: "number",
        customValidator: (value) => value >= 0
      },
      {
        field: "\uC138\uC561",
        required: true,
        type: "number",
        customValidator: (value) => value >= 0
      },
      {
        field: "\uD569\uACC4",
        required: true,
        type: "number",
        customValidator: (value) => value >= 0
      },
      {
        field: "\uB0A9\uAE30\uC77C\uC790",
        required: true,
        type: "date"
      },
      {
        field: "\uAC70\uB798\uCC98\uBA85",
        required: true,
        type: "string",
        minLength: 2,
        maxLength: 100
      }
    ];
  }
  /**
   * PO Template 파일 전체 유효성 검사
   */
  static async validatePOTemplateFile(filePath) {
    const result = {
      isValid: true,
      errors: [],
      warnings: [],
      summary: {
        totalRows: 0,
        validRows: 0,
        invalidRows: 0,
        missingFields: [],
        duplicateOrderNumbers: []
      }
    };
    try {
      if (!fs13.existsSync(filePath)) {
        result.isValid = false;
        result.errors.push("\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.");
        return result;
      }
      const ext = path11.extname(filePath).toLowerCase();
      if (![".xlsx", ".xlsm", ".xls"].includes(ext)) {
        result.isValid = false;
        result.errors.push("\uC9C0\uC6D0\uD558\uC9C0 \uC54A\uB294 \uD30C\uC77C \uD615\uC2DD\uC785\uB2C8\uB2E4. Excel \uD30C\uC77C(.xlsx, .xlsm, .xls)\uB9CC \uC9C0\uC6D0\uB429\uB2C8\uB2E4.");
        return result;
      }
      const workbook = XLSX6.readFile(filePath);
      if (!workbook.SheetNames.includes("Input")) {
        result.isValid = false;
        result.errors.push("Input \uC2DC\uD2B8\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.");
        return result;
      }
      const worksheet = workbook.Sheets["Input"];
      const data = XLSX6.utils.sheet_to_json(worksheet, { header: 1 });
      if (data.length < 2) {
        result.isValid = false;
        result.errors.push("Input \uC2DC\uD2B8\uC5D0 \uB370\uC774\uD130\uAC00 \uC5C6\uAC70\uB098 \uD5E4\uB354\uB9CC \uC788\uC2B5\uB2C8\uB2E4.");
        return result;
      }
      const headers = data[0];
      const headerValidation = this.validateHeaders(headers);
      if (!headerValidation.isValid) {
        result.isValid = false;
        result.errors.push(...headerValidation.errors);
        result.warnings.push(...headerValidation.warnings);
        result.summary.missingFields = headerValidation.missingFields;
      }
      const dataRows = data.slice(1);
      result.summary.totalRows = dataRows.length;
      const orderNumbers = /* @__PURE__ */ new Set();
      const duplicates = /* @__PURE__ */ new Set();
      for (let i = 0; i < dataRows.length; i++) {
        const row = dataRows[i];
        const rowIndex = i + 2;
        if (this.isEmptyRow(row)) {
          continue;
        }
        const rowValidation = this.validateDataRow(row, headers, rowIndex);
        if (rowValidation.isValid) {
          result.summary.validRows++;
          const orderNumber = String(row[0] || "").trim();
          if (orderNumber) {
            if (orderNumbers.has(orderNumber)) {
              duplicates.add(orderNumber);
            } else {
              orderNumbers.add(orderNumber);
            }
          }
        } else {
          result.summary.invalidRows++;
          result.isValid = false;
          result.errors.push(...rowValidation.errors);
          result.warnings.push(...rowValidation.warnings);
        }
      }
      if (duplicates.size > 0) {
        result.summary.duplicateOrderNumbers = Array.from(duplicates);
        result.warnings.push(`\uC911\uBCF5\uB41C \uBC1C\uC8FC\uBC88\uD638\uAC00 \uBC1C\uACAC\uB418\uC5C8\uC2B5\uB2C8\uB2E4: ${Array.from(duplicates).join(", ")}`);
      }
      const requiredSheets = ["\uAC11\uC9C0", "\uC744\uC9C0"];
      const missingSheets = requiredSheets.filter((sheet) => !workbook.SheetNames.includes(sheet));
      if (missingSheets.length > 0) {
        result.warnings.push(`\uD544\uC218 \uC2DC\uD2B8\uAC00 \uB204\uB77D\uB418\uC5C8\uC2B5\uB2C8\uB2E4: ${missingSheets.join(", ")}`);
      }
      if (result.summary.validRows === 0) {
        result.isValid = false;
        result.errors.push("\uC720\uD6A8\uD55C \uB370\uC774\uD130 \uD589\uC774 \uC5C6\uC2B5\uB2C8\uB2E4.");
      }
    } catch (error) {
      result.isValid = false;
      result.errors.push(error instanceof Error ? error.message : "\uD30C\uC77C \uCC98\uB9AC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.");
    }
    return result;
  }
  /**
   * 헤더 검증
   */
  static validateHeaders(headers) {
    const result = {
      isValid: true,
      errors: [],
      warnings: [],
      missingFields: []
    };
    const missingRequired = this.REQUIRED_COLUMNS.filter((col) => !headers.includes(col));
    if (missingRequired.length > 0) {
      result.isValid = false;
      result.errors.push(`\uD544\uC218 \uCEEC\uB7FC\uC774 \uB204\uB77D\uB418\uC5C8\uC2B5\uB2C8\uB2E4: ${missingRequired.join(", ")}`);
      result.missingFields = missingRequired;
    }
    const knownColumns = [...this.REQUIRED_COLUMNS, ...this.OPTIONAL_COLUMNS];
    const unknownColumns = headers.filter((col) => col && !knownColumns.includes(col));
    if (unknownColumns.length > 0) {
      result.warnings.push(`\uC54C \uC218 \uC5C6\uB294 \uCEEC\uB7FC\uC774 \uC788\uC2B5\uB2C8\uB2E4: ${unknownColumns.join(", ")}`);
    }
    return result;
  }
  /**
   * 데이터 행 검증
   */
  static validateDataRow(row, headers, rowIndex) {
    const result = {
      isValid: true,
      errors: [],
      warnings: []
    };
    for (const rule of this.VALIDATION_RULES) {
      const columnIndex = headers.indexOf(rule.field);
      if (columnIndex === -1) continue;
      const value = row[columnIndex];
      const fieldValidation = this.validateField(value, rule, rule.field, rowIndex);
      if (!fieldValidation.isValid) {
        result.isValid = false;
        result.errors.push(...fieldValidation.errors);
      }
      result.warnings.push(...fieldValidation.warnings);
    }
    const supplyAmount = this.parseNumber(row[headers.indexOf("\uACF5\uAE09\uAC00\uC561")]);
    const taxAmount = this.parseNumber(row[headers.indexOf("\uC138\uC561")]);
    const totalAmount = this.parseNumber(row[headers.indexOf("\uD569\uACC4")]);
    if (supplyAmount !== null && taxAmount !== null && totalAmount !== null) {
      const calculatedTotal = supplyAmount + taxAmount;
      if (Math.abs(calculatedTotal - totalAmount) > 0.01) {
        result.warnings.push(`${rowIndex}\uD589: \uACF5\uAE09\uAC00\uC561(${supplyAmount}) + \uC138\uC561(${taxAmount}) \u2260 \uD569\uACC4(${totalAmount})`);
      }
    }
    const quantity = this.parseNumber(row[headers.indexOf("\uC218\uB7C9")]);
    const unitPrice = this.parseNumber(row[headers.indexOf("\uB2E8\uAC00")]);
    if (quantity !== null && unitPrice !== null && supplyAmount !== null) {
      const calculatedSupply = quantity * unitPrice;
      if (Math.abs(calculatedSupply - supplyAmount) > 0.01) {
        result.warnings.push(`${rowIndex}\uD589: \uC218\uB7C9(${quantity}) \xD7 \uB2E8\uAC00(${unitPrice}) \u2260 \uACF5\uAE09\uAC00\uC561(${supplyAmount})`);
      }
    }
    return result;
  }
  /**
   * 개별 필드 유효성 검사
   */
  static validateField(value, rule, fieldName, rowIndex) {
    const result = {
      isValid: true,
      errors: [],
      warnings: []
    };
    if (rule.required && (value === null || value === void 0 || value === "")) {
      result.isValid = false;
      result.errors.push(`${rowIndex}\uD589: ${fieldName}\uC740(\uB294) \uD544\uC218 \uD56D\uBAA9\uC785\uB2C8\uB2E4.`);
      return result;
    }
    if (value === null || value === void 0 || value === "") {
      return result;
    }
    switch (rule.type) {
      case "string":
        if (typeof value !== "string") {
          const stringValue = String(value);
          if (rule.minLength && stringValue.length < rule.minLength) {
            result.isValid = false;
            result.errors.push(`${rowIndex}\uD589: ${fieldName}\uC740(\uB294) \uCD5C\uC18C ${rule.minLength}\uC790 \uC774\uC0C1\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4.`);
          }
          if (rule.maxLength && stringValue.length > rule.maxLength) {
            result.isValid = false;
            result.errors.push(`${rowIndex}\uD589: ${fieldName}\uC740(\uB294) \uCD5C\uB300 ${rule.maxLength}\uC790 \uC774\uD558\uC5EC\uC57C \uD569\uB2C8\uB2E4.`);
          }
          if (rule.pattern && !rule.pattern.test(stringValue)) {
            result.isValid = false;
            result.errors.push(`${rowIndex}\uD589: ${fieldName}\uC758 \uD615\uC2DD\uC774 \uC62C\uBC14\uB974\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.`);
          }
        }
        break;
      case "number":
        const numValue = this.parseNumber(value);
        if (numValue === null) {
          result.isValid = false;
          result.errors.push(`${rowIndex}\uD589: ${fieldName}\uC740(\uB294) \uC22B\uC790\uC5EC\uC57C \uD569\uB2C8\uB2E4.`);
        }
        break;
      case "date":
        const dateValue = this.parseDate(value);
        if (dateValue === null) {
          result.isValid = false;
          result.errors.push(`${rowIndex}\uD589: ${fieldName}\uC740(\uB294) \uC62C\uBC14\uB978 \uB0A0\uC9DC \uD615\uC2DD\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4.`);
        }
        break;
    }
    if (rule.customValidator && !rule.customValidator(value)) {
      result.isValid = false;
      result.errors.push(`${rowIndex}\uD589: ${fieldName}\uC758 \uAC12\uC774 \uC720\uD6A8\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.`);
    }
    return result;
  }
  /**
   * 빈 행 확인
   */
  static isEmptyRow(row) {
    return row.every((cell) => cell === null || cell === void 0 || cell === "");
  }
  /**
   * 숫자 파싱
   */
  static parseNumber(value) {
    if (typeof value === "number") return value;
    if (typeof value === "string") {
      const cleaned = value.replace(/[,\s]/g, "");
      const parsed = parseFloat(cleaned);
      return isNaN(parsed) ? null : parsed;
    }
    return null;
  }
  /**
   * 날짜 파싱
   */
  static parseDate(value) {
    if (value instanceof Date) return value;
    if (typeof value === "number") {
      const date2 = new Date((value - 25569) * 86400 * 1e3);
      return isNaN(date2.getTime()) ? null : date2;
    }
    if (typeof value === "string") {
      const date2 = new Date(value);
      return isNaN(date2.getTime()) ? null : date2;
    }
    return null;
  }
  /**
   * 빠른 유효성 검사 (기본적인 구조만 확인)
   */
  static async quickValidate(filePath) {
    const result = {
      isValid: true,
      hasInputSheet: false,
      hasRequiredSheets: false,
      rowCount: 0,
      errors: []
    };
    try {
      if (!fs13.existsSync(filePath)) {
        result.isValid = false;
        result.errors.push("\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.");
        return result;
      }
      const workbook = XLSX6.readFile(filePath);
      result.hasInputSheet = workbook.SheetNames.includes("Input");
      if (!result.hasInputSheet) {
        result.isValid = false;
        result.errors.push("Input \uC2DC\uD2B8\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4.");
      }
      const requiredSheets = ["\uAC11\uC9C0", "\uC744\uC9C0"];
      result.hasRequiredSheets = requiredSheets.every((sheet) => workbook.SheetNames.includes(sheet));
      if (!result.hasRequiredSheets) {
        result.errors.push("\uAC11\uC9C0 \uB610\uB294 \uC744\uC9C0 \uC2DC\uD2B8\uAC00 \uB204\uB77D\uB418\uC5C8\uC2B5\uB2C8\uB2E4.");
      }
      if (result.hasInputSheet) {
        const worksheet = workbook.Sheets["Input"];
        const data = XLSX6.utils.sheet_to_json(worksheet, { header: 1 });
        result.rowCount = Math.max(0, data.length - 1);
      }
    } catch (error) {
      result.isValid = false;
      result.errors.push(error instanceof Error ? error.message : "\uD30C\uC77C \uCC98\uB9AC \uC624\uB958");
    }
    return result;
  }
};

// server/routes/po-template-real.ts
init_db();
init_schema();
init_professional_pdf_generation_service();
import { eq as eq15 } from "drizzle-orm";
var router10 = Router10();
router10.get("/test", (req, res) => {
  res.json({ message: "PO Template router is working!", timestamp: /* @__PURE__ */ new Date() });
});
var __filename4 = fileURLToPath4(import.meta.url);
var __dirname4 = path12.dirname(__filename4);
var storage3 = multer3.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir2 = process.env.VERCEL ? "/tmp" : path12.join(__dirname4, "../../uploads");
    if (!process.env.VERCEL && !fs14.existsSync(uploadDir2)) {
      fs14.mkdirSync(uploadDir2, { recursive: true });
    }
    cb(null, uploadDir2);
  },
  filename: (req, file, cb) => {
    const timestamp2 = Date.now();
    const originalName = Buffer.from(file.originalname, "latin1").toString("utf8");
    const extension = path12.extname(originalName);
    const basename = path12.basename(originalName, extension);
    const safeBasename = basename.replace(/[^a-zA-Z0-9가-힣_-]/g, "_");
    cb(null, `${timestamp2}-${safeBasename}${extension}`);
  }
});
var upload3 = multer3({
  storage: storage3,
  fileFilter: (req, file, cb) => {
    const allowedMimes = [
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      // .xlsx
      "application/vnd.ms-excel.sheet.macroEnabled.12",
      // .xlsm (대문자 E)
      "application/vnd.ms-excel.sheet.macroenabled.12",
      // .xlsm (소문자 e)
      "application/vnd.ms-excel"
      // .xls
    ];
    if (allowedMimes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error("Excel \uD30C\uC77C\uB9CC \uC5C5\uB85C\uB4DC \uAC00\uB2A5\uD569\uB2C8\uB2E4."));
    }
  },
  limits: {
    fileSize: 10 * 1024 * 1024
    // 10MB
  }
});
var simpleAuth = (req, res, next) => {
  req.user = { id: "test_admin_001" };
  next();
};
router10.get("/db-status", simpleAuth, async (req, res) => {
  try {
    if (!db) {
      return res.json({
        success: false,
        message: "DB \uC5F0\uACB0 \uC5C6\uC74C - Mock DB \uC0AC\uC6A9",
        usingMockDB: true
      });
    }
    const testResult = await db.select().from(vendors).limit(1);
    res.json({
      success: true,
      message: "\uC2E4\uC81C DB \uC5F0\uACB0 \uC131\uACF5",
      usingMockDB: false,
      vendorCount: testResult.length
    });
  } catch (error) {
    console.error("DB \uC0C1\uD0DC \uD655\uC778 \uC624\uB958:", error);
    res.json({
      success: false,
      message: "DB \uC5F0\uACB0 \uC2E4\uD328 - Mock DB\uB85C \uD3F4\uBC31",
      usingMockDB: true,
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router10.post("/upload", simpleAuth, upload3.single("file"), async (req, res) => {
  const startTime = Date.now();
  let responseHandler = {
    sent: false,
    send: (status, data) => {
      if (!responseHandler.sent) {
        responseHandler.sent = true;
        console.log(`\u{1F4E4} [Vercel] Response sent: ${status}`, {
          elapsedTime: Date.now() - startTime,
          success: data.success,
          hasError: !!data.error
        });
        res.status(status).json(data);
      }
    }
  };
  const timeoutDuration = process.env.VERCEL ? 55e3 : 12e4;
  const timeoutId = setTimeout(() => {
    responseHandler.send(408, {
      success: false,
      error: `\uC11C\uBC84\uB9AC\uC2A4 \uD568\uC218 \uCC98\uB9AC \uC2DC\uAC04 \uCD08\uACFC (${timeoutDuration / 1e3}\uCD08). \uD30C\uC77C\uC774 \uB108\uBB34 \uD06C\uAC70\uB098 \uBCF5\uC7A1\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.`,
      debug: {
        elapsedTime: Date.now() - startTime,
        phase: "timeout_protection",
        platform: process.env.VERCEL ? "vercel_serverless" : "local",
        memoryUsage: process.memoryUsage(),
        suggestion: "\uB354 \uC791\uC740 \uD30C\uC77C\uB85C \uB098\uB204\uC5B4 \uC5C5\uB85C\uB4DC\uD558\uAC70\uB098 \uD30C\uC77C \uD06C\uAE30\uB97C \uC904\uC5EC\uC8FC\uC138\uC694."
      }
    });
  }, timeoutDuration);
  console.log("\u{1F680} [Vercel] \uC11C\uBC84\uB9AC\uC2A4 \uD568\uC218 \uC2DC\uC791:", {
    timestamp: (/* @__PURE__ */ new Date()).toISOString(),
    memoryUsage: process.memoryUsage(),
    platform: process.platform,
    nodeVersion: process.version,
    timeoutProtection: "25s_active"
  });
  try {
    console.log("\u{1F4E5} [\uC11C\uBC84] \uD30C\uC77C \uC5C5\uB85C\uB4DC \uC694\uCCAD \uC218\uC2E0:", {
      hasFile: !!req.file,
      originalname: req.file?.originalname,
      filename: req.file?.filename,
      size: req.file?.size,
      mimetype: req.file?.mimetype,
      endpoint: "/api/po-template/upload"
    });
    if (!req.file) {
      console.error("\u274C [\uC11C\uBC84] \uD30C\uC77C \uC5C6\uC74C");
      clearTimeout(timeoutId);
      return responseHandler.send(400, {
        success: false,
        error: "\uD30C\uC77C\uC774 \uC5C5\uB85C\uB4DC\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4.",
        debug: { phase: "file_validation", elapsedTime: Date.now() - startTime }
      });
    }
    const filePath = req.file.path;
    console.log("\u{1F4C2} [\uC11C\uBC84] \uD30C\uC77C \uACBD\uB85C:", { filePath });
    console.log("\u{1F50D} [\uC11C\uBC84] \uC720\uD6A8\uC131 \uAC80\uC0AC \uC2DC\uC791");
    const quickValidation = await POTemplateValidator.quickValidate(filePath);
    console.log("\u{1F4CB} [\uC11C\uBC84] \uC720\uD6A8\uC131 \uAC80\uC0AC \uACB0\uACFC:", {
      isValid: quickValidation.isValid,
      errorCount: quickValidation.errors.length,
      errors: quickValidation.errors
    });
    if (!quickValidation.isValid) {
      console.error("\u274C [\uC11C\uBC84] \uC720\uD6A8\uC131 \uAC80\uC0AC \uC2E4\uD328");
      fs14.unlinkSync(filePath);
      clearTimeout(timeoutId);
      return responseHandler.send(400, {
        success: false,
        error: "\uD30C\uC77C \uC720\uD6A8\uC131 \uAC80\uC0AC \uC2E4\uD328",
        details: quickValidation.errors.join(", "),
        validation: quickValidation,
        debug: { phase: "quick_validation", elapsedTime: Date.now() - startTime }
      });
    }
    console.log("\u2699\uFE0F [\uC11C\uBC84] Input \uC2DC\uD2B8 \uD30C\uC2F1 \uC2DC\uC791");
    const parseResult = POTemplateProcessorMock.parseInputSheet(filePath);
    console.log("\u{1F4CA} [\uC11C\uBC84] \uD30C\uC2F1 \uACB0\uACFC:", {
      success: parseResult.success,
      hasData: !!parseResult.data,
      ordersCount: parseResult.data?.orders?.length || 0
    });
    if (!parseResult.success) {
      console.error("\u274C [\uC11C\uBC84] \uD30C\uC2F1 \uC2E4\uD328:", parseResult.error);
      fs14.unlinkSync(filePath);
      clearTimeout(timeoutId);
      return responseHandler.send(400, {
        success: false,
        error: "\uD30C\uC2F1 \uC2E4\uD328",
        details: parseResult.error,
        debug: { phase: "parsing", elapsedTime: Date.now() - startTime }
      });
    }
    console.log("\u{1F50D} [\uC11C\uBC84] \uC0C1\uC138 \uC720\uD6A8\uC131 \uAC80\uC0AC \uC2DC\uC791");
    const detailedValidation = await POTemplateValidator.validatePOTemplateFile(filePath);
    console.log("\u{1F4CB} [\uC11C\uBC84] \uC0C1\uC138 \uC720\uD6A8\uC131 \uAC80\uC0AC \uC644\uB8CC");
    const responseData = {
      success: true,
      message: "\uD30C\uC77C \uD30C\uC2F1 \uC644\uB8CC",
      data: {
        fileName: req.file.originalname,
        filePath,
        totalOrders: parseResult.data?.totalOrders || 0,
        totalItems: parseResult.data?.totalItems || 0,
        orders: parseResult.data?.orders || [],
        validation: detailedValidation
      }
    };
    console.log("\u2705 [\uC11C\uBC84] \uC131\uACF5 \uC751\uB2F5 \uC804\uC1A1:", {
      success: responseData.success,
      fileName: responseData.data.fileName,
      totalOrders: responseData.data.totalOrders,
      totalItems: responseData.data.totalItems,
      ordersCount: responseData.data.orders?.length || 0,
      elapsedTime: Date.now() - startTime
    });
    clearTimeout(timeoutId);
    responseHandler.send(200, responseData);
  } catch (error) {
    console.error("\u{1F4A5} [\uC11C\uBC84] PO Template \uC5C5\uB85C\uB4DC \uC624\uB958:", {
      errorMessage: error instanceof Error ? error.message : "Unknown error",
      errorStack: error instanceof Error ? error.stack : "No stack trace",
      endpoint: "/api/po-template/upload",
      elapsedTime: Date.now() - startTime
    });
    if (req.file && fs14.existsSync(req.file.path)) {
      console.log("\u{1F5D1}\uFE0F [\uC11C\uBC84] \uC784\uC2DC \uD30C\uC77C \uC0AD\uC81C:", req.file.path);
      fs14.unlinkSync(req.file.path);
    }
    clearTimeout(timeoutId);
    responseHandler.send(500, {
      success: false,
      error: "\uC11C\uBC84 \uC624\uB958",
      details: error instanceof Error ? error.message : "Unknown error",
      debug: {
        phase: "catch_block",
        elapsedTime: Date.now() - startTime,
        memoryUsage: process.memoryUsage()
      }
    });
  }
});
router10.post("/save", simpleAuth, async (req, res) => {
  console.log("\u{1F525}\u{1F525}\u{1F525} /save \uC5D4\uB4DC\uD3EC\uC778\uD2B8 \uD638\uCD9C\uB428 - PDF/Excel \uD30C\uC77C \uC0DD\uC131 \uD3EC\uD568");
  try {
    const { orders, extractedFilePath } = req.body;
    console.log("\u{1F4CB} \uBC1B\uC740 extractedFilePath:", extractedFilePath);
    if (!orders || !Array.isArray(orders)) {
      return res.status(400).json({ error: "\uBC1C\uC8FC\uC11C \uB370\uC774\uD130\uAC00 \uB204\uB77D\uB418\uC5C8\uC2B5\uB2C8\uB2E4." });
    }
    if (db) {
      try {
        let savedOrders = 0;
        for (const orderData of orders) {
          let vendor = await db.select().from(vendors).where(eq15(vendors.name, orderData.vendorName)).limit(1);
          let vendorId;
          if (vendor.length === 0) {
            const newVendor = await db.insert(vendors).values({
              name: orderData.vendorName,
              contactPerson: "\uC790\uB3D9\uC0DD\uC131",
              email: `auto-${Date.now()}@example.com`,
              mainContact: "\uC790\uB3D9\uC0DD\uC131"
            }).returning();
            vendorId = newVendor[0].id;
          } else {
            vendorId = vendor[0].id;
          }
          let project = await db.select().from(projects).where(eq15(projects.projectName, orderData.siteName)).limit(1);
          let projectId;
          if (project.length === 0) {
            const newProject = await db.insert(projects).values({
              projectName: orderData.siteName,
              projectCode: `AUTO-${Date.now().toString().slice(-8)}`,
              status: "active"
            }).returning();
            projectId = newProject[0].id;
          } else {
            projectId = project[0].id;
          }
          let orderNumber = orderData.orderNumber;
          let suffix = 1;
          while (true) {
            try {
              const existing = await db.select().from(purchaseOrders).where(eq15(purchaseOrders.orderNumber, orderNumber));
              if (existing.length === 0) {
                break;
              }
              orderNumber = `${orderData.orderNumber}-${suffix}`;
              suffix++;
            } catch (error) {
              console.error("\uBC1C\uC8FC\uBC88\uD638 \uC911\uBCF5 \uAC80\uC0AC \uC624\uB958:", error);
              orderNumber = `${orderData.orderNumber}-${Date.now().toString().slice(-6)}`;
              break;
            }
          }
          console.log(`\u{1F4CB} \uCD5C\uC885 \uBC1C\uC8FC\uBC88\uD638: ${orderNumber} (\uC6D0\uBCF8: ${orderData.orderNumber})`);
          console.log(`\u{1F4C5} \uBC1C\uC8FC\uC77C\uC790 \uB514\uBC84\uAE45: orderData.orderDate="${orderData.orderDate}", type=${typeof orderData.orderDate}`);
          console.log(`\u{1F4C5} \uB0A9\uAE30\uC77C\uC790 \uB514\uBC84\uAE45: orderData.dueDate="${orderData.dueDate}", type=${typeof orderData.dueDate}`);
          console.log(`\u{1F525}\u{1F525}\u{1F525} \uB0A0\uC9DC \uBCC0\uD658 \uD568\uC218 \uC2DC\uC791 - \uC0C8 \uCF54\uB4DC \uC2E4\uD589\uB428`);
          const parseDate = (dateStr) => {
            console.log(`\u{1F525}\u{1F4C5} parseDate \uC785\uB825\uAC12: "${dateStr}", type=${typeof dateStr}, isEmpty=${!dateStr || dateStr.trim() === ""}`);
            if (!dateStr || dateStr.trim() === "") {
              console.log(`\u{1F525}\u{1F4C5} parseDate \uACB0\uACFC: null (\uBE48 \uBB38\uC790\uC5F4)`);
              return null;
            }
            const date2 = new Date(dateStr);
            const isValid = !isNaN(date2.getTime());
            console.log(`\u{1F525}\u{1F4C5} parseDate \uACB0\uACFC: "${dateStr}" -> ${isValid ? date2.toISOString() : "Invalid"} (valid: ${isValid})`);
            return isValid ? date2 : null;
          };
          const parsedOrderDate = parseDate(orderData.orderDate);
          const parsedDeliveryDate = parseDate(orderData.dueDate);
          console.log(`\u{1F4C5} \uCD5C\uC885 \uC800\uC7A5\uD560 \uB0A0\uC9DC\uB4E4:`, {
            orderDate: parsedOrderDate,
            deliveryDate: parsedDeliveryDate,
            orderDateISO: parsedOrderDate ? parsedOrderDate.toISOString() : null,
            deliveryDateISO: parsedDeliveryDate ? parsedDeliveryDate.toISOString() : null
          });
          const newOrder = await db.insert(purchaseOrders).values({
            orderNumber,
            projectId,
            vendorId,
            userId: req.user.id,
            orderDate: parsedOrderDate ? parsedOrderDate.toISOString().split("T")[0] : null,
            deliveryDate: parsedDeliveryDate ? parsedDeliveryDate.toISOString().split("T")[0] : null,
            totalAmount: orderData.totalAmount,
            status: "draft",
            notes: "PO Template\uC5D0\uC11C \uC790\uB3D9 \uC0DD\uC131\uB428"
          }).returning();
          console.log(`\u{1F4C5} DB\uC5D0 \uC800\uC7A5\uB41C \uBC1C\uC8FC\uC11C:`, {
            id: newOrder[0].id,
            orderNumber: newOrder[0].orderNumber,
            orderDate: newOrder[0].orderDate,
            deliveryDate: newOrder[0].deliveryDate
          });
          const orderId = newOrder[0].id;
          for (const item of orderData.items) {
            await db.insert(purchaseOrderItems).values({
              orderId,
              itemName: item.itemName,
              specification: item.specification,
              unit: item.unit || null,
              // 단위가 없으면 NULL (DB에서 NULL 허용됨)
              quantity: item.quantity,
              unitPrice: item.unitPrice,
              totalAmount: item.totalAmount,
              // categoryLv1: item.categoryLv1, // TODO: Add column to DB
              // categoryLv2: item.categoryLv2, // TODO: Add column to DB
              // categoryLv3: item.categoryLv3, // TODO: Add column to DB
              // supplyAmount: item.supplyAmount, // TODO: Add column to DB
              // taxAmount: item.taxAmount, // TODO: Add column to DB
              // deliveryName: item.deliveryName, // TODO: Add column to DB
              notes: item.notes
            });
          }
          let pdfBuffer;
          let pdfBase64;
          try {
            console.log("\u{1F4C4} PDF \uC0DD\uC131 \uC2DC\uC791:", orderNumber);
            console.log("\u{1F4CA} \uD3EC\uAD04\uC801 \uB370\uC774\uD130 \uC218\uC9D1 \uC2DC\uB3C4 - Order ID:", newOrder[0].id);
            const comprehensiveData = await ProfessionalPDFGenerationService.gatherComprehensiveOrderData(newOrder[0].id);
            if (comprehensiveData) {
              console.log("\u2705 \uD3EC\uAD04\uC801 \uB370\uC774\uD130 \uC218\uC9D1 \uC131\uACF5");
              pdfBuffer = await ProfessionalPDFGenerationService.generateProfessionalPDF(comprehensiveData);
              pdfBase64 = pdfBuffer.toString("base64");
            } else {
              console.log("\u26A0\uFE0F \uD3EC\uAD04\uC801 \uB370\uC774\uD130 \uC218\uC9D1 \uC2E4\uD328, fallback \uBAA8\uB4DC \uC0AC\uC6A9");
              const companyList = await db.select().from(companies).limit(1);
              const company = companyList[0];
              const pdfOrderData = {
                orderNumber,
                orderDate: parsedOrderDate,
                deliveryDate: parsedDeliveryDate ? parsedDeliveryDate : null,
                orderStatus: "created",
                approvalStatus: "pending",
                createdAt: /* @__PURE__ */ new Date(),
                updatedAt: /* @__PURE__ */ new Date(),
                issuerCompany: {
                  name: company?.companyName || "\uC775\uC9C4\uD14C\uD06C",
                  businessNumber: company?.businessNumber || "123-45-67890",
                  representative: company?.representativeName || "\uB300\uD45C\uC774\uC0AC",
                  address: company?.address || "\uC11C\uC6B8\uD2B9\uBCC4\uC2DC \uAC15\uB0A8\uAD6C",
                  phone: company?.phoneNumber || "02-1234-5678",
                  fax: company?.faxNumber || "02-1234-5679",
                  email: company?.email || "info@ikjintech.com",
                  website: company?.website || ""
                },
                vendorCompany: {
                  name: orderData.vendorName,
                  businessNumber: vendor[0]?.businessNumber || "",
                  representative: vendor[0]?.representative || "",
                  contactPerson: vendor[0]?.contactPerson || "",
                  phone: vendor[0]?.phone || vendor[0]?.mainContact || "",
                  fax: vendor[0]?.fax || "",
                  email: vendor[0]?.email || "",
                  address: vendor[0]?.address || "",
                  contactPhone: vendor[0]?.mainContact || "",
                  contactEmail: vendor[0]?.email || "",
                  businessType: vendor[0]?.businessType || ""
                },
                project: {
                  name: orderData.siteName,
                  code: project[0]?.projectCode || "",
                  clientName: project[0]?.clientName || "",
                  location: project[0]?.location || "",
                  startDate: project[0]?.startDate,
                  endDate: project[0]?.endDate,
                  projectManager: "",
                  projectManagerContact: "",
                  orderManager: "",
                  orderManagerContact: "",
                  totalBudget: project[0]?.totalBudget || 0
                },
                creator: {
                  name: req.user?.name || "\uC2DC\uC2A4\uD15C",
                  email: req.user?.email || "",
                  phone: req.user?.phoneNumber || "",
                  position: req.user?.position || "",
                  role: req.user?.role || "",
                  department: ""
                },
                items: orderData.items.map((item, idx) => ({
                  sequenceNo: idx + 1,
                  majorCategory: item.majorCategory || "",
                  middleCategory: item.middleCategory || "",
                  minorCategory: item.minorCategory || "",
                  itemCode: "",
                  name: item.itemName,
                  specification: item.specification || "",
                  quantity: parseFloat(item.quantity) || 0,
                  unit: item.unit || "EA",
                  unitPrice: parseFloat(item.unitPrice) || 0,
                  totalPrice: parseFloat(item.totalAmount) || 0,
                  deliveryLocation: orderData.deliveryName || orderData.vendorName,
                  remarks: item.remarks || "",
                  categoryPath: [item.majorCategory, item.middleCategory, item.minorCategory].filter((c) => c).join(" > ")
                })),
                financial: {
                  subtotalAmount: orderData.totalAmount,
                  vatRate: 0.1,
                  vatAmount: Math.round(orderData.totalAmount * 0.1),
                  totalAmount: Math.round(orderData.totalAmount * 1.1),
                  discountAmount: 0,
                  currencyCode: "KRW"
                },
                terms: {
                  paymentTerms: "\uC6D4\uB9D0 \uD604\uAE08 \uC9C0\uAE09",
                  deliveryTerms: "\uC9C0\uC815 \uC7A5\uC18C \uB0A9\uD488",
                  warrantyPeriod: "1\uB144",
                  penaltyRate: "",
                  qualityStandard: "",
                  inspectionMethod: ""
                },
                attachments: {
                  count: 0,
                  hasAttachments: false,
                  fileNames: [],
                  totalSize: 0
                },
                communication: {
                  emailHistory: [],
                  lastEmailSent: void 0,
                  totalEmailsSent: 0
                },
                approval: {
                  currentStatus: "pending",
                  approvalLevel: 0,
                  approvers: [],
                  requestedAt: /* @__PURE__ */ new Date(),
                  completedAt: void 0
                },
                metadata: {
                  notes: orderData.remarks || "",
                  specialInstructions: orderData.internalRemarks || "",
                  riskFactors: "",
                  complianceNotes: "",
                  revisionNumber: 1,
                  documentId: `DOC-${orderNumber}`,
                  generatedAt: /* @__PURE__ */ new Date(),
                  generatedBy: req.user?.name || "System",
                  templateVersion: "v2.0.0"
                }
              };
              pdfBuffer = await ProfessionalPDFGenerationService.generateProfessionalPDF(pdfOrderData);
              pdfBase64 = pdfBuffer.toString("base64");
            }
            const cleanOrderNumber = orderNumber.startsWith("PO-") ? orderNumber.substring(3) : orderNumber;
            const pdfOriginalName = `PO_Professional_${cleanOrderNumber}_${Date.now()}.pdf`;
            const pdfStoredName = `PO_Professional_${cleanOrderNumber}_${Date.now()}.pdf`;
            await db.insert(attachments).values({
              orderId: newOrder[0].id,
              originalName: pdfOriginalName,
              // 한글 포함 파일명
              storedName: pdfStoredName,
              // 영문 저장용 파일명
              filePath: `uploads/pdf/${pdfStoredName}`,
              fileSize: pdfBuffer.length,
              mimeType: "application/pdf",
              uploadedBy: req.user?.id || "system",
              fileData: pdfBase64
            });
            console.log("\u2705 PDF \uC0DD\uC131 \uBC0F \uC800\uC7A5 \uC644\uB8CC:", orderNumber);
          } catch (pdfError) {
            console.error("\u274C PDF \uC0DD\uC131 \uC2E4\uD328 (\uACC4\uC18D \uC9C4\uD589):", pdfError);
          }
          if (extractedFilePath && fs14.existsSync(extractedFilePath)) {
            try {
              console.log("\u{1F4CA} Excel \uD30C\uC77C \uC800\uC7A5 \uC2DC\uC791:", extractedFilePath);
              const excelBuffer = fs14.readFileSync(extractedFilePath);
              const excelBase64 = excelBuffer.toString("base64");
              const excelOriginalName = `${orderNumber}_\uAC11\uC9C0\uC744\uC9C0.xlsx`;
              const excelStoredName = `${orderNumber}_${Date.now()}_extracted.xlsx`;
              await db.insert(attachments).values({
                orderId: newOrder[0].id,
                originalName: excelOriginalName,
                // 한글 포함 파일명
                storedName: excelStoredName,
                // 영문 저장용 파일명
                filePath: extractedFilePath,
                fileSize: excelBuffer.length,
                mimeType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                uploadedBy: req.user?.id || "system",
                fileData: excelBase64
              });
              console.log("\u2705 Excel \uD30C\uC77C \uC800\uC7A5 \uC644\uB8CC:", orderNumber);
            } catch (excelError) {
              console.error("\u274C Excel \uD30C\uC77C \uC800\uC7A5 \uC2E4\uD328 (\uACC4\uC18D \uC9C4\uD589):", excelError);
            }
          }
          savedOrders++;
        }
        res.json({
          success: true,
          message: "\uC2E4\uC81C DB \uC800\uC7A5 \uC644\uB8CC",
          data: {
            savedOrders,
            usingMockDB: false
          }
        });
      } catch (dbError) {
        console.error("\uC2E4\uC81C DB \uC800\uC7A5 \uC2E4\uD328, Mock DB\uB85C \uD3F4\uBC31:", dbError);
        const mockResult = await POTemplateProcessorMock.saveToDatabase(orders, req.user.id);
        if (!mockResult.success) {
          return res.status(500).json({
            error: "Mock DB \uC800\uC7A5\uB3C4 \uC2E4\uD328",
            details: mockResult.error
          });
        }
        res.json({
          success: true,
          message: "Mock DB \uC800\uC7A5 \uC644\uB8CC (\uC2E4\uC81C DB \uC5F0\uACB0 \uC2E4\uD328)",
          data: {
            savedOrders: mockResult.savedOrders,
            usingMockDB: true,
            dbError: dbError instanceof Error ? dbError.message : "Unknown error"
          }
        });
      }
    } else {
      const mockResult = await POTemplateProcessorMock.saveToDatabase(orders, req.user.id);
      if (!mockResult.success) {
        return res.status(500).json({
          error: "Mock DB \uC800\uC7A5 \uC2E4\uD328",
          details: mockResult.error
        });
      }
      res.json({
        success: true,
        message: "Mock DB \uC800\uC7A5 \uC644\uB8CC (DB \uC5F0\uACB0 \uC5C6\uC74C)",
        data: {
          savedOrders: mockResult.savedOrders,
          usingMockDB: true
        }
      });
    }
  } catch (error) {
    console.error("PO Template \uC800\uC7A5 \uC624\uB958:", error);
    res.status(500).json({
      error: "\uC11C\uBC84 \uC624\uB958",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router10.post("/extract-sheets", simpleAuth, async (req, res) => {
  DebugLogger.logExecutionPath("/api/po-template/extract-sheets", "POTemplateProcessorMock.extractSheetsToFile");
  try {
    const { filePath, sheetNames = ["\uAC11\uC9C0", "\uC744\uC9C0"] } = req.body;
    if (!filePath) {
      return res.status(400).json({ error: "\uD30C\uC77C \uACBD\uB85C\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4." });
    }
    if (!fs14.existsSync(filePath)) {
      return res.status(400).json({ error: "\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4." });
    }
    const timestamp2 = Date.now();
    const extractedPath = path12.join(
      path12.dirname(filePath),
      `extracted-${timestamp2}.xlsx`
    );
    const extractResult = await POTemplateProcessorMock.extractSheetsToFile(
      filePath,
      extractedPath,
      sheetNames
    );
    if (!extractResult.success) {
      return res.status(500).json({
        error: "\uC2DC\uD2B8 \uCD94\uCD9C \uC2E4\uD328",
        details: extractResult.error
      });
    }
    res.json({
      success: true,
      message: "\uC2DC\uD2B8 \uCD94\uCD9C \uC644\uB8CC",
      data: {
        extractedPath,
        extractedSheets: extractResult.extractedSheets,
        extractedFilePath: extractedPath
        // Add this for frontend compatibility
      }
    });
  } catch (error) {
    console.error("\uC2DC\uD2B8 \uCD94\uCD9C \uC624\uB958:", error);
    res.status(500).json({
      error: "\uC11C\uBC84 \uC624\uB958",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router10.get("/db-stats", simpleAuth, async (req, res) => {
  try {
    if (db) {
      try {
        const vendorCount = await db.select().from(vendors);
        const projectCount = await db.select().from(projects);
        const orderCount = await db.select().from(purchaseOrders);
        const itemCount = await db.select().from(purchaseOrderItems);
        res.json({
          success: true,
          data: {
            stats: {
              vendors: vendorCount.length,
              projects: projectCount.length,
              purchaseOrders: orderCount.length,
              purchaseOrderItems: itemCount.length
            },
            sampleData: {
              recentVendors: vendorCount.slice(-3),
              recentProjects: projectCount.slice(-3),
              recentOrders: orderCount.slice(-3),
              recentItems: itemCount.slice(-3)
            },
            usingMockDB: false
          }
        });
      } catch (dbError) {
        console.error("\uC2E4\uC81C DB \uD1B5\uACC4 \uC870\uD68C \uC2E4\uD328, Mock DB\uB85C \uD3F4\uBC31:", dbError);
        res.json({
          success: true,
          data: {
            stats: { vendors: 0, projects: 0, purchaseOrders: 0, purchaseOrderItems: 0 },
            sampleData: {
              recentVendors: [],
              recentProjects: [],
              recentOrders: [],
              recentItems: []
            },
            usingMockDB: true,
            dbError: dbError instanceof Error ? dbError.message : "Unknown error"
          }
        });
      }
    } else {
      res.json({
        success: true,
        data: {
          stats: { vendors: 0, projects: 0, purchaseOrders: 0, purchaseOrderItems: 0 },
          sampleData: {
            recentVendors: [],
            recentProjects: [],
            recentOrders: [],
            recentItems: []
          },
          usingMockDB: true
        }
      });
    }
  } catch (error) {
    console.error("DB \uD1B5\uACC4 \uC870\uD68C \uC624\uB958:", error);
    res.status(500).json({
      error: "\uC11C\uBC84 \uC624\uB958",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router10.post("/send-email", simpleAuth, async (req, res) => {
  try {
    const {
      filePath,
      to,
      cc,
      bcc,
      subject,
      orderNumber,
      vendorName,
      orderDate,
      dueDate,
      totalAmount,
      additionalMessage
    } = req.body;
    if (!filePath || !to || !subject) {
      return res.status(400).json({
        error: "\uD544\uC218 \uB370\uC774\uD130\uAC00 \uB204\uB77D\uB418\uC5C8\uC2B5\uB2C8\uB2E4. (filePath, to, subject \uD544\uC218)"
      });
    }
    if (!fs14.existsSync(filePath)) {
      return res.status(400).json({ error: "\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4." });
    }
    const emailService4 = new POEmailServiceMock();
    const emailResult = await emailService4.sendPOWithAttachments(filePath, {
      to,
      cc,
      bcc,
      subject,
      orderNumber,
      vendorName,
      orderDate,
      dueDate,
      totalAmount,
      additionalMessage
    });
    if (!emailResult.success) {
      return res.status(500).json({
        error: "\uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328",
        details: emailResult.error
      });
    }
    if (emailResult.success && orderNumber) {
      try {
        const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
        const { purchaseOrders: purchaseOrders3 } = await Promise.resolve().then(() => (init_schema(), schema_exports));
        const { eq: eq38 } = await import("drizzle-orm");
        await db2.update(purchaseOrders3).set({
          orderStatus: "sent",
          updatedAt: /* @__PURE__ */ new Date()
        }).where(eq38(purchaseOrders3.orderNumber, orderNumber));
        console.log(`\u{1F4CB} \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC644\uB8CC: ${orderNumber} \u2192 sent`);
      } catch (updateError) {
        console.error(`\u274C \uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uC5C5\uB370\uC774\uD2B8 \uC2E4\uD328: ${orderNumber}`, updateError);
      }
    }
    res.json({
      success: true,
      message: emailResult.mockMode ? "\uC774\uBA54\uC77C \uBC1C\uC1A1 \uC644\uB8CC (Mock \uBAA8\uB4DC)" : "\uC774\uBA54\uC77C \uBC1C\uC1A1 \uC644\uB8CC",
      data: {
        messageId: emailResult.messageId,
        recipients: Array.isArray(to) ? to : [to],
        attachments: ["\uAC11\uC9C0/\uC744\uC9C0 \uC2DC\uD2B8 (Excel)", "\uAC11\uC9C0/\uC744\uC9C0 \uC2DC\uD2B8 (PDF)"],
        mockMode: emailResult.mockMode
      }
    });
  } catch (error) {
    console.error("\uC774\uBA54\uC77C \uBC1C\uC1A1 \uC624\uB958:", error);
    res.status(500).json({
      error: "\uC11C\uBC84 \uC624\uB958",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router10.post("/convert-to-pdf", simpleAuth, async (req, res) => {
  try {
    const { filePath, outputPath } = req.body;
    if (!filePath) {
      return res.status(400).json({ error: "\uD30C\uC77C \uACBD\uB85C\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4." });
    }
    if (!fs14.existsSync(filePath)) {
      return res.status(400).json({ error: "\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4." });
    }
    const timestamp2 = Date.now();
    const pdfPath = outputPath || path12.join(
      path12.dirname(filePath),
      `po-sheets-${timestamp2}.pdf`
    );
    const pdfResult = await convertExcelToPdfMock(filePath, pdfPath, ["\uAC11\uC9C0", "\uC744\uC9C0"]);
    if (!pdfResult.success) {
      return res.status(500).json({
        error: "PDF \uBCC0\uD658 \uC2E4\uD328",
        details: pdfResult.error
      });
    }
    res.json({
      success: true,
      message: "PDF \uBCC0\uD658 \uC644\uB8CC",
      data: {
        pdfPath: pdfResult.pdfPath,
        originalFile: filePath,
        convertedSheets: ["\uAC11\uC9C0", "\uC744\uC9C0"]
      }
    });
  } catch (error) {
    console.error("PDF \uBCC0\uD658 \uC624\uB958:", error);
    res.status(500).json({
      error: "\uC11C\uBC84 \uC624\uB958",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router10.post("/process-complete", simpleAuth, upload3.single("file"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "\uD30C\uC77C\uC774 \uC5C5\uB85C\uB4DC\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4." });
    }
    const filePath = req.file.path;
    const {
      sendEmail,
      emailTo,
      emailSubject,
      emailMessage,
      generatePDF
    } = req.body;
    const results = {
      upload: null,
      validation: null,
      parsing: null,
      saving: null,
      extraction: null,
      pdf: null,
      email: null
    };
    console.log("\u{1F4C1} 1\uB2E8\uACC4: \uD30C\uC77C \uC5C5\uB85C\uB4DC \uBC0F \uC720\uD6A8\uC131 \uAC80\uC0AC");
    const validation = await POTemplateValidator.validatePOTemplateFile(filePath);
    results.validation = validation;
    if (!validation.isValid) {
      fs14.unlinkSync(filePath);
      return res.status(400).json({
        error: "\uC720\uD6A8\uC131 \uAC80\uC0AC \uC2E4\uD328",
        details: validation.errors.join(", "),
        results
      });
    }
    console.log("\u{1F4CA} 2\uB2E8\uACC4: \uB370\uC774\uD130 \uD30C\uC2F1");
    const parseResult = POTemplateProcessorMock.parseInputSheet(filePath);
    results.parsing = parseResult;
    if (!parseResult.success) {
      fs14.unlinkSync(filePath);
      return res.status(400).json({
        error: "\uD30C\uC2F1 \uC2E4\uD328",
        details: parseResult.error,
        results
      });
    }
    console.log("\u{1F4BE} 3\uB2E8\uACC4: \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC800\uC7A5");
    const saveResult = await (void 0).saveToDatabase(parseResult.orders, req.user.id);
    results.saving = saveResult;
    console.log("\u{1F4CB} 4\uB2E8\uACC4: \uAC11\uC9C0/\uC744\uC9C0 \uC2DC\uD2B8 \uCD94\uCD9C");
    const timestamp2 = Date.now();
    const extractedPath = path12.join(
      path12.dirname(filePath),
      `extracted-${timestamp2}.xlsx`
    );
    const extractResult = await POTemplateProcessorMock.extractSheetsToFile(
      filePath,
      extractedPath,
      ["\uAC11\uC9C0", "\uC744\uC9C0"]
    );
    results.extraction = extractResult;
    if (generatePDF) {
      console.log("\u{1F4C4} 5\uB2E8\uACC4: PDF \uBCC0\uD658");
      const pdfPath = path12.join(
        path12.dirname(filePath),
        `po-sheets-${timestamp2}.pdf`
      );
      const pdfResult = await convertExcelToPdfMock(extractedPath, pdfPath);
      results.pdf = pdfResult;
    }
    if (sendEmail && emailTo && emailSubject) {
      console.log("\u{1F4E7} 6\uB2E8\uACC4: \uC774\uBA54\uC77C \uBC1C\uC1A1");
      const emailService4 = new POEmailServiceMock();
      const emailResult = await emailService4.sendPOWithAttachments(extractedPath, {
        to: emailTo,
        subject: emailSubject,
        orderNumber: parseResult.orders[0]?.orderNumber,
        vendorName: parseResult.orders[0]?.vendorName,
        orderDate: parseResult.orders[0]?.orderDate,
        dueDate: parseResult.orders[0]?.dueDate,
        totalAmount: parseResult.orders[0]?.totalAmount,
        additionalMessage: emailMessage
      });
      results.email = emailResult;
    }
    console.log("\u2705 \uBAA8\uB4E0 \uB2E8\uACC4 \uC644\uB8CC");
    res.json({
      success: true,
      message: "PO Template \uD1B5\uD569 \uCC98\uB9AC \uC644\uB8CC",
      data: {
        fileName: req.file.originalname,
        results,
        summary: {
          totalOrders: parseResult.totalOrders,
          totalItems: parseResult.totalItems,
          validationPassed: validation.isValid,
          savedToDatabase: saveResult.success,
          sheetsExtracted: extractResult.success,
          pdfGenerated: results.pdf?.success || false,
          emailSent: results.email?.success || false
        }
      }
    });
  } catch (error) {
    console.error("\uD1B5\uD569 \uCC98\uB9AC \uC624\uB958:", error);
    if (req.file && fs14.existsSync(req.file.path)) {
      fs14.unlinkSync(req.file.path);
    }
    res.status(500).json({
      error: "\uC11C\uBC84 \uC624\uB958",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router10.get("/test-email", simpleAuth, async (req, res) => {
  try {
    const emailService4 = new POEmailServiceMock();
    const testResult = await emailService4.testConnection();
    res.json({
      success: true,
      message: testResult.mockMode ? "\uC774\uBA54\uC77C Mock \uBAA8\uB4DC \uC815\uC0C1" : "\uC774\uBA54\uC77C \uC11C\uBC84 \uC5F0\uACB0 \uC131\uACF5",
      data: {
        mockMode: testResult.mockMode,
        error: testResult.error
      }
    });
  } catch (error) {
    console.error("\uC774\uBA54\uC77C \uC5F0\uACB0 \uD14C\uC2A4\uD2B8 \uC624\uB958:", error);
    res.status(500).json({
      error: "\uC11C\uBC84 \uC624\uB958",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router10.post("/reset-db", simpleAuth, (req, res) => {
  try {
    res.json({
      success: true,
      message: "DB \uCD08\uAE30\uD654 \uC694\uCCAD \uCC98\uB9AC\uB428 (Mock DB \uC5C6\uC74C)",
      data: { vendors: 0, projects: 0, purchaseOrders: 0, purchaseOrderItems: 0 }
    });
  } catch (error) {
    console.error("DB \uCD08\uAE30\uD654 \uC624\uB958:", error);
    res.status(500).json({
      error: "\uC11C\uBC84 \uC624\uB958",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router10.saveToDatabase = async function(orders, userId) {
  if (db) {
    try {
      let savedOrders = 0;
      for (const orderData of orders) {
        let vendor = await db.select().from(vendors).where(eq15(vendors.name, orderData.vendorName)).limit(1);
        let vendorId;
        if (vendor.length === 0) {
          const newVendor = await db.insert(vendors).values({
            name: orderData.vendorName,
            contactPerson: "\uC790\uB3D9\uC0DD\uC131",
            email: `auto-${Date.now()}@example.com`,
            mainContact: "\uC790\uB3D9\uC0DD\uC131"
          }).returning();
          vendorId = newVendor[0].id;
        } else {
          vendorId = vendor[0].id;
        }
        let project = await db.select().from(projects).where(eq15(projects.projectName, orderData.siteName)).limit(1);
        let projectId;
        if (project.length === 0) {
          const newProject = await db.insert(projects).values({
            projectName: orderData.siteName,
            projectCode: `AUTO-${Date.now().toString().slice(-8)}`,
            status: "active"
          }).returning();
          projectId = newProject[0].id;
        } else {
          projectId = project[0].id;
        }
        const newOrder = await db.insert(purchaseOrders).values({
          orderNumber: orderData.orderNumber,
          projectId,
          vendorId,
          userId,
          orderDate: new Date(orderData.orderDate),
          deliveryDate: orderData.dueDate ? new Date(orderData.dueDate) : null,
          totalAmount: orderData.totalAmount,
          status: "draft",
          notes: "PO Template\uC5D0\uC11C \uC790\uB3D9 \uC0DD\uC131\uB428"
        }).returning();
        const orderId = newOrder[0].id;
        for (const item of orderData.items) {
          await db.insert(purchaseOrderItems).values({
            orderId,
            itemName: item.itemName,
            specification: item.specification,
            quantity: item.quantity,
            unitPrice: item.unitPrice,
            totalAmount: item.totalAmount,
            categoryLv1: item.categoryLv1,
            categoryLv2: item.categoryLv2,
            categoryLv3: item.categoryLv3,
            supplyAmount: item.supplyAmount,
            taxAmount: item.taxAmount,
            deliveryName: item.deliveryName,
            notes: item.notes
          });
        }
        savedOrders++;
      }
      return {
        success: true,
        savedOrders,
        usingMockDB: false
      };
    } catch (dbError) {
      console.error("\uC2E4\uC81C DB \uC800\uC7A5 \uC2E4\uD328, Mock DB\uB85C \uD3F4\uBC31:", dbError);
      const mockResult = await POTemplateProcessorMock.saveToDatabase(orders, userId);
      return {
        success: mockResult.success,
        savedOrders: mockResult.savedOrders,
        usingMockDB: true,
        dbError: dbError instanceof Error ? dbError.message : "Unknown error"
      };
    }
  } else {
    const mockResult = await POTemplateProcessorMock.saveToDatabase(orders, userId);
    return {
      success: mockResult.success,
      savedOrders: mockResult.savedOrders,
      usingMockDB: true
    };
  }
};
var po_template_real_default = router10;

// server/routes/reports.ts
import { Router as Router11 } from "express";
init_db();
init_schema();
import { eq as eq16, sql as sql8, and as and8, gte as gte4, lte as lte4, inArray as inArray3 } from "drizzle-orm";
import * as XLSX7 from "xlsx";
var formatKoreanWon = (amount) => {
  return `\u20A9${amount.toLocaleString("ko-KR")}`;
};
var router11 = Router11();
router11.get("/debug-data", async (req, res) => {
  try {
    console.log("Debug data endpoint called");
    const orderCount = await db.select({
      count: sql8`count(*)`
    }).from(purchaseOrders);
    const itemCount = await db.select({
      count: sql8`count(*)`
    }).from(purchaseOrderItems);
    const itemsWithCategories = await db.select({
      count: sql8`count(*)`,
      withMajor: sql8`count(${items.majorCategory})`,
      withMiddle: sql8`count(${items.middleCategory})`,
      withMinor: sql8`count(${items.minorCategory})`
    }).from(items);
    const vendorCount = await db.select({
      count: sql8`count(*)`
    }).from(vendors);
    const sampleOrders = await db.select().from(purchaseOrders).limit(3);
    const sampleItems = await db.select().from(purchaseOrderItems).limit(3);
    const sampleItemsData = await db.select().from(items).limit(3);
    res.json({
      counts: {
        orders: orderCount[0],
        orderItems: itemCount[0],
        items: itemsWithCategories[0],
        vendors: vendorCount[0]
      },
      samples: {
        orders: sampleOrders,
        orderItems: sampleItems,
        items: sampleItemsData
      }
    });
  } catch (error) {
    console.error("Debug data error:", error);
    res.status(500).json({ error: "Debug failed" });
  }
});
router11.get("/debug-processing", async (req, res) => {
  try {
    console.log("Debug processing endpoint called");
    const allOrders = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      orderDate: purchaseOrders.orderDate,
      status: purchaseOrders.status,
      totalAmount: purchaseOrders.totalAmount
    }).from(purchaseOrders).limit(10);
    const ordersWithJoins = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      orderDate: purchaseOrders.orderDate,
      status: purchaseOrders.status,
      totalAmount: purchaseOrders.totalAmount,
      projectName: projects.projectName,
      vendorName: vendors.name
    }).from(purchaseOrders).leftJoin(projects, eq16(purchaseOrders.projectId, projects.id)).leftJoin(vendors, eq16(purchaseOrders.vendorId, vendors.id)).limit(10);
    res.json({
      totalOrders: allOrders.length,
      ordersWithoutJoins: allOrders,
      ordersWithJoins,
      message: "Debug data fetched successfully"
    });
  } catch (error) {
    console.error("Debug processing error:", error);
    res.status(500).json({ error: error.message });
  }
});
var parseDateFilters = (startDate, endDate) => {
  const filters = [];
  if (startDate && startDate !== "") {
    filters.push(gte4(purchaseOrders.orderDate, new Date(startDate)));
  }
  if (endDate && endDate !== "") {
    filters.push(lte4(purchaseOrders.orderDate, new Date(endDate)));
  }
  return filters;
};
router11.get("/by-category", async (req, res) => {
  try {
    const {
      startDate,
      endDate,
      majorCategory,
      middleCategory,
      minorCategory
    } = req.query;
    const dateFilters = parseDateFilters(startDate, endDate);
    console.log("Category report filters:", {
      startDate,
      endDate,
      majorCategory,
      middleCategory,
      minorCategory
    });
    let query = db.select({
      orderId: purchaseOrderItems.orderId,
      itemName: purchaseOrderItems.itemName,
      majorCategory: purchaseOrderItems.majorCategory,
      middleCategory: purchaseOrderItems.middleCategory,
      minorCategory: purchaseOrderItems.minorCategory,
      quantity: purchaseOrderItems.quantity,
      totalAmount: purchaseOrderItems.totalAmount,
      orderDate: purchaseOrders.orderDate,
      orderStatus: purchaseOrders.status,
      specification: purchaseOrderItems.specification,
      unitPrice: purchaseOrderItems.unitPrice
    }).from(purchaseOrderItems).innerJoin(purchaseOrders, eq16(purchaseOrderItems.orderId, purchaseOrders.id));
    const filters = [...dateFilters];
    if (majorCategory && majorCategory !== "all") {
      filters.push(eq16(purchaseOrderItems.majorCategory, majorCategory));
    }
    if (middleCategory && middleCategory !== "all") {
      filters.push(eq16(purchaseOrderItems.middleCategory, middleCategory));
    }
    if (minorCategory && minorCategory !== "all") {
      filters.push(eq16(purchaseOrderItems.minorCategory, minorCategory));
    }
    if (filters.length > 0) {
      query = query.where(and8(...filters));
    }
    const orderItemsWithCategories = await query;
    console.log("Order items with categories found:", orderItemsWithCategories.length);
    if (orderItemsWithCategories.length > 0) {
      console.log("Sample item:", orderItemsWithCategories[0]);
    }
    const categoryReport = orderItemsWithCategories.reduce((acc, item) => {
      let categoryKey = "";
      let hierarchyPath = "";
      if (minorCategory && minorCategory !== "all") {
        categoryKey = item.minorCategory || "\uBBF8\uBD84\uB958";
        hierarchyPath = `${item.majorCategory || "\uBBF8\uBD84\uB958"} > ${item.middleCategory || "\uBBF8\uBD84\uB958"} > ${categoryKey}`;
      } else if (middleCategory && middleCategory !== "all") {
        categoryKey = item.minorCategory || "\uBBF8\uBD84\uB958";
        hierarchyPath = `${item.majorCategory || "\uBBF8\uBD84\uB958"} > ${item.middleCategory || "\uBBF8\uBD84\uB958"} > ${categoryKey}`;
      } else if (majorCategory && majorCategory !== "all") {
        categoryKey = item.middleCategory || "\uBBF8\uBD84\uB958";
        hierarchyPath = `${item.majorCategory || "\uBBF8\uBD84\uB958"} > ${categoryKey}`;
      } else {
        categoryKey = item.majorCategory || "\uBBF8\uBD84\uB958";
        hierarchyPath = categoryKey;
      }
      if (!acc[categoryKey]) {
        acc[categoryKey] = {
          category: categoryKey,
          hierarchyPath,
          majorCategory: item.majorCategory,
          middleCategory: item.middleCategory,
          minorCategory: item.minorCategory,
          orderCount: /* @__PURE__ */ new Set(),
          itemCount: 0,
          totalQuantity: 0,
          totalAmount: 0,
          statusBreakdown: {},
          topItems: {}
        };
      }
      acc[categoryKey].orderCount.add(item.orderId);
      acc[categoryKey].itemCount += 1;
      acc[categoryKey].totalQuantity += parseFloat(item.quantity);
      acc[categoryKey].totalAmount += parseFloat(item.totalAmount);
      if (!acc[categoryKey].statusBreakdown[item.orderStatus]) {
        acc[categoryKey].statusBreakdown[item.orderStatus] = 0;
      }
      acc[categoryKey].statusBreakdown[item.orderStatus] += 1;
      if (!acc[categoryKey].topItems[item.itemName]) {
        acc[categoryKey].topItems[item.itemName] = {
          quantity: 0,
          amount: 0,
          specification: item.specification
        };
      }
      acc[categoryKey].topItems[item.itemName].quantity += parseFloat(item.quantity);
      acc[categoryKey].topItems[item.itemName].amount += parseFloat(item.totalAmount);
      return acc;
    }, {});
    const reportData = Object.values(categoryReport).map((item) => {
      const topItemsArray = Object.entries(item.topItems).map(([name, data]) => ({
        itemName: name,
        quantity: data.quantity,
        amount: data.amount,
        specification: data.specification
      })).sort((a, b) => b.amount - a.amount).slice(0, 5);
      return {
        ...item,
        orderCount: item.orderCount.size,
        averageAmount: item.totalAmount / item.itemCount,
        topItems: topItemsArray
      };
    });
    reportData.sort((a, b) => b.totalAmount - a.totalAmount);
    res.json({
      period: {
        startDate: startDate || "all",
        endDate: endDate || "all"
      },
      summary: {
        totalCategories: reportData.length,
        totalOrders: new Set(orderItemsWithCategories.map((item) => item.orderId)).size,
        totalItems: orderItemsWithCategories.length,
        totalAmount: reportData.reduce((sum2, item) => sum2 + item.totalAmount, 0)
      },
      data: reportData
    });
  } catch (error) {
    console.error("Error generating category report:", error);
    res.status(500).json({ error: "Failed to generate category report" });
  }
});
router11.get("/by-project", requireAuth, async (req, res) => {
  try {
    const { startDate, endDate, projectId } = req.query;
    const filters = parseDateFilters(startDate, endDate);
    if (projectId) {
      filters.push(eq16(purchaseOrders.projectId, parseInt(projectId)));
    }
    const ordersWithProjects = await db.select({
      projectId: projects.id,
      projectName: projects.projectName,
      projectCode: projects.projectCode,
      projectStatus: projects.status,
      orderId: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      orderDate: purchaseOrders.orderDate,
      totalAmount: purchaseOrders.totalAmount,
      orderStatus: purchaseOrders.status,
      vendorId: purchaseOrders.vendorId,
      vendorName: vendors.name
    }).from(purchaseOrders).innerJoin(projects, eq16(purchaseOrders.projectId, projects.id)).leftJoin(vendors, eq16(purchaseOrders.vendorId, vendors.id)).where(filters.length > 0 ? and8(...filters) : void 0);
    const projectReport = ordersWithProjects.reduce((acc, order) => {
      const projectKey = order.projectId;
      if (!acc[projectKey]) {
        acc[projectKey] = {
          projectId: order.projectId,
          projectName: order.projectName,
          projectCode: order.projectCode,
          projectStatus: order.projectStatus,
          orderCount: 0,
          totalAmount: 0,
          vendors: /* @__PURE__ */ new Set(),
          statusBreakdown: {},
          monthlyBreakdown: {}
        };
      }
      acc[projectKey].orderCount += 1;
      acc[projectKey].totalAmount += parseFloat(order.totalAmount);
      if (order.vendorId) {
        acc[projectKey].vendors.add(order.vendorName);
      }
      if (!acc[projectKey].statusBreakdown[order.orderStatus]) {
        acc[projectKey].statusBreakdown[order.orderStatus] = 0;
      }
      acc[projectKey].statusBreakdown[order.orderStatus] += 1;
      const month = new Date(order.orderDate).toISOString().slice(0, 7);
      if (!acc[projectKey].monthlyBreakdown[month]) {
        acc[projectKey].monthlyBreakdown[month] = {
          count: 0,
          amount: 0
        };
      }
      acc[projectKey].monthlyBreakdown[month].count += 1;
      acc[projectKey].monthlyBreakdown[month].amount += parseFloat(order.totalAmount);
      return acc;
    }, {});
    const reportData = Object.values(projectReport).map((item) => ({
      ...item,
      vendorCount: item.vendors.size,
      vendors: Array.from(item.vendors),
      averageOrderAmount: item.totalAmount / item.orderCount
    }));
    reportData.sort((a, b) => b.totalAmount - a.totalAmount);
    res.json({
      period: {
        startDate: startDate || "all",
        endDate: endDate || "all"
      },
      summary: {
        totalProjects: reportData.length,
        totalOrders: ordersWithProjects.length,
        totalAmount: reportData.reduce((sum2, item) => sum2 + item.totalAmount, 0),
        averagePerProject: reportData.length > 0 ? reportData.reduce((sum2, item) => sum2 + item.totalAmount, 0) / reportData.length : 0
      },
      data: reportData
    });
  } catch (error) {
    console.error("Error generating project report:", error);
    res.status(500).json({ error: "Failed to generate project report" });
  }
});
router11.get("/by-vendor", async (req, res) => {
  try {
    const { startDate, endDate, vendorId } = req.query;
    const filters = parseDateFilters(startDate, endDate);
    console.log("Vendor report starting...");
    console.log("Vendor report filters:", { startDate, endDate, vendorId, filters });
    console.log("Starting vendor report generation...");
    let vendorQuery = db.select({
      vendorId: vendors.id,
      vendorName: vendors.name,
      vendorCode: vendors.vendorCode,
      businessNumber: vendors.businessNumber,
      orderId: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      orderDate: purchaseOrders.orderDate,
      totalAmount: purchaseOrders.totalAmount,
      orderStatus: purchaseOrders.status,
      projectId: purchaseOrders.projectId,
      projectName: projects.projectName,
      originalVendorId: purchaseOrders.vendorId
      // Add original vendorId for null check
    }).from(purchaseOrders).leftJoin(vendors, eq16(purchaseOrders.vendorId, vendors.id)).leftJoin(projects, eq16(purchaseOrders.projectId, projects.id));
    if (filters.length > 0) {
      vendorQuery = vendorQuery.where(and8(...filters));
    }
    const ordersWithVendors = await vendorQuery;
    console.log("Orders with vendors found:", ordersWithVendors.length);
    const orderIds = ordersWithVendors.map((o) => o.orderId);
    const orderItemsData = await db.select({
      orderId: purchaseOrderItems.orderId,
      itemName: purchaseOrderItems.itemName,
      majorCategory: purchaseOrderItems.majorCategory,
      quantity: purchaseOrderItems.quantity,
      totalAmount: purchaseOrderItems.totalAmount
    }).from(purchaseOrderItems).where(inArray3(purchaseOrderItems.orderId, orderIds));
    const vendorReport = ordersWithVendors.reduce((acc, order) => {
      const vendorKey = order.vendorId || "unassigned";
      if (!acc[vendorKey]) {
        acc[vendorKey] = {
          vendorId: order.vendorId,
          vendorName: order.vendorName || "\uAC70\uB798\uCC98 \uBBF8\uC9C0\uC815",
          vendorCode: order.vendorCode || "N/A",
          businessNumber: order.businessNumber || "N/A",
          orderCount: 0,
          totalAmount: 0,
          projects: /* @__PURE__ */ new Set(),
          statusBreakdown: {},
          monthlyBreakdown: {},
          categoryBreakdown: {},
          topItems: {}
        };
      }
      acc[vendorKey].orderCount += 1;
      acc[vendorKey].totalAmount += parseFloat(order.totalAmount);
      if (order.projectId) {
        acc[vendorKey].projects.add(order.projectName);
      }
      if (!acc[vendorKey].statusBreakdown[order.orderStatus]) {
        acc[vendorKey].statusBreakdown[order.orderStatus] = 0;
      }
      acc[vendorKey].statusBreakdown[order.orderStatus] += 1;
      const month = new Date(order.orderDate).toISOString().slice(0, 7);
      if (!acc[vendorKey].monthlyBreakdown[month]) {
        acc[vendorKey].monthlyBreakdown[month] = {
          count: 0,
          amount: 0
        };
      }
      acc[vendorKey].monthlyBreakdown[month].count += 1;
      acc[vendorKey].monthlyBreakdown[month].amount += parseFloat(order.totalAmount);
      return acc;
    }, {});
    orderItemsData.forEach((item) => {
      const order = ordersWithVendors.find((o) => o.orderId === item.orderId);
      if (order) {
        const vendorKey = order.vendorId || "unassigned";
        if (vendorReport[vendorKey]) {
          const vendor = vendorReport[vendorKey];
          const category = item.majorCategory || "\uBBF8\uBD84\uB958";
          if (!vendor.categoryBreakdown[category]) {
            vendor.categoryBreakdown[category] = {
              count: 0,
              amount: 0
            };
          }
          vendor.categoryBreakdown[category].count += 1;
          vendor.categoryBreakdown[category].amount += parseFloat(item.totalAmount);
          if (!vendor.topItems[item.itemName]) {
            vendor.topItems[item.itemName] = {
              quantity: 0,
              amount: 0
            };
          }
          vendor.topItems[item.itemName].quantity += parseFloat(item.quantity);
          vendor.topItems[item.itemName].amount += parseFloat(item.totalAmount);
        }
      }
    });
    const reportData = Object.values(vendorReport).map((vendor) => {
      const topItemsArray = Object.entries(vendor.topItems).map(([name, data]) => ({
        itemName: name,
        quantity: data.quantity,
        amount: data.amount
      })).sort((a, b) => b.amount - a.amount).slice(0, 5);
      return {
        ...vendor,
        projectCount: vendor.projects.size,
        projects: Array.from(vendor.projects),
        averageOrderAmount: vendor.totalAmount / vendor.orderCount,
        topItems: topItemsArray
      };
    });
    reportData.sort((a, b) => b.totalAmount - a.totalAmount);
    res.json({
      period: {
        startDate: startDate || "all",
        endDate: endDate || "all"
      },
      summary: {
        totalVendors: reportData.length,
        totalOrders: ordersWithVendors.length,
        totalAmount: reportData.reduce((sum2, item) => sum2 + item.totalAmount, 0),
        averagePerVendor: reportData.length > 0 ? reportData.reduce((sum2, item) => sum2 + item.totalAmount, 0) / reportData.length : 0
      },
      data: reportData
    });
  } catch (error) {
    console.error("Error generating vendor report:", error);
    console.error("Error details:", error.message, error.stack);
    res.status(500).json({
      error: "Failed to generate vendor report",
      details: error.message,
      debug: "Check server console for full error"
    });
  }
});
router11.get("/export-excel", requireAuth, async (req, res) => {
  try {
    const { type, startDate, endDate, categoryType } = req.query;
    let reportData;
    let sheetName;
    switch (type) {
      case "category":
        const categoryResponse = await fetch(`${req.protocol}://${req.get("host")}/api/reports/by-category?startDate=${startDate || ""}&endDate=${endDate || ""}&categoryType=${categoryType || "major"}`, {
          headers: {
            "Cookie": req.headers.cookie || ""
          }
        });
        reportData = await categoryResponse.json();
        sheetName = "\uBD84\uB958\uBCC4 \uBCF4\uACE0\uC11C";
        break;
      case "project":
        const projectResponse = await fetch(`${req.protocol}://${req.get("host")}/api/reports/by-project?startDate=${startDate || ""}&endDate=${endDate || ""}`, {
          headers: {
            "Cookie": req.headers.cookie || ""
          }
        });
        reportData = await projectResponse.json();
        sheetName = "\uD504\uB85C\uC81D\uD2B8\uBCC4 \uBCF4\uACE0\uC11C";
        break;
      case "vendor":
        const vendorResponse = await fetch(`${req.protocol}://${req.get("host")}/api/reports/by-vendor?startDate=${startDate || ""}&endDate=${endDate || ""}`, {
          headers: {
            "Cookie": req.headers.cookie || ""
          }
        });
        reportData = await vendorResponse.json();
        sheetName = "\uAC70\uB798\uCC98\uBCC4 \uBCF4\uACE0\uC11C";
        break;
      case "processing":
        const processingParams = new URLSearchParams();
        if (startDate) processingParams.append("startDate", startDate);
        if (endDate) processingParams.append("endDate", endDate);
        processingParams.append("limit", "1000");
        const processingResponse = await fetch(`${req.protocol}://${req.get("host")}/api/reports/processing?${processingParams.toString()}`, {
          headers: {
            "Cookie": req.headers.cookie || ""
          }
        });
        if (!processingResponse.ok) {
          throw new Error(`Processing API error: ${processingResponse.status}`);
        }
        reportData = await processingResponse.json();
        sheetName = "\uBC1C\uC8FC \uB0B4\uC5ED \uAC80\uC0C9";
        break;
      default:
        return res.status(400).json({ error: "Invalid report type" });
    }
    const wb = XLSX7.utils.book_new();
    const summaryData = [
      ["\uBCF4\uACE0\uC11C \uC720\uD615", sheetName],
      ["\uC0DD\uC131\uC77C\uC2DC", (/* @__PURE__ */ new Date()).toLocaleString("ko-KR")],
      [],
      ["\uC694\uC57D \uC815\uBCF4"]
    ];
    if (reportData.period) {
      summaryData.splice(2, 0, ["\uAE30\uAC04", `${reportData.period.startDate} ~ ${reportData.period.endDate}`]);
    }
    if (reportData.summary) {
      Object.entries(reportData.summary).forEach(([key, value]) => {
        const label = key === "totalCategories" ? "\uCD1D \uBD84\uB958 \uC218" : key === "totalProjects" ? "\uCD1D \uD504\uB85C\uC81D\uD2B8 \uC218" : key === "totalVendors" ? "\uCD1D \uAC70\uB798\uCC98 \uC218" : key === "totalOrders" ? "\uCD1D \uBC1C\uC8FC \uC218" : key === "totalItems" ? "\uCD1D \uD488\uBAA9 \uC218" : key === "totalAmount" ? "\uCD1D \uAE08\uC561" : key === "averagePerProject" ? "\uD504\uB85C\uC81D\uD2B8\uB2F9 \uD3C9\uADE0" : key === "averagePerVendor" ? "\uAC70\uB798\uCC98\uB2F9 \uD3C9\uADE0" : key;
        const formattedValue = key.includes("Amount") || key.includes("average") ? formatKoreanWon(Math.floor(value)) : value;
        summaryData.push([label, formattedValue]);
      });
    } else if (type === "processing" && reportData.total !== void 0) {
      summaryData.push(["\uCD1D \uBC1C\uC8FC \uC218", reportData.total]);
      if (reportData.summary?.totalOrders) {
        summaryData.push(["\uAC80\uC0C9\uB41C \uBC1C\uC8FC \uC218", reportData.summary.totalOrders]);
      }
      if (reportData.summary?.totalAmount) {
        summaryData.push(["\uCD1D \uAE08\uC561", formatKoreanWon(Math.floor(reportData.summary.totalAmount))]);
      }
    }
    const summarySheet = XLSX7.utils.aoa_to_sheet(summaryData);
    XLSX7.utils.book_append_sheet(wb, summarySheet, "\uC694\uC57D");
    let detailData = [];
    if (type === "category") {
      detailData = [
        ["\uBD84\uB958", "\uBC1C\uC8FC \uC218", "\uD488\uBAA9 \uC218", "\uCD1D \uC218\uB7C9", "\uCD1D \uAE08\uC561", "\uD3C9\uADE0 \uAE08\uC561"]
      ];
      reportData.data.forEach((item) => {
        detailData.push([
          item.category,
          item.orderCount,
          item.itemCount,
          item.totalQuantity,
          formatKoreanWon(Math.floor(item.totalAmount)),
          formatKoreanWon(Math.floor(item.averageAmount))
        ]);
      });
    } else if (type === "project") {
      detailData = [
        ["\uD504\uB85C\uC81D\uD2B8\uBA85", "\uD504\uB85C\uC81D\uD2B8 \uCF54\uB4DC", "\uC0C1\uD0DC", "\uBC1C\uC8FC \uC218", "\uAC70\uB798\uCC98 \uC218", "\uCD1D \uAE08\uC561", "\uD3C9\uADE0 \uAE08\uC561"]
      ];
      reportData.data.forEach((item) => {
        detailData.push([
          item.projectName,
          item.projectCode,
          item.projectStatus,
          item.orderCount,
          item.vendorCount,
          formatKoreanWon(Math.floor(item.totalAmount)),
          formatKoreanWon(Math.floor(item.averageOrderAmount))
        ]);
      });
    } else if (type === "vendor") {
      detailData = [
        ["\uAC70\uB798\uCC98\uBA85", "\uAC70\uB798\uCC98 \uCF54\uB4DC", "\uC0AC\uC5C5\uC790\uBC88\uD638", "\uBC1C\uC8FC \uC218", "\uD504\uB85C\uC81D\uD2B8 \uC218", "\uCD1D \uAE08\uC561", "\uD3C9\uADE0 \uAE08\uC561"]
      ];
      reportData.data.forEach((item) => {
        detailData.push([
          item.vendorName,
          item.vendorCode,
          item.businessNumber,
          item.orderCount,
          item.projectCount,
          formatKoreanWon(Math.floor(item.totalAmount)),
          formatKoreanWon(Math.floor(item.averageOrderAmount))
        ]);
      });
    } else if (type === "processing") {
      detailData = [
        ["\uBC1C\uC8FC\uBC88\uD638", "\uBC1C\uC8FC\uC77C\uC790", "\uD504\uB85C\uC81D\uD2B8\uBA85", "\uAC70\uB798\uCC98\uBA85", "\uCD1D \uAE08\uC561", "\uC0C1\uD0DC", "\uC0DD\uC131\uC77C\uC2DC"]
      ];
      if (reportData.orders && Array.isArray(reportData.orders)) {
        reportData.orders.forEach((order) => {
          const statusText = order.status === "draft" ? "\uC784\uC2DC \uC800\uC7A5" : order.status === "pending" ? "\uC2B9\uC778 \uB300\uAE30" : order.status === "approved" ? "\uC9C4\uD589 \uC911" : order.status === "sent" ? "\uBC1C\uC1A1\uB428" : order.status === "completed" ? "\uC644\uB8CC" : order.status === "rejected" ? "\uBC18\uB824" : order.status;
          detailData.push([
            order.orderNumber || "-",
            order.orderDate || "-",
            order.projectName || "-",
            order.vendorName || "-",
            order.totalAmount ? formatKoreanWon(Math.floor(order.totalAmount)) : "-",
            statusText,
            order.createdAt ? new Date(order.createdAt).toLocaleString("ko-KR") : "-"
          ]);
        });
      }
    }
    const detailSheet = XLSX7.utils.aoa_to_sheet(detailData);
    XLSX7.utils.book_append_sheet(wb, detailSheet, "\uC0C1\uC138 \uB370\uC774\uD130");
    const buffer = XLSX7.write(wb, { bookType: "xlsx", type: "buffer" });
    res.setHeader("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    const safeFileName = type === "processing" ? "order_processing_report" : type === "category" ? "category_report" : type === "project" ? "project_report" : type === "vendor" ? "vendor_report" : "report";
    const dateStr = (/* @__PURE__ */ new Date()).toISOString().slice(0, 10);
    const filename = `${safeFileName}_${dateStr}.xlsx`;
    res.setHeader("Content-Disposition", `attachment; filename="${filename}"`);
    res.setHeader("Content-Length", buffer.length);
    res.send(buffer);
  } catch (error) {
    console.error("Error exporting Excel:", error);
    res.status(500).json({ error: "Failed to export Excel" });
  }
});
router11.get("/processing-test", async (req, res) => {
  try {
    console.log("Processing test endpoint called");
    const orders = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      orderDate: purchaseOrders.orderDate,
      status: purchaseOrders.status,
      totalAmount: purchaseOrders.totalAmount
    }).from(purchaseOrders).limit(5);
    res.json({
      success: true,
      count: orders.length,
      orders,
      message: "Test endpoint working"
    });
  } catch (error) {
    console.error("Processing test error:", error);
    res.status(500).json({
      error: error.message,
      stack: error.stack
    });
  }
});
router11.get("/processing", requireAuth, async (req, res) => {
  try {
    const {
      startDate,
      endDate,
      year,
      month,
      status,
      projectId,
      vendorId,
      search,
      page = "1",
      limit = "100"
    } = req.query;
    console.log("Processing report filters:", { startDate, endDate, year, month, status, projectId, vendorId, search });
    const filters = [];
    if (startDate && startDate !== "") {
      filters.push(gte4(purchaseOrders.orderDate, new Date(startDate)));
    }
    if (endDate && endDate !== "") {
      filters.push(lte4(purchaseOrders.orderDate, new Date(endDate)));
    }
    if (year && year !== "all" && year !== "") {
      const yearNum = parseInt(year);
      filters.push(
        and8(
          gte4(purchaseOrders.orderDate, /* @__PURE__ */ new Date(`${yearNum}-01-01`)),
          lte4(purchaseOrders.orderDate, /* @__PURE__ */ new Date(`${yearNum}-12-31`))
        )
      );
    }
    if (month && month !== "all" && month !== "" && year && year !== "all") {
      const yearNum = parseInt(year);
      const monthNum = parseInt(month);
      const startOfMonth = new Date(yearNum, monthNum - 1, 1);
      const endOfMonth = new Date(yearNum, monthNum, 0);
      filters.push(
        and8(
          gte4(purchaseOrders.orderDate, startOfMonth),
          lte4(purchaseOrders.orderDate, endOfMonth)
        )
      );
    }
    if (status && status !== "all" && status !== "") {
      filters.push(eq16(purchaseOrders.status, status));
    }
    if (projectId && projectId !== "all" && projectId !== "") {
      filters.push(eq16(purchaseOrders.projectId, parseInt(projectId)));
    }
    if (vendorId && vendorId !== "all" && vendorId !== "") {
      filters.push(eq16(purchaseOrders.vendorId, parseInt(vendorId)));
    }
    console.log(`Processing report filters count: ${filters.length}`);
    let ordersQuery = db.select().from(purchaseOrders).leftJoin(projects, eq16(purchaseOrders.projectId, projects.id)).leftJoin(vendors, eq16(purchaseOrders.vendorId, vendors.id)).leftJoin(users, eq16(purchaseOrders.userId, users.id));
    if (filters.length > 0) {
      ordersQuery = ordersQuery.where(and8(...filters));
    }
    if (search && search !== "") {
      const searchFilter = sql8`(
        ${purchaseOrders.orderNumber} ILIKE ${`%${search}%`} OR
        ${vendors.name} ILIKE ${`%${search}%`} OR
        ${projects.projectName} ILIKE ${`%${search}%`} OR
        ${purchaseOrders.notes} ILIKE ${`%${search}%`}
      )`;
      if (filters.length > 0) {
        ordersQuery = ordersQuery.where(and8(and8(...filters), searchFilter));
      } else {
        ordersQuery = ordersQuery.where(searchFilter);
      }
    }
    const pageNum = parseInt(page);
    const limitNum = parseInt(limit);
    const offset = (pageNum - 1) * limitNum;
    ordersQuery = ordersQuery.orderBy(purchaseOrders.orderDate).offset(offset).limit(limitNum);
    const orders = await ordersQuery;
    console.log(`Processing report found ${orders.length} orders`);
    if (orders.length > 0) {
      console.log("Debug: First order structure:", {
        purchaseOrders: orders[0].purchase_orders ? "exists" : "null",
        users: orders[0].users ? "exists" : "null",
        vendors: orders[0].vendors ? "exists" : "null",
        projects: orders[0].projects ? "exists" : "null"
      });
    }
    const flatOrders = orders.map((row) => ({
      // Order data
      id: row.purchase_orders?.id,
      orderNumber: row.purchase_orders?.orderNumber,
      orderDate: row.purchase_orders?.orderDate,
      status: row.purchase_orders?.status,
      totalAmount: row.purchase_orders?.totalAmount,
      deliveryDate: row.purchase_orders?.deliveryDate,
      notes: row.purchase_orders?.notes,
      createdAt: row.purchase_orders?.createdAt,
      updatedAt: row.purchase_orders?.updatedAt,
      userId: row.purchase_orders?.userId,
      // Project data
      projectId: row.projects?.id,
      projectName: row.projects?.projectName,
      projectCode: row.projects?.projectCode,
      // Vendor data
      vendorId: row.vendors?.id,
      vendorName: row.vendors?.name,
      vendorCode: row.vendors?.vendorCode,
      // User data
      userName: row.users?.name,
      userFirstName: row.users?.firstName,
      userLastName: row.users?.lastName
    })).filter((order) => order.id);
    console.log(`Processing report found ${flatOrders.length} orders after flattening`);
    if (flatOrders.length > 0) {
      const orderIds = flatOrders.map((o) => o.id);
      const orderItems = await db.select({
        orderId: purchaseOrderItems.orderId,
        id: purchaseOrderItems.id,
        itemName: purchaseOrderItems.itemName,
        majorCategory: purchaseOrderItems.majorCategory,
        middleCategory: purchaseOrderItems.middleCategory,
        minorCategory: purchaseOrderItems.minorCategory,
        specification: purchaseOrderItems.specification,
        quantity: purchaseOrderItems.quantity,
        unitPrice: purchaseOrderItems.unitPrice,
        totalAmount: purchaseOrderItems.totalAmount,
        unit: purchaseOrderItems.unit,
        notes: purchaseOrderItems.notes
      }).from(purchaseOrderItems).where(inArray3(purchaseOrderItems.orderId, orderIds));
      const ordersWithItems = flatOrders.map((order) => ({
        ...order,
        items: orderItems.filter((item) => item.orderId === order.id)
      }));
      let countQuery = db.select({ count: sql8`count(*)` }).from(purchaseOrders).leftJoin(projects, eq16(purchaseOrders.projectId, projects.id)).leftJoin(vendors, eq16(purchaseOrders.vendorId, vendors.id));
      if (filters.length > 0) {
        countQuery = countQuery.where(and8(...filters));
      }
      if (search && search !== "") {
        const searchFilter = sql8`(
          ${purchaseOrders.orderNumber} ILIKE ${`%${search}%`} OR
          ${vendors.name} ILIKE ${`%${search}%`} OR
          ${projects.projectName} ILIKE ${`%${search}%`} OR
          ${purchaseOrders.notes} ILIKE ${`%${search}%`}
        )`;
        if (filters.length > 0) {
          countQuery = countQuery.where(and8(and8(...filters), searchFilter));
        } else {
          countQuery = countQuery.where(searchFilter);
        }
      }
      const totalResult = await countQuery;
      const total = totalResult[0]?.count || 0;
      res.json({
        orders: ordersWithItems,
        total,
        page: pageNum,
        limit: limitNum,
        totalPages: Math.ceil(total / limitNum),
        summary: {
          totalOrders: ordersWithItems.length,
          totalAmount: ordersWithItems.reduce((sum2, order) => sum2 + parseFloat(order.totalAmount || 0), 0)
        }
      });
    } else {
      res.json({
        orders: [],
        total: 0,
        page: pageNum,
        limit: limitNum,
        totalPages: 0,
        summary: {
          totalOrders: 0,
          totalAmount: 0
        }
      });
    }
  } catch (error) {
    console.error("Error generating processing report:", error);
    console.error("Error details:", error.message, error.stack);
    res.status(500).json({
      error: "Failed to generate processing report",
      details: error.message
    });
  }
});
router11.get("/summary", requireAuth, async (req, res) => {
  try {
    const { startDate, endDate } = req.query;
    const dateFilters = parseDateFilters(startDate, endDate);
    const ordersSummary = await db.select({
      totalOrders: sql8`count(*)`,
      totalAmount: sql8`sum(${purchaseOrders.totalAmount})`,
      avgAmount: sql8`avg(${purchaseOrders.totalAmount})`
    }).from(purchaseOrders).where(dateFilters.length > 0 ? and8(...dateFilters) : void 0);
    const statusBreakdown = await db.select({
      status: purchaseOrders.status,
      count: sql8`count(*)`,
      totalAmount: sql8`sum(${purchaseOrders.totalAmount})`
    }).from(purchaseOrders).where(and8(...dateFilters)).groupBy(purchaseOrders.status);
    const topVendors = await db.select({
      vendorId: vendors.id,
      vendorName: vendors.name,
      orderCount: sql8`count(${purchaseOrders.id})`,
      totalAmount: sql8`sum(${purchaseOrders.totalAmount})`
    }).from(purchaseOrders).innerJoin(vendors, eq16(purchaseOrders.vendorId, vendors.id)).where(and8(...dateFilters)).groupBy(vendors.id, vendors.name).orderBy(sql8`sum(${purchaseOrders.totalAmount}) desc`).limit(10);
    const topProjects = await db.select({
      projectId: projects.id,
      projectName: projects.projectName,
      orderCount: sql8`count(${purchaseOrders.id})`,
      totalAmount: sql8`sum(${purchaseOrders.totalAmount})`
    }).from(purchaseOrders).innerJoin(projects, eq16(purchaseOrders.projectId, projects.id)).where(and8(...dateFilters)).groupBy(projects.id, projects.projectName).orderBy(sql8`sum(${purchaseOrders.totalAmount}) desc`).limit(10);
    const monthlyTrend = await db.select({
      month: sql8`to_char(${purchaseOrders.orderDate}, 'YYYY-MM')`,
      orderCount: sql8`count(*)`,
      totalAmount: sql8`sum(${purchaseOrders.totalAmount})`
    }).from(purchaseOrders).where(and8(...dateFilters)).groupBy(sql8`to_char(${purchaseOrders.orderDate}, 'YYYY-MM')`).orderBy(sql8`to_char(${purchaseOrders.orderDate}, 'YYYY-MM')`);
    res.json({
      period: {
        startDate: startDate || "all",
        endDate: endDate || "all"
      },
      summary: ordersSummary[0],
      statusBreakdown,
      topVendors,
      topProjects,
      monthlyTrend
    });
  } catch (error) {
    console.error("Error generating summary report:", error);
    res.status(500).json({ error: "Failed to generate summary report" });
  }
});
var reports_default = router11;

// server/routes/import-export.ts
import { Router as Router12 } from "express";

// server/utils/import-export-service.ts
init_db();
init_schema();
import * as XLSX8 from "xlsx";
import Papa from "papaparse";
import { eq as eq17 } from "drizzle-orm";
import fs15 from "fs";
var ImportExportService = class {
  // Parse Excel file
  static parseExcelFile(filePath) {
    const workbook = XLSX8.readFile(filePath);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const data = XLSX8.utils.sheet_to_json(worksheet);
    return data;
  }
  // Parse CSV file
  static parseCSVFile(filePath) {
    return new Promise((resolve, reject) => {
      const fileContent = fs15.readFileSync(filePath, "utf8");
      Papa.parse(fileContent, {
        header: true,
        complete: (results) => {
          resolve(results.data);
        },
        error: (error) => {
          reject(error);
        }
      });
    });
  }
  // Vendor Import Methods
  static async importVendors(filePath, fileType) {
    try {
      const data = fileType === "excel" ? this.parseExcelFile(filePath) : await this.parseCSVFile(filePath);
      let imported = 0;
      const errors = [];
      for (const row of data) {
        try {
          const vendorData = {
            name: row["\uAC70\uB798\uCC98\uBA85"] || row["name"] || "",
            vendorCode: row["\uAC70\uB798\uCC98\uCF54\uB4DC"] || row["vendorCode"],
            businessNumber: row["\uC0AC\uC5C5\uC790\uBC88\uD638"] || row["businessNumber"],
            contactPerson: row["\uB2F4\uB2F9\uC790"] || row["contactPerson"] || "",
            email: row["\uC774\uBA54\uC77C"] || row["email"] || "",
            phone: row["\uC804\uD654\uBC88\uD638"] || row["phone"],
            address: row["\uC8FC\uC18C"] || row["address"],
            businessType: row["\uC0AC\uC5C5\uC720\uD615"] || row["businessType"]
          };
          if (row["\uBCC4\uCE6D"] || row["aliases"]) {
            const aliasesStr = row["\uBCC4\uCE6D"] || row["aliases"];
            try {
              vendorData.aliases = JSON.stringify(
                typeof aliasesStr === "string" ? aliasesStr.split(",").map((a) => a.trim()) : aliasesStr
              );
            } catch (e) {
              vendorData.aliases = "[]";
            }
          }
          if (!vendorData.name || !vendorData.contactPerson || !vendorData.email) {
            errors.push({ row: imported + errors.length + 1, error: "Missing required fields", data: row });
            continue;
          }
          await db.insert(vendors).values({
            ...vendorData,
            aliases: vendorData.aliases ? JSON.parse(vendorData.aliases) : []
          });
          imported++;
        } catch (error) {
          errors.push({ row: imported + errors.length + 1, error: error.message, data: row });
        }
      }
      return { imported, errors };
    } catch (error) {
      throw new Error(`Failed to import vendors: ${error.message}`);
    }
  }
  // Item Import Methods
  static async importItems(filePath, fileType) {
    try {
      const data = fileType === "excel" ? this.parseExcelFile(filePath) : await this.parseCSVFile(filePath);
      let imported = 0;
      const errors = [];
      for (const row of data) {
        try {
          const itemData = {
            name: row["\uD488\uBAA9\uBA85"] || row["name"] || "",
            specification: row["\uADDC\uACA9"] || row["specification"],
            unit: row["\uB2E8\uC704"] || row["unit"] || "",
            unitPrice: parseFloat(row["\uB2E8\uAC00"] || row["unitPrice"]) || void 0,
            majorCategory: row["\uB300\uBD84\uB958"] || row["majorCategory"],
            middleCategory: row["\uC911\uBD84\uB958"] || row["middleCategory"],
            minorCategory: row["\uC18C\uBD84\uB958"] || row["minorCategory"],
            description: row["\uC124\uBA85"] || row["description"]
          };
          if (!itemData.name || !itemData.unit) {
            errors.push({ row: imported + errors.length + 1, error: "Missing required fields", data: row });
            continue;
          }
          await db.insert(items).values(itemData);
          imported++;
        } catch (error) {
          errors.push({ row: imported + errors.length + 1, error: error.message, data: row });
        }
      }
      return { imported, errors };
    } catch (error) {
      throw new Error(`Failed to import items: ${error.message}`);
    }
  }
  // Project Import Methods
  static async importProjects(filePath, fileType) {
    try {
      const data = fileType === "excel" ? this.parseExcelFile(filePath) : await this.parseCSVFile(filePath);
      let imported = 0;
      const errors = [];
      const projectTypeMap = {
        "\uC0C1\uC5C5\uC2DC\uC124": "commercial",
        "\uC8FC\uAC70\uC2DC\uC124": "residential",
        "\uC0B0\uC5C5\uC2DC\uC124": "industrial",
        "\uC778\uD504\uB77C": "infrastructure"
      };
      const statusMap = {
        "\uACC4\uD68D\uC911": "planning",
        "\uC9C4\uD589\uC911": "active",
        "\uBCF4\uB958": "on_hold",
        "\uC644\uB8CC": "completed",
        "\uCDE8\uC18C": "cancelled"
      };
      for (const row of data) {
        try {
          const projectData = {
            projectName: row["\uD504\uB85C\uC81D\uD2B8\uBA85"] || row["projectName"] || "",
            projectCode: row["\uD504\uB85C\uC81D\uD2B8\uCF54\uB4DC"] || row["projectCode"] || "",
            clientName: row["\uBC1C\uC8FC\uCC98"] || row["clientName"],
            projectType: projectTypeMap[row["\uD504\uB85C\uC81D\uD2B8\uC720\uD615"]] || row["projectType"] || "commercial",
            location: row["\uC704\uCE58"] || row["location"],
            startDate: row["\uC2DC\uC791\uC77C"] || row["startDate"],
            endDate: row["\uC885\uB8CC\uC77C"] || row["endDate"],
            status: statusMap[row["\uC0C1\uD0DC"]] || row["status"] || "active",
            totalBudget: parseFloat(row["\uC608\uC0B0"] || row["totalBudget"]) || void 0,
            description: row["\uC124\uBA85"] || row["description"]
          };
          if (!projectData.projectName || !projectData.projectCode) {
            errors.push({ row: imported + errors.length + 1, error: "Missing required fields", data: row });
            continue;
          }
          await db.insert(projects).values(projectData);
          imported++;
        } catch (error) {
          errors.push({ row: imported + errors.length + 1, error: error.message, data: row });
        }
      }
      return { imported, errors };
    } catch (error) {
      throw new Error(`Failed to import projects: ${error.message}`);
    }
  }
  // Purchase Order Import Methods
  static async importPurchaseOrders(filePath, fileType) {
    try {
      const data = fileType === "excel" ? this.parseExcelFile(filePath) : await this.parseCSVFile(filePath);
      let imported = 0;
      const errors = [];
      const orderGroups = /* @__PURE__ */ new Map();
      for (const row of data) {
        const orderNumber = row["\uBC1C\uC8FC\uBC88\uD638"] || row["orderNumber"] || "";
        if (!orderNumber) {
          errors.push({ row: imported + errors.length + 1, error: "Missing order number", data: row });
          continue;
        }
        if (!orderGroups.has(orderNumber)) {
          orderGroups.set(orderNumber, []);
        }
        orderGroups.get(orderNumber).push(row);
      }
      for (const [orderNumber, orderRows] of orderGroups) {
        try {
          const firstRow = orderRows[0];
          const orderData = {
            orderNumber,
            projectId: parseInt(firstRow["\uD604\uC7A5ID"] || firstRow["projectId"]) || null,
            vendorId: parseInt(firstRow["\uAC70\uB798\uCC98ID"] || firstRow["vendorId"]) || null,
            orderDate: this.parseDate(firstRow["\uBC1C\uC8FC\uC77C\uC790"] || firstRow["orderDate"]) || /* @__PURE__ */ new Date(),
            deliveryDate: this.parseDate(firstRow["\uB0A9\uAE30\uC77C\uC790"] || firstRow["deliveryDate"]) || null,
            status: "pending",
            totalAmount: 0,
            userId: "system",
            // 시스템에서 가져온 경우 기본값
            notes: firstRow["\uBE44\uACE0"] || firstRow["notes"] || ""
          };
          if (!orderData.projectId) {
            errors.push({ row: imported + errors.length + 1, error: "Missing or invalid project ID", data: firstRow });
            continue;
          }
          let totalAmount = 0;
          const orderItems = [];
          for (const [index2, row] of orderRows.entries()) {
            try {
              const itemData = {
                itemName: row["\uD488\uBAA9\uBA85"] || row["itemName"] || "",
                specification: row["\uADDC\uACA9"] || row["specification"] || "",
                unit: row["\uB2E8\uC704"] || row["unit"] || "",
                quantity: parseFloat(row["\uC218\uB7C9"] || row["quantity"]) || 0,
                unitPrice: parseFloat(row["\uB2E8\uAC00"] || row["unitPrice"]) || 0,
                totalAmount: parseFloat(row["\uCD1D\uAE08\uC561"] || row["totalAmount"]) || 0,
                majorCategory: row["\uB300\uBD84\uB958"] || row["majorCategory"] || "",
                middleCategory: row["\uC911\uBD84\uB958"] || row["middleCategory"] || "",
                minorCategory: row["\uC18C\uBD84\uB958"] || row["minorCategory"] || "",
                notes: row["\uD488\uBAA9\uBE44\uACE0"] || row["itemNotes"] || ""
              };
              if (!itemData.itemName || itemData.quantity <= 0 || itemData.unitPrice < 0) {
                errors.push({
                  row: imported + errors.length + 1,
                  error: `Invalid item data in row ${index2 + 1} for order ${orderNumber}`,
                  data: row
                });
                continue;
              }
              if (itemData.totalAmount === 0) {
                itemData.totalAmount = itemData.quantity * itemData.unitPrice;
              }
              totalAmount += itemData.totalAmount;
              orderItems.push(itemData);
            } catch (error) {
              errors.push({
                row: imported + errors.length + 1,
                error: `Error processing item in order ${orderNumber}: ${error.message}`,
                data: row
              });
            }
          }
          if (orderItems.length === 0) {
            errors.push({ row: imported + errors.length + 1, error: `No valid items for order ${orderNumber}`, data: firstRow });
            continue;
          }
          orderData.totalAmount = totalAmount;
          const [insertedOrder] = await db.insert(purchaseOrders).values(orderData).returning({ id: purchaseOrders.id });
          for (const itemData of orderItems) {
            await db.insert(purchaseOrderItems).values({
              orderId: insertedOrder.id,
              ...itemData
            });
          }
          imported++;
        } catch (error) {
          errors.push({ row: imported + errors.length + 1, error: `Error creating order ${orderNumber}: ${error.message}`, data: orderRows[0] });
        }
      }
      return { imported, errors };
    } catch (error) {
      throw new Error(`Failed to import purchase orders: ${error.message}`);
    }
  }
  // Helper method to parse dates
  static parseDate(dateStr) {
    if (!dateStr) return null;
    if (dateStr instanceof Date) return dateStr;
    const formats = [
      /^\d{4}-\d{2}-\d{2}$/,
      // YYYY-MM-DD
      /^\d{4}\/\d{2}\/\d{2}$/,
      // YYYY/MM/DD
      /^\d{2}\/\d{2}\/\d{4}$/,
      // MM/DD/YYYY
      /^\d{2}-\d{2}-\d{4}$/
      // MM-DD-YYYY
    ];
    const str = dateStr.toString().trim();
    if (formats.some((format2) => format2.test(str))) {
      const parsed = new Date(str);
      return isNaN(parsed.getTime()) ? null : parsed;
    }
    return null;
  }
  // Export Methods
  static async exportVendors(format2) {
    const vendorData = await db.select().from(vendors).where(eq17(vendors.isActive, true));
    const exportData = vendorData.map((vendor) => ({
      "\uAC70\uB798\uCC98\uBA85": vendor.name,
      "\uAC70\uB798\uCC98\uCF54\uB4DC": vendor.vendorCode || "",
      "\uBCC4\uCE6D": vendor.aliases ? vendor.aliases.join(", ") : "",
      "\uC0AC\uC5C5\uC790\uBC88\uD638": vendor.businessNumber || "",
      "\uB2F4\uB2F9\uC790": vendor.contactPerson,
      "\uC774\uBA54\uC77C": vendor.email,
      "\uC804\uD654\uBC88\uD638": vendor.phone || "",
      "\uC8FC\uC18C": vendor.address || "",
      "\uC0AC\uC5C5\uC720\uD615": vendor.businessType || "",
      "\uC0DD\uC131\uC77C": vendor.createdAt?.toISOString().split("T")[0] || ""
    }));
    if (format2 === "excel") {
      const ws = XLSX8.utils.json_to_sheet(exportData);
      const wb = XLSX8.utils.book_new();
      XLSX8.utils.book_append_sheet(wb, ws, "\uAC70\uB798\uCC98\uBAA9\uB85D");
      return Buffer.from(XLSX8.write(wb, { bookType: "xlsx", type: "buffer" }));
    } else {
      const csv = Papa.unparse(exportData, {
        header: true,
        encoding: "utf8"
      });
      return Buffer.from(csv, "utf8");
    }
  }
  static async exportItems(format2) {
    const itemData = await db.select().from(items).where(eq17(items.isActive, true));
    const exportData = itemData.map((item) => ({
      "\uD488\uBAA9\uBA85": item.name,
      "\uADDC\uACA9": item.specification || "",
      "\uB2E8\uC704": item.unit,
      "\uB2E8\uAC00": item.unitPrice || "",
      "\uB300\uBD84\uB958": item.majorCategory || "",
      "\uC911\uBD84\uB958": item.middleCategory || "",
      "\uC18C\uBD84\uB958": item.minorCategory || "",
      "\uC124\uBA85": item.description || "",
      "\uC0DD\uC131\uC77C": item.createdAt?.toISOString().split("T")[0] || ""
    }));
    if (format2 === "excel") {
      const ws = XLSX8.utils.json_to_sheet(exportData);
      const wb = XLSX8.utils.book_new();
      XLSX8.utils.book_append_sheet(wb, ws, "\uD488\uBAA9\uBAA9\uB85D");
      return Buffer.from(XLSX8.write(wb, { bookType: "xlsx", type: "buffer" }));
    } else {
      const csv = Papa.unparse(exportData, {
        header: true,
        encoding: "utf8"
      });
      return Buffer.from(csv, "utf8");
    }
  }
  static async exportProjects(format2) {
    const projectData = await db.select().from(projects).where(eq17(projects.isActive, true));
    const typeMap = {
      "commercial": "\uC0C1\uC5C5\uC2DC\uC124",
      "residential": "\uC8FC\uAC70\uC2DC\uC124",
      "industrial": "\uC0B0\uC5C5\uC2DC\uC124",
      "infrastructure": "\uC778\uD504\uB77C"
    };
    const statusMap = {
      "planning": "\uACC4\uD68D\uC911",
      "active": "\uC9C4\uD589\uC911",
      "on_hold": "\uBCF4\uB958",
      "completed": "\uC644\uB8CC",
      "cancelled": "\uCDE8\uC18C"
    };
    const exportData = projectData.map((project) => ({
      "\uD504\uB85C\uC81D\uD2B8\uBA85": project.projectName,
      "\uD504\uB85C\uC81D\uD2B8\uCF54\uB4DC": project.projectCode,
      "\uBC1C\uC8FC\uCC98": project.clientName || "",
      "\uD504\uB85C\uC81D\uD2B8\uC720\uD615": typeMap[project.projectType] || project.projectType,
      "\uC704\uCE58": project.location || "",
      "\uC2DC\uC791\uC77C": project.startDate || "",
      "\uC885\uB8CC\uC77C": project.endDate || "",
      "\uC0C1\uD0DC": statusMap[project.status] || project.status,
      "\uC608\uC0B0": project.totalBudget || "",
      "\uC124\uBA85": project.description || "",
      "\uC0DD\uC131\uC77C": project.createdAt?.toISOString().split("T")[0] || ""
    }));
    if (format2 === "excel") {
      const ws = XLSX8.utils.json_to_sheet(exportData);
      const wb = XLSX8.utils.book_new();
      XLSX8.utils.book_append_sheet(wb, ws, "\uD504\uB85C\uC81D\uD2B8\uBAA9\uB85D");
      return Buffer.from(XLSX8.write(wb, { bookType: "xlsx", type: "buffer" }));
    } else {
      const csv = Papa.unparse(exportData, {
        header: true,
        encoding: "utf8"
      });
      return Buffer.from(csv, "utf8");
    }
  }
  static async exportPurchaseOrders(format2) {
    const orderData = await db.select({
      orderId: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      projectId: purchaseOrders.projectId,
      vendorId: purchaseOrders.vendorId,
      orderDate: purchaseOrders.orderDate,
      deliveryDate: purchaseOrders.deliveryDate,
      status: purchaseOrders.status,
      notes: purchaseOrders.notes,
      itemName: purchaseOrderItems.itemName,
      specification: purchaseOrderItems.specification,
      unit: purchaseOrderItems.unit,
      quantity: purchaseOrderItems.quantity,
      unitPrice: purchaseOrderItems.unitPrice,
      totalAmount: purchaseOrderItems.totalAmount,
      majorCategory: purchaseOrderItems.majorCategory,
      middleCategory: purchaseOrderItems.middleCategory,
      minorCategory: purchaseOrderItems.minorCategory,
      itemNotes: purchaseOrderItems.notes
    }).from(purchaseOrders).leftJoin(purchaseOrderItems, eq17(purchaseOrders.id, purchaseOrderItems.orderId)).where(eq17(purchaseOrders.isActive, true));
    const statusMap = {
      "pending": "\uB300\uAE30",
      "approved": "\uC2B9\uC778",
      "sent": "\uBC1C\uC1A1",
      "received": "\uC218\uC2E0\uD655\uC778",
      "delivered": "\uB0A9\uD488\uC644\uB8CC",
      "cancelled": "\uCDE8\uC18C"
    };
    const exportData = orderData.map((order) => ({
      "\uBC1C\uC8FC\uBC88\uD638": order.orderNumber,
      "\uD604\uC7A5ID": order.projectId,
      "\uAC70\uB798\uCC98ID": order.vendorId || "",
      "\uBC1C\uC8FC\uC77C\uC790": order.orderDate?.toISOString().split("T")[0] || "",
      "\uB0A9\uAE30\uC77C\uC790": order.deliveryDate?.toISOString().split("T")[0] || "",
      "\uC0C1\uD0DC": statusMap[order.status] || order.status,
      "\uD488\uBAA9\uBA85": order.itemName || "",
      "\uADDC\uACA9": order.specification || "",
      "\uB2E8\uC704": order.unit || "",
      "\uC218\uB7C9": order.quantity || 0,
      "\uB2E8\uAC00": order.unitPrice || 0,
      "\uCD1D\uAE08\uC561": order.totalAmount || 0,
      "\uB300\uBD84\uB958": order.majorCategory || "",
      "\uC911\uBD84\uB958": order.middleCategory || "",
      "\uC18C\uBD84\uB958": order.minorCategory || "",
      "\uBE44\uACE0": order.notes || "",
      "\uD488\uBAA9\uBE44\uACE0": order.itemNotes || ""
    }));
    if (format2 === "excel") {
      const ws = XLSX8.utils.json_to_sheet(exportData);
      const wb = XLSX8.utils.book_new();
      XLSX8.utils.book_append_sheet(wb, ws, "\uBC1C\uC8FC\uC11C\uBAA9\uB85D");
      return Buffer.from(XLSX8.write(wb, { bookType: "xlsx", type: "buffer" }));
    } else {
      const csv = Papa.unparse(exportData, {
        header: true,
        encoding: "utf8"
      });
      return Buffer.from(csv, "utf8");
    }
  }
  // Generate sample template files
  static generateImportTemplate(entity, format2) {
    const templates = {
      vendors: [
        {
          "\uAC70\uB798\uCC98\uBA85": "\uC608\uC2DC\uAC70\uB798\uCC98",
          "\uAC70\uB798\uCC98\uCF54\uB4DC": "VENDOR001",
          "\uBCC4\uCE6D": "\uC608\uC2DC1, \uC608\uC2DC2",
          "\uC0AC\uC5C5\uC790\uBC88\uD638": "123-45-67890",
          "\uB2F4\uB2F9\uC790": "\uD64D\uAE38\uB3D9",
          "\uC774\uBA54\uC77C": "example@company.com",
          "\uC804\uD654\uBC88\uD638": "02-1234-5678",
          "\uC8FC\uC18C": "\uC11C\uC6B8\uC2DC \uAC15\uB0A8\uAD6C \uD14C\uD5E4\uB780\uB85C 123",
          "\uC0AC\uC5C5\uC720\uD615": "\uC81C\uC870\uC5C5"
        }
      ],
      items: [
        {
          "\uD488\uBAA9\uBA85": "\uCCA0\uADFC",
          "\uADDC\uACA9": "HD10",
          "\uB2E8\uC704": "TON",
          "\uB2E8\uAC00": "850000",
          "\uB300\uBD84\uB958": "\uCCA0\uADFC",
          "\uC911\uBD84\uB958": "\uC774\uD615\uCCA0\uADFC",
          "\uC18C\uBD84\uB958": "HD10",
          "\uC124\uBA85": "\uACE0\uAC15\uB3C4 \uC774\uD615\uCCA0\uADFC"
        }
      ],
      projects: [
        {
          "\uD504\uB85C\uC81D\uD2B8\uBA85": "\uAC15\uB0A8 \uC624\uD53C\uC2A4\uBE4C\uB529",
          "\uD504\uB85C\uC81D\uD2B8\uCF54\uB4DC": "GN-2024-001",
          "\uBC1C\uC8FC\uCC98": "ABC\uAC74\uC124",
          "\uD504\uB85C\uC81D\uD2B8\uC720\uD615": "\uC0C1\uC5C5\uC2DC\uC124",
          "\uC704\uCE58": "\uC11C\uC6B8\uC2DC \uAC15\uB0A8\uAD6C",
          "\uC2DC\uC791\uC77C": "2024-01-01",
          "\uC885\uB8CC\uC77C": "2024-12-31",
          "\uC0C1\uD0DC": "\uC9C4\uD589\uC911",
          "\uC608\uC0B0": "50000000000",
          "\uC124\uBA85": "20\uCE35 \uADDC\uBAA8 \uC624\uD53C\uC2A4\uBE4C\uB529 \uC2E0\uCD95\uACF5\uC0AC"
        }
      ],
      purchase_orders: [
        {
          "\uBC1C\uC8FC\uBC88\uD638": "PO20250101001",
          "\uD604\uC7A5ID": "1",
          "\uAC70\uB798\uCC98ID": "1",
          "\uBC1C\uC8FC\uC77C\uC790": "2025-01-01",
          "\uB0A9\uAE30\uC77C\uC790": "2025-01-15",
          "\uD488\uBAA9\uBA85": "\uCCA0\uADFC",
          "\uADDC\uACA9": "D16",
          "\uB2E8\uC704": "\uD1A4",
          "\uC218\uB7C9": 10,
          "\uB2E8\uAC00": 15e5,
          "\uCD1D\uAE08\uC561": 15e6,
          "\uB300\uBD84\uB958": "\uCCA0\uAC15\uC7AC\uB8CC",
          "\uC911\uBD84\uB958": "\uCCA0\uADFC",
          "\uC18C\uBD84\uB958": "\uC774\uD615\uCCA0\uADFC",
          "\uBE44\uACE0": "\uD604\uC7A5 \uC9C1\uB0A9"
        }
      ]
    };
    const data = templates[entity];
    if (format2 === "excel") {
      const ws = XLSX8.utils.json_to_sheet(data);
      const wb = XLSX8.utils.book_new();
      XLSX8.utils.book_append_sheet(wb, ws, "Template");
      return Buffer.from(XLSX8.write(wb, { bookType: "xlsx", type: "buffer" }));
    } else {
      const csv = Papa.unparse(data, {
        header: true,
        encoding: "utf8"
      });
      return Buffer.from(csv, "utf8");
    }
  }
};

// server/routes/import-export.ts
import multer4 from "multer";
import fs16 from "fs";
import path13 from "path";
var upload4 = multer4({
  dest: "uploads/",
  limits: {
    fileSize: 10 * 1024 * 1024
    // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    const allowedMimes = [
      "application/vnd.ms-excel",
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      "text/csv"
    ];
    if (allowedMimes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error("Invalid file type. Only Excel and CSV files are allowed."));
    }
  }
});
var router12 = Router12();
var getFileType = (filename) => {
  const ext = path13.extname(filename).toLowerCase();
  return ext === ".csv" ? "csv" : "excel";
};
router12.post("/import/vendors", requireAuth, upload4.single("file"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "No file uploaded" });
    }
    const fileType = getFileType(req.file.filename);
    const result = await ImportExportService.importVendors(req.file.path, fileType);
    fs16.unlinkSync(req.file.path);
    res.json({
      message: "Vendor import completed",
      imported: result.imported,
      errors: result.errors,
      totalRows: result.imported + result.errors.length
    });
  } catch (error) {
    console.error("Error importing vendors:", error);
    res.status(500).json({ error: "Failed to import vendors" });
  }
});
router12.post("/import/items", requireAuth, upload4.single("file"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "No file uploaded" });
    }
    const fileType = getFileType(req.file.filename);
    const result = await ImportExportService.importItems(req.file.path, fileType);
    fs16.unlinkSync(req.file.path);
    res.json({
      message: "Item import completed",
      imported: result.imported,
      errors: result.errors,
      totalRows: result.imported + result.errors.length
    });
  } catch (error) {
    console.error("Error importing items:", error);
    res.status(500).json({ error: "Failed to import items" });
  }
});
router12.post("/import/projects", requireAuth, upload4.single("file"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "No file uploaded" });
    }
    const fileType = getFileType(req.file.filename);
    const result = await ImportExportService.importProjects(req.file.path, fileType);
    fs16.unlinkSync(req.file.path);
    res.json({
      message: "Project import completed",
      imported: result.imported,
      errors: result.errors,
      totalRows: result.imported + result.errors.length
    });
  } catch (error) {
    console.error("Error importing projects:", error);
    res.status(500).json({ error: "Failed to import projects" });
  }
});
router12.post("/import/purchase_orders", requireAuth, upload4.single("file"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "No file uploaded" });
    }
    const fileType = getFileType(req.file.filename);
    const result = await ImportExportService.importPurchaseOrders(req.file.path, fileType);
    fs16.unlinkSync(req.file.path);
    res.json({
      message: "Purchase order import completed",
      imported: result.imported,
      errors: result.errors,
      totalRows: result.imported + result.errors.length
    });
  } catch (error) {
    console.error("Error importing purchase orders:", error);
    res.status(500).json({ error: "Failed to import purchase orders" });
  }
});
router12.get("/export/vendors", requireAuth, async (req, res) => {
  try {
    const format2 = req.query.format || "excel";
    const buffer = await ImportExportService.exportVendors(format2);
    const filename = `vendors_${(/* @__PURE__ */ new Date()).toISOString().split("T")[0]}.${format2 === "csv" ? "csv" : "xlsx"}`;
    const contentType = format2 === "csv" ? "text/csv; charset=utf-8" : "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
    res.setHeader("Content-Type", contentType);
    res.setHeader("Content-Disposition", `attachment; filename="${filename}"`);
    res.setHeader("Content-Length", buffer.length);
    res.send(buffer);
  } catch (error) {
    console.error("Error exporting vendors:", error);
    res.status(500).json({ error: "Failed to export vendors" });
  }
});
router12.get("/export/items", requireAuth, async (req, res) => {
  try {
    const format2 = req.query.format || "excel";
    const buffer = await ImportExportService.exportItems(format2);
    const filename = `items_${(/* @__PURE__ */ new Date()).toISOString().split("T")[0]}.${format2 === "csv" ? "csv" : "xlsx"}`;
    const contentType = format2 === "csv" ? "text/csv; charset=utf-8" : "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
    res.setHeader("Content-Type", contentType);
    res.setHeader("Content-Disposition", `attachment; filename="${filename}"`);
    res.setHeader("Content-Length", buffer.length);
    res.send(buffer);
  } catch (error) {
    console.error("Error exporting items:", error);
    res.status(500).json({ error: "Failed to export items" });
  }
});
router12.get("/export/projects", requireAuth, async (req, res) => {
  try {
    const format2 = req.query.format || "excel";
    const buffer = await ImportExportService.exportProjects(format2);
    const filename = `projects_${(/* @__PURE__ */ new Date()).toISOString().split("T")[0]}.${format2 === "csv" ? "csv" : "xlsx"}`;
    const contentType = format2 === "csv" ? "text/csv; charset=utf-8" : "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
    res.setHeader("Content-Type", contentType);
    res.setHeader("Content-Disposition", `attachment; filename="${filename}"`);
    res.setHeader("Content-Length", buffer.length);
    res.send(buffer);
  } catch (error) {
    console.error("Error exporting projects:", error);
    res.status(500).json({ error: "Failed to export projects" });
  }
});
router12.get("/export/purchase_orders", requireAuth, async (req, res) => {
  try {
    const format2 = req.query.format || "excel";
    const buffer = await ImportExportService.exportPurchaseOrders(format2);
    const filename = `purchase_orders_${(/* @__PURE__ */ new Date()).toISOString().split("T")[0]}.${format2 === "csv" ? "csv" : "xlsx"}`;
    const contentType = format2 === "csv" ? "text/csv; charset=utf-8" : "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
    res.setHeader("Content-Type", contentType);
    res.setHeader("Content-Disposition", `attachment; filename="${filename}"`);
    res.setHeader("Content-Length", buffer.length);
    res.send(buffer);
  } catch (error) {
    console.error("Error exporting purchase orders:", error);
    res.status(500).json({ error: "Failed to export purchase orders" });
  }
});
router12.get("/template/:entity", requireAuth, async (req, res) => {
  try {
    const entity = req.params.entity;
    const format2 = req.query.format || "excel";
    if (!["vendors", "items", "projects", "purchase_orders"].includes(entity)) {
      return res.status(400).json({ error: "Invalid entity type" });
    }
    const buffer = ImportExportService.generateImportTemplate(entity, format2);
    const filename = `${entity}_template.${format2 === "csv" ? "csv" : "xlsx"}`;
    const contentType = format2 === "csv" ? "text/csv; charset=utf-8" : "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
    res.setHeader("Content-Type", contentType);
    res.setHeader("Content-Disposition", `attachment; filename="${filename}"`);
    res.setHeader("Content-Length", buffer.length);
    res.send(buffer);
  } catch (error) {
    console.error("Error generating template:", error);
    res.status(500).json({ error: "Failed to generate template" });
  }
});
var import_export_default = router12;

// server/routes/email-history.ts
init_db();
init_schema();
import { Router as Router13 } from "express";
import { eq as eq18, desc as desc6, sql as sql9 } from "drizzle-orm";
import { z as z4 } from "zod";
var router13 = Router13();
var createEmailHistorySchema = z4.object({
  orderId: z4.number(),
  orderNumber: z4.string().optional(),
  recipients: z4.array(z4.object({
    email: z4.string().email(),
    name: z4.string().optional()
  })),
  cc: z4.array(z4.object({
    email: z4.string().email(),
    name: z4.string().optional()
  })).optional(),
  bcc: z4.array(z4.object({
    email: z4.string().email(),
    name: z4.string().optional()
  })).optional(),
  subject: z4.string(),
  messageContent: z4.string(),
  attachmentFiles: z4.array(z4.object({
    filename: z4.string(),
    path: z4.string(),
    size: z4.number()
  })).optional(),
  status: z4.string().default("pending"),
  errorMessage: z4.string().optional()
});
router13.get("/orders/:orderId/email-history", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.orderId);
    if (isNaN(orderId)) {
      return res.status(400).json({ error: "Invalid order ID" });
    }
    const order = await db.query.purchaseOrders.findFirst({
      where: eq18(purchaseOrders.id, orderId)
    });
    if (!order) {
      return res.status(404).json({ error: "Order not found" });
    }
    const emailHistory = await db.select({
      id: emailSendHistory.id,
      orderId: emailSendHistory.orderId,
      sentAt: emailSendHistory.sentAt,
      sentBy: emailSendHistory.senderUserId,
      sentByName: users.name,
      sentByEmail: users.email,
      recipients: emailSendHistory.recipients,
      cc: emailSendHistory.cc,
      bcc: emailSendHistory.bcc,
      subject: emailSendHistory.subject,
      body: emailSendHistory.messageContent,
      attachments: emailSendHistory.attachmentFiles,
      status: emailSendHistory.status,
      errorMessage: emailSendHistory.errorMessage,
      sentCount: emailSendHistory.sentCount,
      failedCount: emailSendHistory.failedCount,
      createdAt: emailSendHistory.createdAt,
      updatedAt: emailSendHistory.updatedAt
    }).from(emailSendHistory).leftJoin(users, eq18(emailSendHistory.senderUserId, users.id)).where(eq18(emailSendHistory.orderId, orderId)).orderBy(desc6(emailSendHistory.sentAt));
    res.json(emailHistory);
  } catch (error) {
    console.error("Error fetching email history:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});
router13.post("/email-history", requireAuth, async (req, res) => {
  try {
    const validatedData = createEmailHistorySchema.parse(req.body);
    const [newEmailHistory] = await db.insert(emailSendHistory).values({
      ...validatedData,
      senderUserId: req.user.id,
      attachmentFiles: validatedData.attachmentFiles || null
    }).returning();
    const order = await db.query.purchaseOrders.findFirst({
      where: eq18(purchaseOrders.id, validatedData.orderId)
    });
    if (order && order.status === "approved") {
      await db.update(purchaseOrders).set({
        status: "sent",
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq18(purchaseOrders.id, validatedData.orderId));
    }
    res.json(newEmailHistory);
  } catch (error) {
    if (error instanceof z4.ZodError) {
      return res.status(400).json({ error: "Invalid data", details: error.errors });
    }
    console.error("Error creating email history:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});
router13.get("/orders-email-status", requireAuth, async (req, res) => {
  try {
    try {
      const orders = await db.select({
        id: purchaseOrders.id,
        orderNumber: purchaseOrders.orderNumber,
        emailStatus: emailSendHistory.status,
        lastSentAt: emailSendHistory.sentAt,
        recipients: emailSendHistory.recipients
      }).from(purchaseOrders).leftJoin(emailSendHistory, eq18(purchaseOrders.id, emailSendHistory.orderId)).orderBy(desc6(purchaseOrders.id));
      res.json(orders);
    } catch (dbError) {
      console.error("Database query error:", dbError);
      const orders = await db.select({
        id: purchaseOrders.id,
        orderNumber: purchaseOrders.orderNumber,
        emailStatus: sql9`null`.as("email_status"),
        lastSentAt: sql9`null`.as("last_sent_at"),
        recipients: sql9`null`.as("recipients")
      }).from(purchaseOrders).orderBy(desc6(purchaseOrders.id));
      res.json(orders);
    }
  } catch (error) {
    console.error("Error fetching orders email status:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});
router13.put("/email-history/:id/status", requireAuth, async (req, res) => {
  try {
    const emailId = parseInt(req.params.id);
    if (isNaN(emailId)) {
      return res.status(400).json({ error: "Invalid email ID" });
    }
    const { status } = req.body;
    if (!["pending", "sent", "failed"].includes(status)) {
      return res.status(400).json({ error: "Invalid status" });
    }
    const [updated] = await db.update(emailSendHistory).set({ status, updatedAt: /* @__PURE__ */ new Date() }).where(eq18(emailSendHistory.id, emailId)).returning();
    if (!updated) {
      return res.status(404).json({ error: "Email not found" });
    }
    res.json(updated);
  } catch (error) {
    console.error("Error updating email status:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});
router13.get("/email-history/:id", requireAuth, async (req, res) => {
  try {
    const emailId = parseInt(req.params.id);
    if (isNaN(emailId)) {
      return res.status(400).json({ error: "Invalid email ID" });
    }
    const email = await db.select({
      id: emailSendHistory.id,
      orderId: emailSendHistory.orderId,
      orderNumber: purchaseOrders.orderNumber,
      vendorName: vendors.name,
      sentAt: emailSendHistory.sentAt,
      senderUserId: emailSendHistory.senderUserId,
      sentByName: users.name,
      sentByEmail: users.email,
      recipients: emailSendHistory.recipients,
      cc: emailSendHistory.cc,
      bcc: emailSendHistory.bcc,
      subject: emailSendHistory.subject,
      messageContent: emailSendHistory.messageContent,
      attachmentFiles: emailSendHistory.attachmentFiles,
      status: emailSendHistory.status,
      errorMessage: emailSendHistory.errorMessage,
      sentCount: emailSendHistory.sentCount,
      failedCount: emailSendHistory.failedCount,
      createdAt: emailSendHistory.createdAt,
      updatedAt: emailSendHistory.updatedAt
    }).from(emailSendHistory).leftJoin(purchaseOrders, eq18(emailSendHistory.orderId, purchaseOrders.id)).leftJoin(vendors, eq18(purchaseOrders.vendorId, vendors.id)).leftJoin(users, eq18(emailSendHistory.senderUserId, users.id)).where(eq18(emailSendHistory.id, emailId));
    if (!email || email.length === 0) {
      return res.status(404).json({ error: "Email not found" });
    }
    res.json(email[0]);
  } catch (error) {
    console.error("Error fetching email detail:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});
var email_history_default = router13;

// server/routes/excel-template.ts
import express from "express";
import * as XLSX9 from "xlsx";
var router14 = express.Router();
router14.get("/download", async (req, res) => {
  try {
    const templateData = [
      // 헤더 행
      [
        "\uBC1C\uC8FC\uC77C\uC790",
        "\uB0A9\uAE30\uC77C\uC790",
        "\uAC70\uB798\uCC98\uBA85",
        "\uAC70\uB798\uCC98 \uC774\uBA54\uC77C",
        "\uB0A9\uD488\uCC98\uBA85",
        "\uB0A9\uD488\uCC98 \uC774\uBA54\uC77C",
        "\uD504\uB85C\uC81D\uD2B8\uBA85",
        "\uB300\uBD84\uB958",
        "\uC911\uBD84\uB958",
        "\uC18C\uBD84\uB958",
        "\uD488\uBAA9\uBA85",
        "\uADDC\uACA9",
        "\uC218\uB7C9",
        "\uB2E8\uAC00",
        "\uCD1D\uAE08\uC561",
        "\uBE44\uACE0"
      ],
      // 샘플 데이터 행 1
      [
        "2025-08-05",
        "2025-08-12",
        "(\uC8FC)\uC775\uC9C4",
        "ikjin@example.com",
        "(\uC8FC)\uC775\uC9C4",
        "ikjin@example.com",
        "\uC11C\uC6B8 \uC544\uD30C\uD2B8 \uC2E0\uCD95\uACF5\uC0AC",
        "\uCCA0\uADFC",
        "\uBD09\uAC15",
        "D19",
        "D19 \uCCA0\uADFC",
        "KS D 3504",
        100,
        5e4,
        5e6,
        "\uAE34\uAE09 \uB0A9\uD488 \uC694\uCCAD"
      ],
      // 샘플 데이터 행 2
      [
        "2025-08-05",
        "2025-08-15",
        "\uC0BC\uC131\uAC74\uC124",
        "samsung@example.com",
        "\uC0BC\uC131\uAC74\uC124",
        "samsung@example.com",
        "\uBD80\uC0B0 \uC0C1\uAC00 \uAC74\uC124",
        "\uCF58\uD06C\uB9AC\uD2B8",
        "\uB808\uBBF8\uCF58",
        "C24",
        "\uB808\uBBF8\uCF58 C24",
        "24MPa",
        50,
        12e4,
        6e6,
        "\uD604\uC7A5 \uC9C1\uB0A9"
      ],
      // 샘플 데이터 행 3
      [
        "2025-08-05",
        "2025-08-10",
        "\uD604\uB300\uAC74\uC124",
        "hyundai@example.com",
        "\uD604\uB300\uAC74\uC124",
        "hyundai@example.com",
        "\uB300\uC804 \uACF5\uC7A5 \uC99D\uCD95",
        "\uAC15\uC7AC",
        "H\uBE54",
        "H-400x200",
        "H\uBE54 400x200",
        "SS400",
        20,
        15e4,
        3e6,
        "\uD488\uC9C8 \uAC80\uC0AC \uD544\uC218"
      ]
    ];
    const workbook = XLSX9.utils.book_new();
    const inputWorksheet = XLSX9.utils.aoa_to_sheet(templateData);
    const columnWidths = [
      { wch: 12 },
      // A: 발주일자
      { wch: 12 },
      // B: 납기일자
      { wch: 15 },
      // C: 거래처명
      { wch: 20 },
      // D: 거래처 이메일
      { wch: 15 },
      // E: 납품처명
      { wch: 20 },
      // F: 납품처 이메일
      { wch: 20 },
      // G: 프로젝트명
      { wch: 10 },
      // H: 대분류
      { wch: 10 },
      // I: 중분류
      { wch: 10 },
      // J: 소분류
      { wch: 20 },
      // K: 품목명
      { wch: 15 },
      // L: 규격
      { wch: 10 },
      // M: 수량
      { wch: 12 },
      // N: 단가
      { wch: 15 },
      // O: 총금액
      { wch: 20 }
      // P: 비고
    ];
    inputWorksheet["!cols"] = columnWidths;
    const headerStyle = {
      fill: { fgColor: { rgb: "CCCCCC" } },
      font: { bold: true, color: { rgb: "000000" } },
      alignment: { horizontal: "center", vertical: "center" },
      border: {
        top: { style: "thin", color: { rgb: "000000" } },
        bottom: { style: "thin", color: { rgb: "000000" } },
        left: { style: "thin", color: { rgb: "000000" } },
        right: { style: "thin", color: { rgb: "000000" } }
      }
    };
    for (let col = 0; col < 16; col++) {
      const cellRef = XLSX9.utils.encode_cell({ r: 0, c: col });
      if (!inputWorksheet[cellRef]) inputWorksheet[cellRef] = { v: "", t: "s" };
      inputWorksheet[cellRef].s = headerStyle;
    }
    const dataBorder = {
      border: {
        top: { style: "thin", color: { rgb: "CCCCCC" } },
        bottom: { style: "thin", color: { rgb: "CCCCCC" } },
        left: { style: "thin", color: { rgb: "CCCCCC" } },
        right: { style: "thin", color: { rgb: "CCCCCC" } }
      }
    };
    for (let row = 1; row <= 3; row++) {
      for (let col = 0; col < 16; col++) {
        const cellRef = XLSX9.utils.encode_cell({ r: row, c: col });
        if (!inputWorksheet[cellRef]) inputWorksheet[cellRef] = { v: "", t: "s" };
        inputWorksheet[cellRef].s = dataBorder;
      }
    }
    XLSX9.utils.book_append_sheet(workbook, inputWorksheet, "Input");
    const gapjiData = [
      ["\uBC1C\uC8FC\uC11C (\uAC11\uC9C0)", "", "", "", "", ""],
      ["", "", "", "", "", ""],
      ["\uBC1C\uC8FC\uBC88\uD638:", "", "\uBC1C\uC8FC\uC77C\uC790:", "", "", ""],
      ["\uAC70\uB798\uCC98:", "", "\uB0A9\uAE30\uC77C\uC790:", "", "", ""],
      ["\uB0A9\uD488\uCC98:", "", "\uD504\uB85C\uC81D\uD2B8:", "", "", ""],
      ["", "", "", "", "", ""],
      ["\uC21C\uBC88", "\uD488\uBAA9\uBA85", "\uADDC\uACA9", "\uC218\uB7C9", "\uB2E8\uAC00", "\uAE08\uC561"],
      ["1", "", "", "", "", ""],
      ["2", "", "", "", "", ""],
      ["3", "", "", "", "", ""],
      ["", "", "", "", "", ""],
      ["", "", "", "\uD569\uACC4:", "", ""]
    ];
    const gapjiWorksheet = XLSX9.utils.aoa_to_sheet(gapjiData);
    gapjiWorksheet["!cols"] = [
      { wch: 8 },
      { wch: 25 },
      { wch: 15 },
      { wch: 10 },
      { wch: 12 },
      { wch: 15 }
    ];
    XLSX9.utils.book_append_sheet(workbook, gapjiWorksheet, "\uAC11\uC9C0");
    const euljiData = [
      ["\uBC1C\uC8FC\uC11C (\uC744\uC9C0)", "", "", "", "", ""],
      ["", "", "", "", "", ""],
      ["\uBC1C\uC8FC\uBC88\uD638:", "", "\uBC1C\uC8FC\uC77C\uC790:", "", "", ""],
      ["\uAC70\uB798\uCC98:", "", "\uB0A9\uAE30\uC77C\uC790:", "", "", ""],
      ["\uB0A9\uD488\uCC98:", "", "\uD504\uB85C\uC81D\uD2B8:", "", "", ""],
      ["", "", "", "", "", ""],
      ["\uC21C\uBC88", "\uD488\uBAA9\uBA85", "\uADDC\uACA9", "\uC218\uB7C9", "\uB2E8\uAC00", "\uAE08\uC561"],
      ["1", "", "", "", "", ""],
      ["2", "", "", "", "", ""],
      ["3", "", "", "", "", ""],
      ["", "", "", "", "", ""],
      ["", "", "", "\uD569\uACC4:", "", ""]
    ];
    const euljiWorksheet = XLSX9.utils.aoa_to_sheet(euljiData);
    euljiWorksheet["!cols"] = [
      { wch: 8 },
      { wch: 25 },
      { wch: 15 },
      { wch: 10 },
      { wch: 12 },
      { wch: 15 }
    ];
    XLSX9.utils.book_append_sheet(workbook, euljiWorksheet, "\uC744\uC9C0");
    const buffer = XLSX9.write(workbook, {
      type: "buffer",
      bookType: "xlsx",
      cellStyles: true,
      bookSST: false
    });
    const filename = "PO_Excel_Template.xlsx";
    const encodedFilename = encodeURIComponent(filename);
    res.setHeader("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    res.setHeader("Content-Disposition", `attachment; filename="${filename}"; filename*=UTF-8''${encodedFilename}`);
    res.setHeader("Content-Length", buffer.length.toString());
    res.send(buffer);
  } catch (error) {
    console.error("Excel \uD15C\uD50C\uB9BF \uC0DD\uC131 \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      error: "Excel \uD15C\uD50C\uB9BF \uC0DD\uC131 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."
    });
  }
});
router14.get("/info", (req, res) => {
  try {
    const templateInfo = {
      success: true,
      data: {
        fileName: "PO_Excel_Template.xlsx",
        description: "16\uAC1C \uCEEC\uB7FC \uAD6C\uC870\uC758 \uD45C\uC900 \uBC1C\uC8FC\uC11C Excel \uD15C\uD50C\uB9BF",
        columns: [
          { column: "A", name: "\uBC1C\uC8FC\uC77C\uC790", required: true, description: "\uBC1C\uC8FC\uC11C \uC791\uC131 \uB0A0\uC9DC (YYYY-MM-DD)" },
          { column: "B", name: "\uB0A9\uAE30\uC77C\uC790", required: false, description: "\uB0A9\uD488 \uC608\uC815 \uB0A0\uC9DC (YYYY-MM-DD)" },
          { column: "C", name: "\uAC70\uB798\uCC98\uBA85", required: true, description: "\uACF5\uAE09\uC5C5\uCCB4 \uC774\uB984" },
          { column: "D", name: "\uAC70\uB798\uCC98 \uC774\uBA54\uC77C", required: false, description: "\uACF5\uAE09\uC5C5\uCCB4 \uC774\uBA54\uC77C \uC8FC\uC18C" },
          { column: "E", name: "\uB0A9\uD488\uCC98\uBA85", required: true, description: "\uB0A9\uD488\uBC1B\uC744 \uC5C5\uCCB4\uBA85" },
          { column: "F", name: "\uB0A9\uD488\uCC98 \uC774\uBA54\uC77C", required: false, description: "\uB0A9\uD488\uCC98 \uC774\uBA54\uC77C \uC8FC\uC18C" },
          { column: "G", name: "\uD504\uB85C\uC81D\uD2B8\uBA85", required: true, description: "\uD574\uB2F9 \uD504\uB85C\uC81D\uD2B8/\uD604\uC7A5\uBA85" },
          { column: "H", name: "\uB300\uBD84\uB958", required: true, description: "\uD488\uBAA9 \uB300\uBD84\uB958" },
          { column: "I", name: "\uC911\uBD84\uB958", required: false, description: "\uD488\uBAA9 \uC911\uBD84\uB958" },
          { column: "J", name: "\uC18C\uBD84\uB958", required: false, description: "\uD488\uBAA9 \uC18C\uBD84\uB958" },
          { column: "K", name: "\uD488\uBAA9\uBA85", required: true, description: "\uAD6C\uCCB4\uC801\uC778 \uD488\uBAA9 \uC774\uB984" },
          { column: "L", name: "\uADDC\uACA9", required: false, description: "\uD488\uBAA9 \uADDC\uACA9/\uC0AC\uC591" },
          { column: "M", name: "\uC218\uB7C9", required: true, description: "\uC8FC\uBB38 \uC218\uB7C9" },
          { column: "N", name: "\uB2E8\uAC00", required: true, description: "\uD488\uBAA9 \uB2E8\uAC00" },
          { column: "O", name: "\uCD1D\uAE08\uC561", required: true, description: "\uC218\uB7C9 \xD7 \uB2E8\uAC00 = \uCD1D \uAE08\uC561" },
          { column: "P", name: "\uBE44\uACE0", required: false, description: "\uCD94\uAC00 \uC124\uBA85/\uBA54\uBAA8" }
        ],
        sheets: ["Input", "\uAC11\uC9C0", "\uC744\uC9C0"],
        rules: [
          "\uD544\uC218 \uCEEC\uB7FC \uB204\uB77D \uC2DC \uAC80\uC99D \uC624\uB958 \uBC1C\uC0DD",
          "\uCD1D\uAE08\uC561(O\uC5F4) = \uC218\uB7C9(M\uC5F4) \xD7 \uB2E8\uAC00(N\uC5F4) \uC790\uB3D9 \uACC4\uC0B0 \uAC80\uC99D",
          "\uAC70\uB798\uCC98\uBA85\uC774 \uC788\uC73C\uBA74 \uB0A9\uD488\uCC98\uBA85\uC5D0 \uC790\uB3D9 \uBCF5\uC0AC",
          '\uD504\uB85C\uC81D\uD2B8\uBA85\uC774 \uC5C6\uC73C\uBA74 \uAE30\uBCF8\uAC12 "\uD504\uB85C\uC81D\uD2B8\uBA85" \uC124\uC815'
        ]
      }
    };
    res.json(templateInfo);
  } catch (error) {
    console.error("\uD15C\uD50C\uB9BF \uC815\uBCF4 \uC870\uD68C \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      error: "\uD15C\uD50C\uB9BF \uC815\uBCF4 \uC870\uD68C \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."
    });
  }
});
var excel_template_default = router14;

// server/routes/orders-optimized.ts
import { Router as Router14 } from "express";

// server/utils/optimized-orders-query.ts
init_db();
init_schema();
import { eq as eq19, desc as desc7, asc as asc3, ilike as ilike3, and as and10, or as or3, between as between2, count as count3, sql as sql10, gte as gte5, lte as lte5 } from "drizzle-orm";
var OptimizedOrdersService = class _OptimizedOrdersService {
  /**
   * 정렬 필드에 따른 ORDER BY 절 생성
   */
  static getOrderByClause(sortBy, sortOrder = "desc") {
    const getSortField = (field) => {
      switch (field) {
        case "orderNumber":
          return purchaseOrders.orderNumber;
        case "status":
          return purchaseOrders.status;
        case "orderStatus":
          return purchaseOrders.orderStatus;
        case "approvalStatus":
          return purchaseOrders.approvalStatus;
        case "vendorName":
          return vendors.name;
        case "projectName":
          return projects.projectName;
        case "userName":
          return users.name;
        case "orderDate":
          return purchaseOrders.orderDate;
        case "createdAt":
          return purchaseOrders.createdAt;
        case "totalAmount":
          return purchaseOrders.totalAmount;
        default:
          return purchaseOrders.createdAt;
      }
    };
    const sortField = getSortField(sortBy || "createdAt");
    return sortOrder === "asc" ? asc3(sortField) : desc7(sortField);
  }
  /**
   * High-performance order listing with metadata
   * Single query with optimized joins and proper pagination
   */
  static async getOrdersWithMetadata(filters = {}) {
    const {
      userId,
      status,
      orderStatus,
      approvalStatus,
      vendorId,
      projectId,
      startDate,
      endDate,
      minAmount,
      maxAmount,
      searchText,
      page = 1,
      limit = 20,
      sortBy,
      sortOrder = "desc"
    } = filters;
    const whereConditions = [];
    if (userId && userId !== "all") {
      whereConditions.push(eq19(purchaseOrders.userId, userId));
    }
    if (status && status !== "all" && status !== "") {
      whereConditions.push(sql10`${purchaseOrders.status} = ${status}`);
    }
    if (orderStatus && orderStatus !== "all" && orderStatus !== "") {
      whereConditions.push(sql10`${purchaseOrders.orderStatus} = ${orderStatus}`);
    }
    if (approvalStatus && approvalStatus !== "all" && approvalStatus !== "") {
      whereConditions.push(sql10`${purchaseOrders.approvalStatus} = ${approvalStatus}`);
    }
    if (vendorId && vendorId !== "all") {
      whereConditions.push(eq19(purchaseOrders.vendorId, vendorId));
    }
    if (projectId && projectId !== "all") {
      whereConditions.push(eq19(purchaseOrders.projectId, projectId));
    }
    if (startDate && endDate) {
      whereConditions.push(between2(purchaseOrders.orderDate, startDate, endDate));
    }
    if (minAmount) {
      whereConditions.push(gte5(purchaseOrders.totalAmount, minAmount));
    }
    if (maxAmount) {
      whereConditions.push(lte5(purchaseOrders.totalAmount, maxAmount));
    }
    if (searchText && searchText.trim()) {
      const trimmedSearchText = searchText.trim();
      const searchPattern = `%${trimmedSearchText.toLowerCase()}%`;
      const itemSearchSubquery = db.select({ orderId: purchaseOrderItems.orderId }).from(purchaseOrderItems).where(ilike3(purchaseOrderItems.itemName, searchPattern));
      whereConditions.push(
        or3(
          ilike3(purchaseOrders.orderNumber, searchPattern),
          ilike3(vendors.name, searchPattern),
          ilike3(projects.projectName, searchPattern),
          ilike3(users.name, searchPattern),
          // 품목명으로 검색: 해당 품목을 포함하는 발주서 조회
          sql10`${purchaseOrders.id} IN (SELECT "order_id" FROM ${purchaseOrderItems} WHERE LOWER("item_name") LIKE ${searchPattern.toLowerCase()})`
        )
      );
    }
    const whereClause = whereConditions.length > 0 ? and10(...whereConditions) : void 0;
    const ordersQuery = db.select({
      // Order fields
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      status: purchaseOrders.status,
      orderStatus: purchaseOrders.orderStatus,
      approvalStatus: purchaseOrders.approvalStatus,
      totalAmount: purchaseOrders.totalAmount,
      orderDate: purchaseOrders.orderDate,
      deliveryDate: purchaseOrders.deliveryDate,
      userId: purchaseOrders.userId,
      vendorId: purchaseOrders.vendorId,
      projectId: purchaseOrders.projectId,
      approvalLevel: purchaseOrders.approvalLevel,
      currentApproverRole: purchaseOrders.currentApproverRole,
      createdAt: purchaseOrders.createdAt,
      // Joined fields
      vendorName: vendors.name,
      projectName: projects.projectName,
      userName: users.name,
      // PDF attachment status - use correct column names (database uses snake_case)
      hasPdf: sql10`EXISTS(SELECT 1 FROM attachments WHERE attachments.order_id = ${purchaseOrders.id} AND attachments.mime_type = 'application/pdf')`,
      // Email statistics from email_send_history
      totalEmailsSent: sql10`COALESCE((SELECT COUNT(*) FROM ${emailSendHistory} WHERE ${emailSendHistory.orderId} = ${purchaseOrders.id}), 0)`,
      emailStatus: sql10`(SELECT ${emailSendHistory.status} FROM ${emailSendHistory} WHERE ${emailSendHistory.orderId} = ${purchaseOrders.id} ORDER BY ${emailSendHistory.sentAt} DESC LIMIT 1)`,
      emailSentAt: sql10`(SELECT ${emailSendHistory.sentAt} FROM ${emailSendHistory} WHERE ${emailSendHistory.orderId} = ${purchaseOrders.id} ORDER BY ${emailSendHistory.sentAt} DESC LIMIT 1)`
    }).from(purchaseOrders).leftJoin(vendors, eq19(purchaseOrders.vendorId, vendors.id)).leftJoin(projects, eq19(purchaseOrders.projectId, projects.id)).leftJoin(users, eq19(purchaseOrders.userId, users.id)).where(whereClause).orderBy(_OptimizedOrdersService.getOrderByClause(sortBy, sortOrder)).limit(limit).offset((page - 1) * limit);
    const countQuery = db.select({ count: count3() }).from(purchaseOrders).leftJoin(vendors, eq19(purchaseOrders.vendorId, vendors.id)).leftJoin(projects, eq19(purchaseOrders.projectId, projects.id)).leftJoin(users, eq19(purchaseOrders.userId, users.id)).where(whereClause);
    const [orders, [{ count: totalCount }]] = await Promise.all([
      ordersQuery,
      countQuery
    ]);
    const processedOrders = orders.map((order) => {
      const finalOrderStatus = order.orderStatus || "draft";
      const finalApprovalStatus = order.approvalStatus || "not_required";
      return {
        ...order,
        orderStatus: finalOrderStatus,
        approvalStatus: finalApprovalStatus
      };
    });
    return {
      orders: processedOrders,
      total: totalCount,
      page,
      limit,
      totalPages: Math.ceil(totalCount / limit)
    };
  }
  /**
   * Get order metadata (vendors, projects, users) for filters
   * Cached and optimized for dropdown population
   */
  static async getOrderMetadata() {
    const [vendorsList, projectsList, usersList] = await Promise.all([
      // Only active vendors with recent orders
      db.select({
        id: vendors.id,
        name: vendors.name
      }).from(vendors).where(eq19(vendors.isActive, true)).orderBy(asc3(vendors.name)),
      // Only active projects
      db.select({
        id: projects.id,
        projectName: projects.projectName,
        projectCode: projects.projectCode
      }).from(projects).where(eq19(projects.isActive, true)).orderBy(asc3(projects.projectName)),
      // Only active users
      db.select({
        id: users.id,
        name: users.name,
        email: users.email
      }).from(users).where(eq19(users.isActive, true)).orderBy(asc3(users.name))
    ]);
    return {
      vendors: vendorsList,
      projects: projectsList,
      users: usersList
    };
  }
  /**
   * Get orders with email status in a single optimized query
   * Now fetches actual email status from email_send_history table
   */
  static async getOrdersWithEmailStatus(filters = {}) {
    return await this.getOrdersWithMetadata(filters);
  }
  /**
   * Batch operation for updating multiple order statuses
   * Reduces multiple API calls for bulk operations
   */
  static async batchUpdateOrderStatus(orderIds, status, userId) {
    const result = await db.update(purchaseOrders).set({
      status,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(sql10`${purchaseOrders.id} = ANY(${orderIds})`).returning();
    return result;
  }
  /**
   * Get order statistics for dashboard
   * Uses materialized view for better performance
   */
  static async getOrderStatistics(userId) {
    const whereClause = userId ? eq19(purchaseOrders.userId, userId) : void 0;
    const stats = await db.select({
      status: purchaseOrders.status,
      count: count3(),
      totalAmount: sql10`COALESCE(SUM(${purchaseOrders.totalAmount}), 0)`,
      avgAmount: sql10`COALESCE(AVG(${purchaseOrders.totalAmount}), 0)`
    }).from(purchaseOrders).where(whereClause).groupBy(purchaseOrders.status);
    return stats;
  }
};
var QueryPerformanceMonitor = class {
  static {
    this.queryTimes = /* @__PURE__ */ new Map();
  }
  static startTimer(queryName) {
    const start = performance.now();
    return () => {
      const end = performance.now();
      const duration = end - start;
      if (!this.queryTimes.has(queryName)) {
        this.queryTimes.set(queryName, []);
      }
      this.queryTimes.get(queryName).push(duration);
      if (duration > 500) {
        console.warn(`\u{1F40C} Slow query detected: ${queryName} took ${duration.toFixed(2)}ms`);
      }
    };
  }
  static getStats() {
    const stats = {};
    for (const [queryName, times] of this.queryTimes.entries()) {
      const avg = times.reduce((a, b) => a + b, 0) / times.length;
      const min = Math.min(...times);
      const max = Math.max(...times);
      stats[queryName] = { avg, min, max, count: times.length };
    }
    return stats;
  }
};

// server/routes/orders-optimized.ts
init_db();
import { z as z5 } from "zod";
var router15 = Router14();
router15.get("/orders-optimized-test", async (req, res) => {
  try {
    console.log("\u{1F50D} Testing DB connection...");
    if (!db) {
      throw new Error("Database connection not available");
    }
    const result = await db.execute({ sql: "SELECT 1 as test", args: [] });
    console.log("\u2705 DB test successful:", result);
    res.json({
      status: "ok",
      message: "Database connection working",
      test: result
    });
  } catch (error) {
    console.error("\u274C DB test failed:", error);
    res.status(500).json({
      status: "error",
      message: "Database connection failed",
      error: error.message,
      stack: error.stack
    });
  }
});
var OrderFiltersSchema = z5.object({
  page: z5.string().optional().transform((val) => val ? parseInt(val) : 1),
  limit: z5.string().optional().transform((val) => val ? parseInt(val) : 20),
  status: z5.string().optional(),
  // Legacy field for backward compatibility
  orderStatus: z5.string().optional(),
  // New order status field
  approvalStatus: z5.string().optional(),
  // New approval status field
  projectId: z5.string().optional().transform((val) => val && val !== "all" ? parseInt(val) : void 0),
  vendorId: z5.string().optional().transform((val) => val && val !== "all" ? parseInt(val) : void 0),
  userId: z5.string().optional(),
  startDate: z5.string().optional().transform((val) => val ? new Date(val) : void 0),
  endDate: z5.string().optional().transform((val) => val ? new Date(val) : void 0),
  minAmount: z5.string().optional().transform((val) => val ? parseFloat(val) : void 0),
  maxAmount: z5.string().optional().transform((val) => val ? parseFloat(val) : void 0),
  searchText: z5.string().optional(),
  sortBy: z5.string().optional(),
  sortOrder: z5.enum(["asc", "desc"]).optional().default("desc")
});
router15.get("/orders-optimized", async (req, res) => {
  const endTimer = QueryPerformanceMonitor.startTimer("orders-optimized");
  try {
    console.log("\u{1F680} Optimized orders request:", {
      filters: req.query,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    });
    const parsedFilters = OrderFiltersSchema.parse(req.query);
    const result = await OptimizedOrdersService.getOrdersWithMetadata(parsedFilters);
    console.log("\u2705 Optimized orders response:", {
      ordersCount: result.orders.length,
      total: result.total,
      page: result.page,
      totalPages: result.totalPages,
      vendorsCount: result.metadata?.vendors?.length || 0,
      projectsCount: result.metadata?.projects?.length || 0
    });
    res.json(result);
  } catch (error) {
    console.error("\u274C Error in orders-optimized:", error);
    res.status(500).json({
      message: "Failed to fetch orders",
      error: error.message,
      stack: error.stack
    });
  } finally {
    endTimer();
  }
});
router15.get("/orders-metadata", async (req, res) => {
  const endTimer = QueryPerformanceMonitor.startTimer("orders-metadata");
  try {
    const metadata = await OptimizedOrdersService.getOrderMetadata();
    res.json({
      ...metadata,
      cached: false,
      // TODO: Implement caching
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    });
  } catch (error) {
    console.error("\u274C Error fetching orders metadata:", error);
    res.status(500).json({ message: "Failed to fetch metadata" });
  } finally {
    endTimer();
  }
});
router15.get("/orders-stats", async (req, res) => {
  const endTimer = QueryPerformanceMonitor.startTimer("orders-stats");
  try {
    const { userId } = req.query;
    const stats = await OptimizedOrdersService.getOrderStatistics(userId);
    res.json({
      stats,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    });
  } catch (error) {
    console.error("\u274C Error fetching order statistics:", error);
    res.status(500).json({ message: "Failed to fetch statistics" });
  } finally {
    endTimer();
  }
});
router15.put("/orders-bulk-status", async (req, res) => {
  const endTimer = QueryPerformanceMonitor.startTimer("orders-bulk-status");
  try {
    const { orderIds, status } = req.body;
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    if (!Array.isArray(orderIds) || orderIds.length === 0) {
      return res.status(400).json({ message: "Invalid order IDs" });
    }
    if (!status) {
      return res.status(400).json({ message: "Status is required" });
    }
    const result = await OptimizedOrdersService.batchUpdateOrderStatus(
      orderIds,
      status,
      userId
    );
    res.json({
      message: `Updated ${result.length} orders`,
      updatedOrders: result,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    });
  } catch (error) {
    console.error("\u274C Error in bulk status update:", error);
    res.status(500).json({ message: "Failed to update orders" });
  } finally {
    endTimer();
  }
});
router15.get("/query-performance", async (req, res) => {
  if (process.env.NODE_ENV !== "development") {
    return res.status(404).json({ message: "Not found" });
  }
  const stats = QueryPerformanceMonitor.getStats();
  res.json({
    queryStats: stats,
    recommendations: generatePerformanceRecommendations(stats),
    timestamp: (/* @__PURE__ */ new Date()).toISOString()
  });
});
function generatePerformanceRecommendations(stats) {
  const recommendations = [];
  for (const [queryName, data] of Object.entries(stats)) {
    if (data.avg > 500) {
      recommendations.push({
        query: queryName,
        issue: "Slow average response time",
        avgTime: `${data.avg.toFixed(2)}ms`,
        recommendation: "Consider adding database indexes or optimizing query"
      });
    }
    if (data.max > 2e3) {
      recommendations.push({
        query: queryName,
        issue: "Very slow maximum response time",
        maxTime: `${data.max.toFixed(2)}ms`,
        recommendation: "Investigate query execution plan and add appropriate indexes"
      });
    }
  }
  return recommendations;
}
var orders_optimized_default = router15;

// server/routes/order-statuses.ts
import { Router as Router15 } from "express";
var router16 = Router15();
router16.get("/order-statuses", async (req, res) => {
  try {
    console.log("\u{1F4CA} Fetching order statuses (using reliable mock data)...");
    const mockOrderStatuses = [
      { id: "draft", name: "\uCD08\uC548", description: "\uC791\uC131 \uC911\uC778 \uC0C1\uD0DC", color: "#9CA3AF", order: 1 },
      { id: "pending", name: "\uC2B9\uC778\uB300\uAE30", description: "\uC2B9\uC778 \uB300\uAE30 \uC911", color: "#F59E0B", order: 2 },
      { id: "approved", name: "\uC2B9\uC778\uC644\uB8CC", description: "\uC2B9\uC778\uC774 \uC644\uB8CC\uB41C \uC0C1\uD0DC", color: "#10B981", order: 3 },
      { id: "rejected", name: "\uBC18\uB824", description: "\uC2B9\uC778\uC774 \uAC70\uBD80\uB41C \uC0C1\uD0DC", color: "#EF4444", order: 4 },
      { id: "sent", name: "\uBC1C\uC1A1\uC644\uB8CC", description: "\uAC70\uB798\uCC98\uC5D0 \uBC1C\uC1A1 \uC644\uB8CC", color: "#3B82F6", order: 5 },
      { id: "confirmed", name: "\uC218\uC8FC\uD655\uC778", description: "\uAC70\uB798\uCC98\uC5D0\uC11C \uD655\uC778 \uC644\uB8CC", color: "#8B5CF6", order: 6 },
      { id: "in_progress", name: "\uC9C4\uD589\uC911", description: "\uC791\uC5C5\uC774 \uC9C4\uD589 \uC911", color: "#F97316", order: 7 },
      { id: "completed", name: "\uC644\uB8CC", description: "\uBAA8\uB4E0 \uC791\uC5C5\uC774 \uC644\uB8CC\uB41C \uC0C1\uD0DC", color: "#059669", order: 8 },
      { id: "cancelled", name: "\uCDE8\uC18C", description: "\uCDE8\uC18C\uB41C \uBC1C\uC8FC", color: "#6B7280", order: 9 }
    ];
    console.log(`\u2705 Successfully returning ${mockOrderStatuses.length} order statuses (mock data)`);
    res.json(mockOrderStatuses);
  } catch (error) {
    console.error("\u274C Error in order-statuses endpoint:", error);
    res.status(500).json({
      message: "Failed to fetch order statuses",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
var order_statuses_default = router16;

// server/routes/invoices.ts
init_db();
init_schema();
import { Router as Router16 } from "express";
import { eq as eq20, desc as desc8 } from "drizzle-orm";
import multer5 from "multer";
import path14 from "path";
import fs17 from "fs";
var router17 = Router16();
var storage4 = multer5.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir2 = process.env.VERCEL ? "/tmp" : "uploads/invoices";
    if (!process.env.VERCEL && !fs17.existsSync(uploadDir2)) {
      fs17.mkdirSync(uploadDir2, { recursive: true });
    }
    cb(null, uploadDir2);
  },
  filename: (req, file, cb) => {
    const timestamp2 = Date.now();
    const ext = path14.extname(file.originalname);
    const name = path14.basename(file.originalname, ext);
    cb(null, `${name}_${timestamp2}${ext}`);
  }
});
var upload5 = multer5({
  storage: storage4,
  limits: {
    fileSize: 10 * 1024 * 1024
    // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = [
      "application/pdf",
      "image/jpeg",
      "image/png",
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      "application/vnd.ms-excel"
    ];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error("Invalid file type. Only PDF, images, and Excel files are allowed."));
    }
  }
});
router17.get("/invoices", async (req, res) => {
  try {
    const { orderId } = req.query;
    console.log(`\u{1F4B0} Fetching invoices${orderId ? ` for order ${orderId}` : ""} from database...`);
    let query = db.select({
      id: invoices.id,
      orderId: invoices.orderId,
      invoiceNumber: invoices.invoiceNumber,
      invoiceType: invoices.invoiceType,
      issueDate: invoices.issueDate,
      dueDate: invoices.dueDate,
      totalAmount: invoices.totalAmount,
      vatAmount: invoices.vatAmount,
      status: invoices.status,
      filePath: invoices.filePath,
      uploadedBy: invoices.uploadedBy,
      verifiedBy: invoices.verifiedBy,
      verifiedAt: invoices.verifiedAt,
      taxInvoiceIssued: invoices.taxInvoiceIssued,
      taxInvoiceIssuedDate: invoices.taxInvoiceIssuedDate,
      notes: invoices.notes,
      createdAt: invoices.createdAt,
      updatedAt: invoices.updatedAt
    }).from(invoices);
    if (orderId) {
      query = query.where(eq20(invoices.orderId, parseInt(orderId)));
    }
    const invoiceList = await query.orderBy(desc8(invoices.createdAt));
    console.log(`\u2705 Successfully fetched ${invoiceList.length} invoices from database`);
    res.json(invoiceList);
  } catch (error) {
    console.error("\u274C Error fetching invoices:", error);
    res.status(500).json({
      message: "Failed to fetch invoices",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router17.get("/invoices/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    console.log(`\u{1F4B0} Fetching invoice ${id} from database...`);
    const [invoice] = await db.select({
      id: invoices.id,
      orderId: invoices.orderId,
      invoiceNumber: invoices.invoiceNumber,
      invoiceType: invoices.invoiceType,
      issueDate: invoices.issueDate,
      dueDate: invoices.dueDate,
      totalAmount: invoices.totalAmount,
      vatAmount: invoices.vatAmount,
      status: invoices.status,
      filePath: invoices.filePath,
      uploadedBy: invoices.uploadedBy,
      verifiedBy: invoices.verifiedBy,
      verifiedAt: invoices.verifiedAt,
      taxInvoiceIssued: invoices.taxInvoiceIssued,
      taxInvoiceIssuedDate: invoices.taxInvoiceIssuedDate,
      taxInvoiceIssuedBy: invoices.taxInvoiceIssuedBy,
      notes: invoices.notes,
      createdAt: invoices.createdAt,
      updatedAt: invoices.updatedAt,
      // Join with users for uploader name
      uploaderName: users.name
    }).from(invoices).leftJoin(users, eq20(invoices.uploadedBy, users.id)).where(eq20(invoices.id, id)).limit(1);
    if (!invoice) {
      return res.status(404).json({ message: "Invoice not found" });
    }
    console.log(`\u2705 Successfully fetched invoice ${id}`);
    res.json(invoice);
  } catch (error) {
    console.error("\u274C Error fetching invoice by ID:", error);
    res.status(500).json({
      message: "Failed to fetch invoice",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router17.post("/invoices", upload5.single("file"), async (req, res) => {
  try {
    console.log("\u{1F4B0} Creating new invoice...");
    console.log("Request body:", req.body);
    console.log("Uploaded file:", req.file);
    const {
      orderId,
      invoiceNumber,
      invoiceType,
      issueDate,
      dueDate,
      totalAmount,
      vatAmount,
      notes
    } = req.body;
    const userId = req.user?.id || "test_admin_001";
    if (!orderId || !invoiceNumber || !totalAmount) {
      return res.status(400).json({
        message: "Missing required fields: orderId, invoiceNumber, totalAmount"
      });
    }
    let fileData;
    let filePath;
    if (req.file) {
      filePath = req.file.path;
      if (process.env.VERCEL) {
        const fileBuffer = fs17.readFileSync(req.file.path);
        fileData = fileBuffer.toString("base64");
        console.log(`\u{1F4CE} File data encoded for Vercel: ${Math.round(fileBuffer.length / 1024)}KB`);
      }
    }
    const [newInvoice] = await db.insert(invoices).values({
      orderId: parseInt(orderId),
      invoiceNumber,
      invoiceType: invoiceType || "invoice",
      invoiceDate: new Date(issueDate),
      // Use actual DB column name
      invoiceAmount: parseFloat(totalAmount),
      // Use actual DB column name
      dueDate: dueDate ? new Date(dueDate) : null,
      totalAmount: parseFloat(totalAmount),
      vatAmount: vatAmount ? parseFloat(vatAmount) : 0,
      status: "pending",
      filePath: process.env.VERCEL ? req.file?.filename : filePath,
      uploadedBy: userId,
      notes: notes || null
    }).returning();
    const [invoice] = await db.select({
      id: invoices.id,
      orderId: invoices.orderId,
      invoiceNumber: invoices.invoiceNumber,
      invoiceType: invoices.invoiceType,
      issueDate: invoices.issueDate,
      dueDate: invoices.dueDate,
      totalAmount: invoices.totalAmount,
      vatAmount: invoices.vatAmount,
      status: invoices.status,
      filePath: invoices.filePath,
      uploadedBy: invoices.uploadedBy,
      verifiedBy: invoices.verifiedBy,
      verifiedAt: invoices.verifiedAt,
      taxInvoiceIssued: invoices.taxInvoiceIssued,
      taxInvoiceIssuedDate: invoices.taxInvoiceIssuedDate,
      notes: invoices.notes,
      createdAt: invoices.createdAt,
      updatedAt: invoices.updatedAt,
      // Join with users for uploader name
      uploaderName: users.name
    }).from(invoices).leftJoin(users, eq20(invoices.uploadedBy, users.id)).where(eq20(invoices.id, newInvoice.id));
    console.log(`\u2705 Successfully created invoice ${newInvoice.id}`);
    res.status(201).json(invoice);
  } catch (error) {
    console.error("\u274C Error creating invoice:", error);
    res.status(500).json({
      message: "Failed to create invoice",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router17.post("/invoices/:id/verify", requireAuth, async (req, res) => {
  try {
    const invoiceId = parseInt(req.params.id, 10);
    const userId = req.user?.id || "test_admin_001";
    console.log(`\u{1F4B0} Verifying invoice ${invoiceId}...`);
    const [updatedInvoice] = await db.update(invoices).set({
      status: "verified",
      verifiedBy: userId,
      verifiedAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq20(invoices.id, invoiceId)).returning();
    if (!updatedInvoice) {
      return res.status(404).json({ message: "Invoice not found" });
    }
    console.log(`\u2705 Successfully verified invoice ${invoiceId}`);
    res.json({ message: "Invoice verified successfully", invoice: updatedInvoice });
  } catch (error) {
    console.error("\u274C Error verifying invoice:", error);
    res.status(500).json({
      message: "Failed to verify invoice",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router17.post("/invoices/:id/issue-tax", requireAuth, async (req, res) => {
  try {
    const invoiceId = parseInt(req.params.id, 10);
    const userId = req.user?.id || "test_admin_001";
    console.log(`\u{1F4B0} Issuing tax invoice for ${invoiceId}...`);
    const [updatedInvoice] = await db.update(invoices).set({
      taxInvoiceIssued: true,
      taxInvoiceIssuedDate: /* @__PURE__ */ new Date(),
      taxInvoiceIssuedBy: userId,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq20(invoices.id, invoiceId)).returning();
    if (!updatedInvoice) {
      return res.status(404).json({ message: "Invoice not found" });
    }
    console.log(`\u2705 Successfully issued tax invoice for ${invoiceId}`);
    res.json({ message: "Tax invoice issued successfully", invoice: updatedInvoice });
  } catch (error) {
    console.error("\u274C Error issuing tax invoice:", error);
    res.status(500).json({
      message: "Failed to issue tax invoice",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router17.patch("/invoices/:id", requireAuth, async (req, res) => {
  try {
    const invoiceId = parseInt(req.params.id, 10);
    console.log(`\u{1F4B0} Updating invoice ${invoiceId}...`);
    const {
      invoiceNumber,
      invoiceType,
      issueDate,
      dueDate,
      totalAmount,
      vatAmount,
      status,
      notes
    } = req.body;
    const updateData = {};
    if (invoiceNumber !== void 0) updateData.invoiceNumber = invoiceNumber;
    if (invoiceType !== void 0) updateData.invoiceType = invoiceType;
    if (issueDate !== void 0) updateData.issueDate = new Date(issueDate);
    if (dueDate !== void 0) updateData.dueDate = dueDate ? new Date(dueDate) : null;
    if (totalAmount !== void 0) updateData.totalAmount = parseFloat(totalAmount);
    if (vatAmount !== void 0) updateData.vatAmount = parseFloat(vatAmount);
    if (status !== void 0) updateData.status = status;
    if (notes !== void 0) updateData.notes = notes;
    updateData.updatedAt = /* @__PURE__ */ new Date();
    const [updatedInvoice] = await db.update(invoices).set(updateData).where(eq20(invoices.id, invoiceId)).returning();
    if (!updatedInvoice) {
      return res.status(404).json({ message: "Invoice not found" });
    }
    console.log(`\u2705 Successfully updated invoice ${invoiceId}`);
    res.json(updatedInvoice);
  } catch (error) {
    console.error("\u274C Error updating invoice:", error);
    res.status(500).json({
      message: "Failed to update invoice",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router17.delete("/invoices/:id", requireAuth, async (req, res) => {
  try {
    const invoiceId = parseInt(req.params.id, 10);
    console.log(`\u{1F4B0} Deleting invoice ${invoiceId}...`);
    const [invoice] = await db.select().from(invoices).where(eq20(invoices.id, invoiceId)).limit(1);
    if (!invoice) {
      return res.status(404).json({ message: "Invoice not found" });
    }
    await db.delete(invoices).where(eq20(invoices.id, invoiceId));
    if (invoice.filePath && !process.env.VERCEL) {
      try {
        if (fs17.existsSync(invoice.filePath)) {
          fs17.unlinkSync(invoice.filePath);
          console.log(`\u{1F5D1}\uFE0F Deleted invoice file: ${invoice.filePath}`);
        }
      } catch (fileError) {
        console.warn(`\u26A0\uFE0F Failed to delete invoice file: ${fileError}`);
      }
    }
    console.log(`\u2705 Successfully deleted invoice ${invoiceId}`);
    res.json({ message: "Invoice deleted successfully", id: invoiceId });
  } catch (error) {
    console.error("\u274C Error deleting invoice:", error);
    res.status(500).json({
      message: "Failed to delete invoice",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
var invoices_default = router17;

// server/routes/verification-logs.ts
import { Router as Router17 } from "express";
var router18 = Router17();
router18.get("/verification-logs", async (req, res) => {
  try {
    const { orderId } = req.query;
    console.log(`\u{1F50D} Fetching verification logs for order ${orderId} (using reliable mock data)...`);
    const mockVerificationLogs = orderId ? [
      {
        id: 1,
        orderId: parseInt(orderId),
        verificationDate: "2025-01-15T10:30:00Z",
        verifiedBy: "\uAE40\uCCA0\uC218",
        verificationResult: "approved",
        comments: "\uBAA8\uB4E0 \uD56D\uBAA9\uC774 \uC0AC\uC591\uC5D0 \uB9DE\uAC8C \uACF5\uAE09\uB418\uC5C8\uC2B5\uB2C8\uB2E4.",
        attachments: [],
        createdAt: (/* @__PURE__ */ new Date()).toISOString()
      },
      {
        id: 2,
        orderId: parseInt(orderId),
        verificationDate: "2025-01-20T14:15:00Z",
        verifiedBy: "\uC774\uC601\uD76C",
        verificationResult: "partial",
        comments: "\uC77C\uBD80 \uC790\uC7AC\uC758 \uD488\uC9C8 \uD655\uC778\uC774 \uD544\uC694\uD569\uB2C8\uB2E4.",
        attachments: ["quality_report_001.pdf"],
        createdAt: (/* @__PURE__ */ new Date()).toISOString()
      }
    ] : [];
    console.log(`\u2705 Successfully returning ${mockVerificationLogs.length} verification logs (mock data)`);
    res.json(mockVerificationLogs);
  } catch (error) {
    console.error("\u274C Error in verification-logs endpoint:", error);
    res.status(500).json({
      message: "Failed to fetch verification logs",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router18.post("/verification-logs", async (req, res) => {
  try {
    console.log("\u{1F50D} Creating verification log (using reliable mock data)...");
    const { orderId, verificationResult, comments } = req.body;
    const mockVerificationLog = {
      id: Math.floor(Math.random() * 1e3) + 1,
      orderId: parseInt(orderId),
      verificationDate: (/* @__PURE__ */ new Date()).toISOString(),
      verifiedBy: "\uD604\uC7AC\uC0AC\uC6A9\uC790",
      // In real app, get from auth
      verificationResult,
      comments: comments || "",
      attachments: [],
      createdAt: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u2705 Successfully created verification log ${mockVerificationLog.id} (mock data)`);
    res.status(201).json(mockVerificationLog);
  } catch (error) {
    console.error("\u274C Error creating verification log:", error);
    res.status(500).json({
      message: "Failed to create verification log",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
var verification_logs_default = router18;

// server/routes/item-receipts.ts
init_db();
init_schema();
import { Router as Router18 } from "express";
import { eq as eq21, desc as desc9 } from "drizzle-orm";
var router19 = Router18();
router19.get("/item-receipts", async (_req, res) => {
  try {
    console.log("\u{1F4E6} Fetching all item receipts from database...");
    const receipts = await db.select({
      id: itemReceipts.id,
      orderItemId: itemReceipts.orderItemId,
      invoiceId: itemReceipts.invoiceId,
      receivedQuantity: itemReceipts.receivedQuantity,
      receivedDate: itemReceipts.receivedDate,
      qualityCheck: itemReceipts.qualityCheck,
      qualityNotes: itemReceipts.qualityNotes,
      verifiedBy: itemReceipts.verifiedBy,
      status: itemReceipts.status,
      notes: itemReceipts.notes,
      createdAt: itemReceipts.createdAt,
      updatedAt: itemReceipts.updatedAt,
      // Join with order items for item details
      itemName: purchaseOrderItems.itemName,
      unit: purchaseOrderItems.unit,
      orderId: purchaseOrderItems.orderId,
      // Join with users for verifier name
      verifierName: users.name
    }).from(itemReceipts).leftJoin(purchaseOrderItems, eq21(itemReceipts.orderItemId, purchaseOrderItems.id)).leftJoin(users, eq21(itemReceipts.verifiedBy, users.id)).orderBy(desc9(itemReceipts.createdAt));
    console.log(`\u2705 Successfully fetched ${receipts.length} item receipts from database`);
    res.json(receipts);
  } catch (error) {
    console.error("\u274C Error fetching item receipts:", error);
    res.status(500).json({
      message: "Failed to fetch item receipts",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router19.get("/item-receipts/order/:orderId", async (req, res) => {
  try {
    const orderId = parseInt(req.params.orderId, 10);
    console.log(`\u{1F4E6} Fetching item receipts for order ${orderId} from database...`);
    const receipts = await db.select({
      id: itemReceipts.id,
      orderItemId: itemReceipts.orderItemId,
      invoiceId: itemReceipts.invoiceId,
      receivedQuantity: itemReceipts.receivedQuantity,
      receivedDate: itemReceipts.receivedDate,
      qualityCheck: itemReceipts.qualityCheck,
      qualityNotes: itemReceipts.qualityNotes,
      verifiedBy: itemReceipts.verifiedBy,
      status: itemReceipts.status,
      notes: itemReceipts.notes,
      createdAt: itemReceipts.createdAt,
      updatedAt: itemReceipts.updatedAt,
      // Join with order items for item details
      itemName: purchaseOrderItems.itemName,
      unit: purchaseOrderItems.unit,
      orderId: purchaseOrderItems.orderId,
      // Join with users for verifier name
      verifierName: users.name
    }).from(itemReceipts).leftJoin(purchaseOrderItems, eq21(itemReceipts.orderItemId, purchaseOrderItems.id)).leftJoin(users, eq21(itemReceipts.verifiedBy, users.id)).where(eq21(purchaseOrderItems.orderId, orderId)).orderBy(desc9(itemReceipts.createdAt));
    console.log(`\u2705 Successfully fetched ${receipts.length} item receipts for order ${orderId}`);
    res.json(receipts);
  } catch (error) {
    console.error("\u274C Error fetching item receipts by order:", error);
    res.status(500).json({
      message: "Failed to fetch item receipts for order",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router19.post("/item-receipts", async (req, res) => {
  try {
    console.log("\u{1F4E6} Creating new item receipt...");
    console.log("Request body:", req.body);
    const {
      orderItemId,
      invoiceId,
      receivedQuantity,
      receivedDate,
      qualityCheck,
      qualityNotes,
      status,
      notes
    } = req.body;
    const userId = req.user?.id || "test_admin_001";
    if (!orderItemId || !receivedQuantity || !receivedDate) {
      return res.status(400).json({
        message: "Missing required fields: orderItemId, receivedQuantity, receivedDate"
      });
    }
    const [newReceipt] = await db.insert(itemReceipts).values({
      orderItemId: parseInt(orderItemId),
      invoiceId: invoiceId ? parseInt(invoiceId) : null,
      receivedQuantity: parseFloat(receivedQuantity),
      receivedDate: new Date(receivedDate),
      qualityCheck: qualityCheck || false,
      qualityNotes: qualityNotes || null,
      verifiedBy: userId,
      status: status || "pending",
      notes: notes || null
    }).returning();
    const [receipt] = await db.select({
      id: itemReceipts.id,
      orderItemId: itemReceipts.orderItemId,
      invoiceId: itemReceipts.invoiceId,
      receivedQuantity: itemReceipts.receivedQuantity,
      receivedDate: itemReceipts.receivedDate,
      qualityCheck: itemReceipts.qualityCheck,
      qualityNotes: itemReceipts.qualityNotes,
      verifiedBy: itemReceipts.verifiedBy,
      status: itemReceipts.status,
      notes: itemReceipts.notes,
      createdAt: itemReceipts.createdAt,
      updatedAt: itemReceipts.updatedAt,
      // Join with order items for item details
      itemName: purchaseOrderItems.itemName,
      unit: purchaseOrderItems.unit,
      orderId: purchaseOrderItems.orderId,
      // Join with users for verifier name
      verifierName: users.name
    }).from(itemReceipts).leftJoin(purchaseOrderItems, eq21(itemReceipts.orderItemId, purchaseOrderItems.id)).leftJoin(users, eq21(itemReceipts.verifiedBy, users.id)).where(eq21(itemReceipts.id, newReceipt.id));
    console.log(`\u2705 Successfully created item receipt ${newReceipt.id}`);
    res.status(201).json(receipt);
  } catch (error) {
    console.error("\u274C Error creating item receipt:", error);
    res.status(500).json({
      message: "Failed to create item receipt",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router19.patch("/item-receipts/:id", async (req, res) => {
  try {
    const receiptId = parseInt(req.params.id, 10);
    console.log(`\u{1F4E6} Updating item receipt ${receiptId}...`);
    const {
      receivedQuantity,
      receivedDate,
      qualityCheck,
      qualityNotes,
      status,
      notes
    } = req.body;
    const updateData = {};
    if (receivedQuantity !== void 0) updateData.receivedQuantity = parseFloat(receivedQuantity);
    if (receivedDate !== void 0) updateData.receivedDate = new Date(receivedDate);
    if (qualityCheck !== void 0) updateData.qualityCheck = qualityCheck;
    if (qualityNotes !== void 0) updateData.qualityNotes = qualityNotes;
    if (status !== void 0) updateData.status = status;
    if (notes !== void 0) updateData.notes = notes;
    updateData.updatedAt = /* @__PURE__ */ new Date();
    const [updatedReceipt] = await db.update(itemReceipts).set(updateData).where(eq21(itemReceipts.id, receiptId)).returning();
    if (!updatedReceipt) {
      return res.status(404).json({ message: "Item receipt not found" });
    }
    const [receipt] = await db.select({
      id: itemReceipts.id,
      orderItemId: itemReceipts.orderItemId,
      invoiceId: itemReceipts.invoiceId,
      receivedQuantity: itemReceipts.receivedQuantity,
      receivedDate: itemReceipts.receivedDate,
      qualityCheck: itemReceipts.qualityCheck,
      qualityNotes: itemReceipts.qualityNotes,
      verifiedBy: itemReceipts.verifiedBy,
      status: itemReceipts.status,
      notes: itemReceipts.notes,
      createdAt: itemReceipts.createdAt,
      updatedAt: itemReceipts.updatedAt,
      // Join with order items for item details
      itemName: purchaseOrderItems.itemName,
      unit: purchaseOrderItems.unit,
      orderId: purchaseOrderItems.orderId,
      // Join with users for verifier name
      verifierName: users.name
    }).from(itemReceipts).leftJoin(purchaseOrderItems, eq21(itemReceipts.orderItemId, purchaseOrderItems.id)).leftJoin(users, eq21(itemReceipts.verifiedBy, users.id)).where(eq21(itemReceipts.id, receiptId));
    console.log(`\u2705 Successfully updated item receipt ${receiptId}`);
    res.json(receipt);
  } catch (error) {
    console.error("\u274C Error updating item receipt:", error);
    res.status(500).json({
      message: "Failed to update item receipt",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router19.delete("/item-receipts/:id", async (req, res) => {
  try {
    const receiptId = parseInt(req.params.id, 10);
    console.log(`\u{1F4E6} Deleting item receipt ${receiptId}...`);
    const [deletedReceipt] = await db.delete(itemReceipts).where(eq21(itemReceipts.id, receiptId)).returning();
    if (!deletedReceipt) {
      return res.status(404).json({ message: "Item receipt not found" });
    }
    console.log(`\u2705 Successfully deleted item receipt ${receiptId}`);
    res.json({ message: "Item receipt deleted successfully", id: receiptId });
  } catch (error) {
    console.error("\u274C Error deleting item receipt:", error);
    res.status(500).json({
      message: "Failed to delete item receipt",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
var item_receipts_default = router19;

// server/routes/approvals.ts
import { Router as Router19 } from "express";
init_db();
init_schema();
import { eq as eq23, and as and12, desc as desc10, sql as sql12, inArray as inArray5 } from "drizzle-orm";

// server/services/notification-service.ts
init_db();
init_schema();
import { eq as eq22, and as and11, inArray as inArray4, sql as sql11 } from "drizzle-orm";
var NotificationService = class {
  /**
   * 승인 요청 시 알림 발송
   */
  static async sendApprovalRequestNotification(context) {
    try {
      const orderInfo = await this.getOrderInfo(context.orderId);
      if (!orderInfo) {
        console.error(`Order ${context.orderId} not found for notification`);
        return;
      }
      const approvers = await this.getEligibleApprovers(parseFloat(orderInfo.totalAmount || "0"));
      if (approvers.length === 0) {
        console.warn(`No eligible approvers found for order ${context.orderId}`);
        return;
      }
      const notifications2 = approvers.map((approver) => ({
        userId: approver.id,
        type: "approval_request",
        title: "\uC0C8\uB85C\uC6B4 \uC2B9\uC778 \uC694\uCCAD",
        message: `\uBC1C\uC8FC\uC11C #${orderInfo.orderNumber || context.orderId} (${orderInfo.totalAmount?.toLocaleString()}\uC6D0)\uC758 \uC2B9\uC778\uC744 \uC694\uCCAD\uD569\uB2C8\uB2E4.`,
        relatedId: context.orderId.toString(),
        relatedType: "purchase_order",
        priority: this.determinePriority(parseFloat(orderInfo.totalAmount || "0")),
        isRead: false,
        metadata: JSON.stringify({
          orderId: context.orderId,
          orderNumber: orderInfo.orderNumber,
          amount: orderInfo.totalAmount,
          projectName: orderInfo.projectName,
          vendorName: orderInfo.vendorName,
          requestedBy: orderInfo.requesterName
        })
      }));
      await db.insert(notifications2).values(notifications2);
      console.log(`\u2705 Sent approval request notifications to ${approvers.length} users for order ${context.orderId}`);
    } catch (error) {
      console.error("\u274C Error sending approval request notification:", error);
    }
  }
  /**
   * 승인 완료/거부 시 알림 발송
   */
  static async sendApprovalResultNotification(context) {
    try {
      const orderInfo = await this.getOrderInfo(context.orderId);
      if (!orderInfo) {
        console.error(`Order ${context.orderId} not found for notification`);
        return;
      }
      const recipients = await this.getOrderStakeholders(context.orderId);
      if (recipients.length === 0) {
        console.warn(`No stakeholders found for order ${context.orderId}`);
        return;
      }
      const isApproved = context.action === "approval_completed";
      const title = isApproved ? "\uBC1C\uC8FC\uC11C \uC2B9\uC778 \uC644\uB8CC" : "\uBC1C\uC8FC\uC11C \uC2B9\uC778 \uAC70\uBD80";
      const message = isApproved ? `\uBC1C\uC8FC\uC11C #${orderInfo.orderNumber || context.orderId}\uAC00 \uC2B9\uC778\uB418\uC5C8\uC2B5\uB2C8\uB2E4.` : `\uBC1C\uC8FC\uC11C #${orderInfo.orderNumber || context.orderId}\uAC00 \uAC70\uBD80\uB418\uC5C8\uC2B5\uB2C8\uB2E4. ${context.comments ? `\uC0AC\uC720: ${context.comments}` : ""}`;
      const notifications2 = recipients.map((recipient) => ({
        userId: recipient.id,
        type: isApproved ? "approval_approved" : "approval_rejected",
        title,
        message,
        relatedId: context.orderId.toString(),
        relatedType: "purchase_order",
        priority: isApproved ? "medium" : "high",
        isRead: false,
        metadata: JSON.stringify({
          orderId: context.orderId,
          orderNumber: orderInfo.orderNumber,
          amount: orderInfo.totalAmount,
          projectName: orderInfo.projectName,
          vendorName: orderInfo.vendorName,
          approvedBy: context.performedBy,
          comments: context.comments
        })
      }));
      await db.insert(notifications2).values(notifications2);
      console.log(`\u2705 Sent approval result notifications to ${recipients.length} users for order ${context.orderId}`);
    } catch (error) {
      console.error("\u274C Error sending approval result notification:", error);
    }
  }
  /**
   * 승인 권한이 있는 사용자들 조회
   */
  static async getEligibleApprovers(orderAmount) {
    const authorities = await db.select({
      role: approvalAuthorities.role,
      maxAmount: approvalAuthorities.maxAmount
    }).from(approvalAuthorities).where(
      and11(
        eq22(approvalAuthorities.isActive, true),
        sql11`CAST(${approvalAuthorities.maxAmount} AS DECIMAL) >= ${orderAmount}`
      )
    );
    if (authorities.length === 0) {
      return await db.select({
        id: users.id,
        name: users.name,
        role: users.role
      }).from(users).where(eq22(users.role, "admin")).limit(10);
    }
    const eligibleRoles = authorities.map((auth) => auth.role);
    return await db.select({
      id: users.id,
      name: users.name,
      role: users.role
    }).from(users).where(inArray4(users.role, eligibleRoles)).limit(20);
  }
  /**
   * 발주서 관련 정보 조회
   */
  static async getOrderInfo(orderId) {
    const result = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      totalAmount: purchaseOrders.totalAmount,
      userId: purchaseOrders.userId,
      projectId: purchaseOrders.projectId,
      vendorId: purchaseOrders.vendorId,
      projectName: projects.projectName,
      vendorName: vendors.name,
      requesterName: users.name
    }).from(purchaseOrders).leftJoin(projects, eq22(purchaseOrders.projectId, projects.id)).leftJoin(vendors, eq22(purchaseOrders.vendorId, vendors.id)).leftJoin(users, eq22(purchaseOrders.userId, users.id)).where(eq22(purchaseOrders.id, orderId)).limit(1);
    return result[0] || null;
  }
  /**
   * 발주서 관련 이해관계자들 조회
   */
  static async getOrderStakeholders(orderId) {
    const orderInfo = await this.getOrderInfo(orderId);
    if (!orderInfo) return [];
    const stakeholders = /* @__PURE__ */ new Set();
    if (orderInfo.userId) {
      stakeholders.add(orderInfo.userId);
    }
    if (orderInfo.projectId) {
      const projectMembers3 = await db.select({ userId: users.id }).from(users).where(eq22(users.role, "project_manager")).limit(5);
      projectMembers3.forEach((member) => stakeholders.add(member.userId));
    }
    if (stakeholders.size === 0) return [];
    return await db.select({
      id: users.id,
      name: users.name
    }).from(users).where(inArray4(users.id, Array.from(stakeholders))).limit(10);
  }
  /**
   * 발주 금액에 따른 우선순위 결정
   */
  static determinePriority(amount) {
    if (amount >= 1e7) return "high";
    if (amount >= 5e6) return "medium";
    return "low";
  }
  /**
   * 사용자의 읽지 않은 알림 수 조회
   */
  static async getUnreadNotificationCount(userId) {
    try {
      return 0;
    } catch (error) {
      console.error("\u274C Error getting unread notification count:", error);
      return 0;
    }
  }
  /**
   * 사용자의 알림 목록 조회
   */
  static async getUserNotifications(userId, limit = 20) {
    try {
      const result = await db.select().from(notifications).where(
        and11(
          eq22(notifications.userId, userId),
          eq22(notifications.isActive, true)
        )
      ).orderBy(sql11`${notifications.createdAt} DESC`).limit(limit);
      return result.map((notification) => ({
        ...notification,
        metadata: notification.metadata ? JSON.parse(notification.metadata) : null,
        createdAt: notification.createdAt?.toISOString(),
        updatedAt: notification.updatedAt?.toISOString()
      }));
    } catch (error) {
      console.error("\u274C Error getting user notifications:", error);
      return [];
    }
  }
  /**
   * 알림을 읽음으로 표시
   */
  static async markNotificationAsRead(notificationId, userId) {
    try {
      const result = await db.update(notifications).set({
        isRead: true,
        updatedAt: /* @__PURE__ */ new Date()
      }).where(
        and11(
          eq22(notifications.id, notificationId),
          eq22(notifications.userId, userId)
        )
      ).returning();
      return result.length > 0;
    } catch (error) {
      console.error("\u274C Error marking notification as read:", error);
      return false;
    }
  }
  /**
   * 모든 알림을 읽음으로 표시
   */
  static async markAllNotificationsAsRead(userId) {
    try {
      const result = await db.update(notifications).set({
        isRead: true,
        updatedAt: /* @__PURE__ */ new Date()
      }).where(
        and11(
          eq22(notifications.userId, userId),
          eq22(notifications.isRead, false),
          eq22(notifications.isActive, true)
        )
      ).returning();
      return result.length;
    } catch (error) {
      console.error("\u274C Error marking all notifications as read:", error);
      return 0;
    }
  }
};

// server/routes/approvals.ts
var router20 = Router19();
async function checkApprovalPermission(userRole, orderAmount) {
  try {
    const authority = await db.select().from(approvalAuthorities).where(
      and12(
        eq23(approvalAuthorities.role, userRole),
        eq23(approvalAuthorities.isActive, true)
      )
    ).limit(1);
    if (authority.length === 0) {
      return userRole === "admin";
    }
    const maxAmount = parseFloat(authority[0].maxAmount);
    return orderAmount <= maxAmount;
  } catch (error) {
    console.error("\uC2B9\uC778 \uAD8C\uD55C \uD655\uC778 \uC624\uB958:", error);
    return userRole === "admin";
  }
}
router20.get("/approvals/history", requireAuth, requireRole(["admin", "executive", "hq_management", "project_manager"]), async (req, res) => {
  try {
    console.log("\u{1F4CB} Fetching approval history from database...");
    const approvalHistory = await db.select({
      id: orderHistory.id,
      orderId: orderHistory.orderId,
      orderTitle: purchaseOrders.orderNumber,
      approver: users.name,
      approverRole: users.role,
      action: orderHistory.action,
      approvalDate: orderHistory.performedAt,
      comments: orderHistory.notes,
      amount: purchaseOrders.totalAmount,
      createdAt: orderHistory.performedAt
    }).from(orderHistory).leftJoin(purchaseOrders, eq23(orderHistory.orderId, purchaseOrders.id)).leftJoin(users, eq23(orderHistory.performedBy, users.id)).where(
      inArray5(orderHistory.action, ["approved", "rejected"])
    ).orderBy(desc10(orderHistory.performedAt)).limit(50);
    const allHistory = approvalHistory.map((record) => ({
      ...record,
      orderTitle: record.orderTitle || `\uBC1C\uC8FC\uC11C #${record.orderId}`,
      approver: record.approver || "\uC54C \uC218 \uC5C6\uC74C",
      amount: parseFloat(record.amount || "0"),
      createdAt: record.createdAt?.toISOString() || (/* @__PURE__ */ new Date()).toISOString(),
      approvalDate: record.approvalDate?.toISOString() || (/* @__PURE__ */ new Date()).toISOString(),
      comments: record.comments || ""
    })).sort((a, b) => new Date(b.approvalDate).getTime() - new Date(a.approvalDate).getTime()).slice(0, 50);
    console.log(`\u2705 Successfully returning ${allHistory.length} approval records from database`);
    res.json(allHistory);
  } catch (error) {
    console.error("\u274C Error in approvals/history endpoint:", error);
    res.status(500).json({
      message: "Failed to fetch approval history",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router20.get("/approvals/pending", requireAuth, requireRole(["admin", "executive", "hq_management", "project_manager"]), async (req, res) => {
  try {
    console.log("\u23F3 Fetching pending approvals from database...");
    const pendingOrders = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      totalAmount: purchaseOrders.totalAmount,
      orderDate: purchaseOrders.orderDate,
      status: purchaseOrders.status,
      notes: purchaseOrders.notes,
      createdAt: purchaseOrders.createdAt,
      // Project information
      projectId: projects.id,
      projectName: projects.projectName,
      // User information
      userId: users.id,
      userName: users.name,
      userFirstName: users.firstName,
      userLastName: users.lastName,
      // Vendor information
      vendorId: vendors.id,
      vendorName: vendors.name
    }).from(purchaseOrders).leftJoin(projects, eq23(purchaseOrders.projectId, projects.id)).leftJoin(users, eq23(purchaseOrders.userId, users.id)).leftJoin(vendors, eq23(purchaseOrders.vendorId, vendors.id)).where(eq23(purchaseOrders.status, "pending")).orderBy(desc10(purchaseOrders.createdAt));
    const formattedOrders = pendingOrders.map((order) => ({
      id: order.id,
      orderNumber: order.orderNumber,
      title: order.orderNumber || `\uBC1C\uC8FC\uC11C #${order.id}`,
      requestedBy: order.userName || `${order.userLastName || ""} ${order.userFirstName || ""}`.trim() || "\uC54C \uC218 \uC5C6\uC74C",
      requestDate: order.orderDate,
      totalAmount: parseFloat(order.totalAmount || "0"),
      urgency: parseFloat(order.totalAmount || "0") > 5e6 ? "high" : parseFloat(order.totalAmount || "0") > 1e6 ? "medium" : "low",
      projectName: order.projectName || "\uD504\uB85C\uC81D\uD2B8 \uBBF8\uC9C0\uC815",
      status: order.status,
      requiresApproval: true,
      nextApprover: "\uB2F4\uB2F9\uC790",
      // TODO: 실제 승인자 로직 구현 필요
      estimatedItems: 0,
      // TODO: 발주 아이템 수 계산 필요
      description: order.notes || "",
      vendorName: order.vendorName
    }));
    console.log(`\u2705 Successfully returning ${formattedOrders.length} pending approvals from DB`);
    res.json(formattedOrders);
  } catch (error) {
    console.error("\u274C Error in approvals/pending endpoint:", error);
    res.status(500).json({
      message: "Failed to fetch pending approvals",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router20.get("/approvals/stats", requireAuth, requireRole(["admin", "executive", "hq_management", "project_manager"]), async (req, res) => {
  try {
    console.log("\u{1F4CA} Fetching approval stats from database...");
    const [totalStats, pendingStats, approvedStats, rejectedStats] = await Promise.all([
      // 전체 발주서 수
      db.select({ count: sql12`count(*)` }).from(purchaseOrders),
      // 승인 대기 수
      db.select({ count: sql12`count(*)` }).from(purchaseOrders).where(eq23(purchaseOrders.status, "pending")),
      // 승인 완료 수
      db.select({ count: sql12`count(*)` }).from(purchaseOrders).where(eq23(purchaseOrders.status, "approved")),
      // 반려 수
      db.select({ count: sql12`count(*)` }).from(purchaseOrders).where(eq23(purchaseOrders.status, "rejected"))
    ]);
    const totalCount = totalStats[0]?.count || 0;
    const pendingCount = pendingStats[0]?.count || 0;
    const approvedCount = approvedStats[0]?.count || 0;
    const rejectedCount = rejectedStats[0]?.count || 0;
    const approvalRate = totalCount > 0 ? approvedCount / (approvedCount + rejectedCount) * 100 : 0;
    const monthlyStatsQuery = await db.select({
      month: sql12`to_char(created_at, 'YYYY-MM')`,
      status: purchaseOrders.status,
      count: sql12`count(*)`
    }).from(purchaseOrders).where(sql12`created_at >= NOW() - INTERVAL '3 months'`).groupBy(sql12`to_char(created_at, 'YYYY-MM')`, purchaseOrders.status).orderBy(sql12`to_char(created_at, 'YYYY-MM') DESC`);
    const monthlyStats = [];
    const monthlyData = {};
    monthlyStatsQuery.forEach((row) => {
      if (!monthlyData[row.month]) {
        monthlyData[row.month] = { month: row.month, approved: 0, rejected: 0, pending: 0 };
      }
      monthlyData[row.month][row.status] = row.count;
    });
    Object.values(monthlyData).forEach((data) => monthlyStats.push(data));
    const stats = {
      totalApprovals: totalCount,
      approvedCount,
      rejectedCount,
      pendingCount,
      averageApprovalTime: "2.1",
      // TODO: 실제 계산 로직 구현 필요
      approvalRate: Math.round(approvalRate * 10) / 10,
      monthlyStats,
      topApprovers: [
        // TODO: 실제 승인자 통계 구현 필요
        { name: "\uAD00\uB9AC\uC790", count: approvedCount, avgTime: "2.1" }
      ]
    };
    console.log(`\u2705 Successfully returning approval statistics from DB:`, {
      total: totalCount,
      pending: pendingCount,
      approved: approvedCount,
      rejected: rejectedCount
    });
    res.json(stats);
  } catch (error) {
    console.error("\u274C Error in approvals/stats endpoint:", error);
    res.status(500).json({
      message: "Failed to fetch approval statistics",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router20.post("/approvals/:id/process", requireAuth, requireRole(["admin", "executive", "hq_management", "project_manager"]), async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    const { action, comments } = req.body;
    const user = req.user;
    console.log(`\u{1F4CB} Processing approval ${id} with action: ${action} by ${user.name} (${user.role})`);
    const existingOrder = await db.select().from(purchaseOrders).where(eq23(purchaseOrders.id, id)).limit(1);
    if (existingOrder.length === 0) {
      return res.status(404).json({ message: "\uBC1C\uC8FC\uC11C\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4" });
    }
    const order = existingOrder[0];
    const hasPermission = await checkApprovalPermission(user.role, parseFloat(order.totalAmount || "0"));
    if (!hasPermission) {
      return res.status(403).json({
        message: "\uD574\uB2F9 \uAE08\uC561\uC5D0 \uB300\uD55C \uC2B9\uC778 \uAD8C\uD55C\uC774 \uC5C6\uC2B5\uB2C8\uB2E4"
      });
    }
    const newStatus = action === "approve" ? "approved" : "rejected";
    await db.update(purchaseOrders).set({
      status: newStatus,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq23(purchaseOrders.id, id));
    const historyEntry = {
      orderId: id,
      action: action === "approve" ? "approved" : "rejected",
      performedBy: user.id,
      performedAt: /* @__PURE__ */ new Date(),
      notes: comments || "",
      previousStatus: order.status,
      newStatus
    };
    await db.insert(orderHistory).values(historyEntry);
    await NotificationService.sendApprovalResultNotification({
      orderId: id,
      action: action === "approve" ? "approval_completed" : "approval_rejected",
      performedBy: user.id,
      comments
    });
    const approvalResult = {
      id,
      orderId: id,
      action,
      approver: user.name || user.email,
      approverRole: user.role,
      approvalDate: (/* @__PURE__ */ new Date()).toISOString(),
      comments: comments || "",
      status: newStatus,
      processedAt: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u2705 Successfully processed ${action} for order ${id} in database`);
    res.json(approvalResult);
  } catch (error) {
    console.error("\u274C Error processing approval:", error);
    res.status(500).json({
      message: "Failed to process approval",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router20.post("/approvals/:orderId/approve", requireAuth, requireRole(["admin", "executive", "hq_management", "project_manager"]), async (req, res) => {
  try {
    const orderId = parseInt(req.params.orderId, 10);
    const { note } = req.body;
    const user = req.user;
    console.log(`\u2705 Processing approval for order ${orderId} by ${user.name} (${user.role})`);
    req.params.id = req.params.orderId;
    req.body = { action: "approve", comments: note };
    const result = await new Promise((resolve, reject) => {
      const originalSend = res.json;
      const originalStatus = res.status;
      res.json = function(data) {
        resolve(data);
        return this;
      };
      res.status = function(statusCode) {
        if (statusCode >= 400) {
          reject(new Error("Approval processing failed"));
        }
        return this;
      };
      processApproval(req, res, orderId, "approve", note, user);
    });
    res.json(result);
  } catch (error) {
    console.error("\u274C Error in approve endpoint:", error);
    res.status(500).json({
      message: "Failed to approve order",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router20.post("/approvals/:orderId/reject", requireAuth, requireRole(["admin", "executive", "hq_management", "project_manager"]), async (req, res) => {
  try {
    const orderId = parseInt(req.params.orderId, 10);
    const { note } = req.body;
    const user = req.user;
    console.log(`\u274C Processing rejection for order ${orderId} by ${user.name} (${user.role})`);
    const result = await processApproval(req, res, orderId, "reject", note, user);
    res.json(result);
  } catch (error) {
    console.error("\u274C Error in reject endpoint:", error);
    res.status(500).json({
      message: "Failed to reject order",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
async function processApproval(req, res, orderId, action, note, user) {
  try {
    const existingOrder = await db.select().from(purchaseOrders).where(eq23(purchaseOrders.id, orderId)).limit(1);
    if (existingOrder.length === 0) {
      throw new Error("\uBC1C\uC8FC\uC11C\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4");
    }
    const order = existingOrder[0];
    const hasPermission = await checkApprovalPermission(user.role, parseFloat(order.totalAmount || "0"));
    if (!hasPermission) {
      throw new Error("\uD574\uB2F9 \uAE08\uC561\uC5D0 \uB300\uD55C \uC2B9\uC778 \uAD8C\uD55C\uC774 \uC5C6\uC2B5\uB2C8\uB2E4");
    }
    const newStatus = action === "approve" ? "approved" : "rejected";
    await db.update(purchaseOrders).set({
      status: newStatus,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq23(purchaseOrders.id, orderId));
    const historyEntry = {
      orderId,
      action: action === "approve" ? "approved" : "rejected",
      performedBy: user.id,
      performedAt: /* @__PURE__ */ new Date(),
      notes: note || "",
      previousStatus: order.status,
      newStatus
    };
    await db.insert(orderHistory).values(historyEntry);
    await NotificationService.sendApprovalResultNotification({
      orderId,
      action: action === "approve" ? "approval_completed" : "approval_rejected",
      performedBy: user.id,
      comments: note
    });
    const approvalResult = {
      id: orderId,
      orderId,
      action,
      approver: user.name || user.email,
      approverRole: user.role,
      approvalDate: (/* @__PURE__ */ new Date()).toISOString(),
      comments: note || "",
      status: newStatus,
      processedAt: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u2705 Successfully processed ${action} for order ${orderId} in database`);
    return approvalResult;
  } catch (error) {
    console.error(`\u274C Error processing ${action} for order ${orderId}:`, error);
    throw error;
  }
}
router20.post("/approvals/:orderId/start-workflow", requireAuth, requireRole(["admin", "executive", "hq_management", "project_manager"]), async (req, res) => {
  try {
    const orderId = parseInt(req.params.orderId, 10);
    const { companyId } = req.body;
    const user = req.user;
    console.log(`\u{1F504} Starting approval workflow for order ${orderId}`);
    const orderInfo = await db.select({
      id: purchaseOrders.id,
      totalAmount: purchaseOrders.totalAmount,
      status: purchaseOrders.status,
      userId: purchaseOrders.userId
    }).from(purchaseOrders).where(eq23(purchaseOrders.id, orderId)).limit(1);
    if (orderInfo.length === 0) {
      return res.status(404).json({ message: "\uBC1C\uC8FC\uC11C\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4" });
    }
    const order = orderInfo[0];
    const orderAmount = parseFloat(order.totalAmount || "0");
    const approvalContext = {
      orderId,
      orderAmount,
      companyId: companyId || 1,
      // Default company
      currentUserId: user.id,
      currentUserRole: user.role,
      priority: orderAmount > 1e7 ? "high" : orderAmount > 5e6 ? "medium" : "low"
    };
    const routeDecision = await ApprovalRoutingService.determineApprovalRoute(approvalContext);
    if (routeDecision.approvalMode === "direct") {
      if (routeDecision.canDirectApprove) {
        return res.json({
          success: true,
          mode: "direct",
          canApprove: true,
          message: "\uC9C1\uC811 \uC2B9\uC778\uC774 \uAC00\uB2A5\uD569\uB2C8\uB2E4",
          reasoning: routeDecision.reasoning
        });
      } else {
        return res.status(403).json({
          success: false,
          mode: "direct",
          canApprove: false,
          message: "\uC2B9\uC778 \uAD8C\uD55C\uC774 \uC5C6\uC2B5\uB2C8\uB2E4",
          reasoning: routeDecision.reasoning
        });
      }
    } else {
      const approvalInstances = await ApprovalRoutingService.createApprovalInstances(orderId, approvalContext);
      await db.update(purchaseOrders).set({
        status: "pending",
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq23(purchaseOrders.id, orderId));
      await NotificationService.sendApprovalRequestNotification({
        orderId,
        action: "approval_requested",
        performedBy: user.id
      });
      return res.json({
        success: true,
        mode: "staged",
        approvalSteps: routeDecision.stagedApprovalSteps?.length || 0,
        templateName: routeDecision.templateName,
        message: `${approvalInstances.length}\uB2E8\uACC4 \uC2B9\uC778 \uD504\uB85C\uC138\uC2A4\uAC00 \uC2DC\uC791\uB418\uC5C8\uC2B5\uB2C8\uB2E4`,
        reasoning: routeDecision.reasoning,
        instances: approvalInstances
      });
    }
  } catch (error) {
    console.error("\u274C Error starting approval workflow:", error);
    res.status(500).json({
      message: "Failed to start approval workflow",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router20.get("/approvals/:orderId/progress", requireAuth, requireRole(["admin", "executive", "hq_management", "project_manager"]), async (req, res) => {
  try {
    const orderId = parseInt(req.params.orderId, 10);
    console.log(`\u{1F4CA} Getting approval progress for order ${orderId}`);
    const progress = await ApprovalRoutingService.getApprovalProgress(orderId);
    const nextStep = await ApprovalRoutingService.getNextApprovalStep(orderId);
    const isComplete = await ApprovalRoutingService.isApprovalComplete(orderId);
    res.json({
      success: true,
      data: {
        ...progress,
        nextStep,
        isComplete
      }
    });
  } catch (error) {
    console.error("\u274C Error getting approval progress:", error);
    res.status(500).json({
      message: "Failed to get approval progress",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router20.post("/approvals/:orderId/step/:stepId", requireAuth, requireRole(["admin", "executive", "hq_management", "project_manager"]), async (req, res) => {
  try {
    const orderId = parseInt(req.params.orderId, 10);
    const stepId = parseInt(req.params.stepId, 10);
    const { action, comments } = req.body;
    const user = req.user;
    console.log(`\u{1F504} Processing approval step ${stepId} for order ${orderId} with action: ${action}`);
    const stepInstance = await db.select().from(approvalStepInstances2).where(eq23(approvalStepInstances2.id, stepId)).limit(1);
    if (stepInstance.length === 0) {
      return res.status(404).json({ message: "\uC2B9\uC778 \uB2E8\uACC4\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4" });
    }
    const step = stepInstance[0];
    if (step.requiredRole !== user.role && user.role !== "admin") {
      return res.status(403).json({
        message: `\uC774 \uB2E8\uACC4\uB294 ${step.requiredRole} \uC5ED\uD560\uB9CC \uCC98\uB9AC\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4`
      });
    }
    const newStatus = action === "approve" ? "approved" : action === "reject" ? "rejected" : "skipped";
    await db.update(approvalStepInstances2).set({
      status: newStatus,
      approvedBy: user.id,
      approvedAt: /* @__PURE__ */ new Date(),
      comments: comments || "",
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq23(approvalStepInstances2.id, stepId));
    const isComplete = await ApprovalRoutingService.isApprovalComplete(orderId);
    const progress = await ApprovalRoutingService.getApprovalProgress(orderId);
    let finalOrderStatus = "pending";
    if (action === "reject") {
      finalOrderStatus = "rejected";
      await db.update(approvalStepInstances2).set({
        isActive: false,
        updatedAt: /* @__PURE__ */ new Date()
      }).where(
        and12(
          eq23(approvalStepInstances2.orderId, orderId),
          eq23(approvalStepInstances2.status, "pending")
        )
      );
    } else if (isComplete) {
      finalOrderStatus = "approved";
    }
    if (finalOrderStatus !== "pending") {
      await db.update(purchaseOrders).set({
        status: finalOrderStatus,
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq23(purchaseOrders.id, orderId));
      await db.insert(orderHistory).values({
        orderId,
        action: finalOrderStatus === "approved" ? "approved" : "rejected",
        performedBy: user.id,
        performedAt: /* @__PURE__ */ new Date(),
        notes: comments || "",
        previousStatus: "pending",
        newStatus: finalOrderStatus
      });
      await NotificationService.sendApprovalResultNotification({
        orderId,
        action: finalOrderStatus === "approved" ? "approval_completed" : "approval_rejected",
        performedBy: user.id,
        comments
      });
    }
    res.json({
      success: true,
      stepProcessed: {
        stepId,
        action,
        status: newStatus
      },
      progress,
      isComplete,
      finalStatus: finalOrderStatus
    });
  } catch (error) {
    console.error("\u274C Error processing approval step:", error);
    res.status(500).json({
      message: "Failed to process approval step",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
var approvals_default = router20;

// server/routes/project-members.ts
import { Router as Router20 } from "express";
var router21 = Router20();
router21.get("/project-members", async (req, res) => {
  try {
    const { projectId } = req.query;
    console.log(`\u{1F465} Fetching project members${projectId ? ` for project ${projectId}` : ""} (using reliable mock data)...`);
    const mockProjectMembers = [
      {
        id: 1,
        projectId: 1,
        userId: "user001",
        userName: "\uAE40\uD604\uC7A5",
        email: "kim.hyunjang@company.com",
        role: "project_manager",
        position: "\uD604\uC7A5\uC18C\uC7A5",
        joinDate: "2025-01-01",
        isActive: true,
        permissions: ["orders:create", "orders:approve", "team:manage"],
        phone: "010-1234-5678"
      },
      {
        id: 2,
        projectId: 1,
        userId: "user002",
        userName: "\uC774\uAE30\uC0AC",
        email: "lee.gisa@company.com",
        role: "field_worker",
        position: "\uD604\uC7A5\uAE30\uC0AC",
        joinDate: "2025-01-01",
        isActive: true,
        permissions: ["orders:create", "materials:check"],
        phone: "010-2345-6789"
      },
      {
        id: 3,
        projectId: 1,
        userId: "user003",
        userName: "\uBC15\uC548\uC804",
        email: "park.safety@company.com",
        role: "field_worker",
        position: "\uC548\uC804\uAD00\uB9AC\uC790",
        joinDate: "2025-01-05",
        isActive: true,
        permissions: ["safety:manage", "reports:create"],
        phone: "010-3456-7890"
      },
      {
        id: 4,
        projectId: 2,
        userId: "user004",
        userName: "\uCD5C\uAD00\uB9AC",
        email: "choi.manager@company.com",
        role: "project_manager",
        position: "\uD504\uB85C\uC81D\uD2B8\uAD00\uB9AC\uC790",
        joinDate: "2024-12-15",
        isActive: true,
        permissions: ["orders:create", "orders:approve", "budget:manage"],
        phone: "010-4567-8901"
      }
    ].filter((member) => !projectId || member.projectId === parseInt(projectId));
    console.log(`\u2705 Successfully returning ${mockProjectMembers.length} project members (mock data)`);
    res.json(mockProjectMembers);
  } catch (error) {
    console.error("\u274C Error in project-members endpoint:", error);
    res.status(500).json({
      message: "Failed to fetch project members",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router21.get("/project-members/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    console.log(`\u{1F465} Fetching project member ${id} (using reliable mock data)...`);
    const mockProjectMember = {
      id,
      projectId: 1,
      userId: `user${id.toString().padStart(3, "0")}`,
      userName: "\uAE40\uD604\uC7A5",
      email: `member${id}@company.com`,
      role: "project_manager",
      position: "\uD604\uC7A5\uC18C\uC7A5",
      joinDate: "2025-01-01",
      isActive: true,
      permissions: ["orders:create", "orders:approve", "team:manage"],
      phone: "010-1234-5678",
      department: "\uAC74\uC124\uC0AC\uC5C5\uBD80",
      experience: "15\uB144",
      certifications: ["\uAC74\uC124\uAE30\uC220\uC790", "\uC548\uC804\uAD00\uB9AC\uC790"]
    };
    console.log(`\u2705 Successfully returning project member ${id} (mock data)`);
    res.json(mockProjectMember);
  } catch (error) {
    console.error("\u274C Error in project member by ID endpoint:", error);
    res.status(500).json({
      message: "Failed to fetch project member",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router21.post("/project-members", async (req, res) => {
  try {
    console.log("\u{1F465} Adding project member (using reliable mock data)...");
    const { projectId, userId, role, position } = req.body;
    const mockProjectMember = {
      id: Math.floor(Math.random() * 1e3) + 100,
      projectId: parseInt(projectId),
      userId,
      userName: "\uC2E0\uADDC\uBA64\uBC84",
      email: `${userId}@company.com`,
      role: role || "field_worker",
      position: position || "\uD604\uC7A5\uC791\uC5C5\uC790",
      joinDate: (/* @__PURE__ */ new Date()).toISOString().split("T")[0],
      isActive: true,
      permissions: ["orders:create"],
      phone: "010-0000-0000"
    };
    console.log(`\u2705 Successfully added project member ${mockProjectMember.id} (mock data)`);
    res.status(201).json(mockProjectMember);
  } catch (error) {
    console.error("\u274C Error adding project member:", error);
    res.status(500).json({
      message: "Failed to add project member",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router21.put("/project-members/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    console.log(`\u{1F465} Updating project member ${id} (using reliable mock data)...`);
    const { role, position, isActive, permissions } = req.body;
    const mockUpdatedMember = {
      id,
      projectId: 1,
      userId: `user${id.toString().padStart(3, "0")}`,
      userName: "\uAE40\uD604\uC7A5",
      email: `member${id}@company.com`,
      role: role || "project_manager",
      position: position || "\uD604\uC7A5\uC18C\uC7A5",
      joinDate: "2025-01-01",
      isActive: isActive !== void 0 ? isActive : true,
      permissions: permissions || ["orders:create", "orders:approve"],
      phone: "010-1234-5678",
      updatedAt: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u2705 Successfully updated project member ${id} (mock data)`);
    res.json(mockUpdatedMember);
  } catch (error) {
    console.error("\u274C Error updating project member:", error);
    res.status(500).json({
      message: "Failed to update project member",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router21.delete("/project-members/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    console.log(`\u{1F465} Removing project member ${id} (using reliable mock data)...`);
    console.log(`\u2705 Successfully removed project member ${id} (mock data)`);
    res.json({ message: "Project member removed successfully", id });
  } catch (error) {
    console.error("\u274C Error removing project member:", error);
    res.status(500).json({
      message: "Failed to remove project member",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
var project_members_default = router21;

// server/routes/project-types.ts
import { Router as Router21 } from "express";
var router22 = Router21();
router22.get("/project-types", async (req, res) => {
  try {
    console.log("\u{1F3D7}\uFE0F Fetching project types (using reliable mock data)...");
    const mockProjectTypes = [
      {
        id: 1,
        name: "\uC544\uD30C\uD2B8 \uAC74\uC124",
        code: "APT",
        description: "\uC8FC\uAC70\uC6A9 \uC544\uD30C\uD2B8 \uAC74\uC124 \uD504\uB85C\uC81D\uD2B8",
        category: "residential",
        isActive: true,
        estimatedDuration: "24\uAC1C\uC6D4",
        typicalBudgetRange: "100\uC5B5\uC6D0 ~ 500\uC5B5\uC6D0"
      },
      {
        id: 2,
        name: "\uC624\uD53C\uC2A4\uBE4C\uB529",
        code: "OFFICE",
        description: "\uC0C1\uC5C5\uC6A9 \uC624\uD53C\uC2A4 \uAC74\uBB3C \uAC74\uC124",
        category: "commercial",
        isActive: true,
        estimatedDuration: "18\uAC1C\uC6D4",
        typicalBudgetRange: "50\uC5B5\uC6D0 ~ 300\uC5B5\uC6D0"
      },
      {
        id: 3,
        name: "\uACF5\uC7A5 \uAC74\uC124",
        code: "FACTORY",
        description: "\uC0B0\uC5C5\uC6A9 \uACF5\uC7A5 \uAC74\uC124 \uD504\uB85C\uC81D\uD2B8",
        category: "industrial",
        isActive: true,
        estimatedDuration: "12\uAC1C\uC6D4",
        typicalBudgetRange: "30\uC5B5\uC6D0 ~ 200\uC5B5\uC6D0"
      },
      {
        id: 4,
        name: "\uC778\uD504\uB77C \uAD6C\uCD95",
        code: "INFRA",
        description: "\uB3C4\uB85C, \uAD50\uB7C9 \uB4F1 \uC0AC\uD68C \uC778\uD504\uB77C \uAD6C\uCD95",
        category: "infrastructure",
        isActive: true,
        estimatedDuration: "36\uAC1C\uC6D4",
        typicalBudgetRange: "200\uC5B5\uC6D0 ~ 1000\uC5B5\uC6D0"
      },
      {
        id: 5,
        name: "\uB9AC\uBAA8\uB378\uB9C1",
        code: "REMODEL",
        description: "\uAE30\uC874 \uAC74\uBB3C \uB9AC\uBAA8\uB378\uB9C1 \uBC0F \uAC1C\uBCF4\uC218",
        category: "renovation",
        isActive: true,
        estimatedDuration: "6\uAC1C\uC6D4",
        typicalBudgetRange: "5\uC5B5\uC6D0 ~ 50\uC5B5\uC6D0"
      }
    ];
    console.log(`\u2705 Successfully returning ${mockProjectTypes.length} project types (mock data)`);
    res.json(mockProjectTypes);
  } catch (error) {
    console.error("\u274C Error in project-types endpoint:", error);
    res.status(500).json({
      message: "Failed to fetch project types",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router22.get("/project-statuses", async (req, res) => {
  try {
    console.log("\u{1F4CA} Fetching project statuses (using reliable mock data)...");
    const mockProjectStatuses = [
      {
        id: 1,
        name: "\uACC4\uD68D",
        code: "PLANNING",
        description: "\uD504\uB85C\uC81D\uD2B8 \uACC4\uD68D \uC218\uB9BD \uC911",
        color: "#9CA3AF",
        order: 1,
        isActive: true,
        allowedTransitions: ["\uC900\uBE44", "\uBCF4\uB958"]
      },
      {
        id: 2,
        name: "\uC900\uBE44",
        code: "PREPARATION",
        description: "\uD504\uB85C\uC81D\uD2B8 \uC900\uBE44 \uB2E8\uACC4",
        color: "#F59E0B",
        order: 2,
        isActive: true,
        allowedTransitions: ["\uC9C4\uD589", "\uBCF4\uB958", "\uCDE8\uC18C"]
      },
      {
        id: 3,
        name: "\uC9C4\uD589",
        code: "IN_PROGRESS",
        description: "\uD504\uB85C\uC81D\uD2B8 \uC9C4\uD589 \uC911",
        color: "#3B82F6",
        order: 3,
        isActive: true,
        allowedTransitions: ["\uC644\uB8CC", "\uBCF4\uB958", "\uC9C0\uC5F0"]
      },
      {
        id: 4,
        name: "\uC9C0\uC5F0",
        code: "DELAYED",
        description: "\uD504\uB85C\uC81D\uD2B8 \uC9C0\uC5F0 \uC0C1\uD0DC",
        color: "#F97316",
        order: 4,
        isActive: true,
        allowedTransitions: ["\uC9C4\uD589", "\uBCF4\uB958", "\uCDE8\uC18C"]
      },
      {
        id: 5,
        name: "\uBCF4\uB958",
        code: "ON_HOLD",
        description: "\uD504\uB85C\uC81D\uD2B8 \uC77C\uC2DC \uC911\uB2E8",
        color: "#6B7280",
        order: 5,
        isActive: true,
        allowedTransitions: ["\uC9C4\uD589", "\uCDE8\uC18C"]
      },
      {
        id: 6,
        name: "\uC644\uB8CC",
        code: "COMPLETED",
        description: "\uD504\uB85C\uC81D\uD2B8 \uC644\uB8CC",
        color: "#10B981",
        order: 6,
        isActive: true,
        allowedTransitions: []
      },
      {
        id: 7,
        name: "\uCDE8\uC18C",
        code: "CANCELLED",
        description: "\uD504\uB85C\uC81D\uD2B8 \uCDE8\uC18C",
        color: "#EF4444",
        order: 7,
        isActive: true,
        allowedTransitions: []
      }
    ];
    console.log(`\u2705 Successfully returning ${mockProjectStatuses.length} project statuses (mock data)`);
    res.json(mockProjectStatuses);
  } catch (error) {
    console.error("\u274C Error in project-statuses endpoint:", error);
    res.status(500).json({
      message: "Failed to fetch project statuses",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
var project_types_default = router22;

// server/routes/simple-auth.ts
import { Router as Router22 } from "express";
var router23 = Router22();
var mockUsers = [
  {
    id: "admin",
    username: "admin",
    email: "admin@company.com",
    password: "admin123",
    name: "\uAD00\uB9AC\uC790",
    role: "admin",
    isActive: true,
    position: "\uC2DC\uC2A4\uD15C\uAD00\uB9AC\uC790",
    department: "IT\uD300"
  },
  {
    id: "manager",
    username: "manager",
    email: "manager@company.com",
    password: "manager123",
    name: "\uAE40\uBD80\uC7A5",
    role: "project_manager",
    isActive: true,
    position: "\uD504\uB85C\uC81D\uD2B8\uAD00\uB9AC\uC790",
    department: "\uAC74\uC124\uC0AC\uC5C5\uBD80"
  },
  {
    id: "user",
    username: "user",
    email: "user@company.com",
    password: "user123",
    name: "\uC774\uAE30\uC0AC",
    role: "field_worker",
    isActive: true,
    position: "\uD604\uC7A5\uAE30\uC0AC",
    department: "\uD604\uC7A5\uD300"
  }
];
router23.post("/simple-auth/login", (req, res) => {
  try {
    console.log("\u{1F510} Simple auth login request:", req.body);
    const { username, password, email } = req.body;
    const identifier = username || email;
    if (!identifier || !password) {
      return res.status(400).json({
        message: "Email/username and password are required",
        success: false
      });
    }
    console.log("\u{1F50D} Looking for user with identifier:", identifier);
    const user = mockUsers.find(
      (u) => u.username === identifier || u.email === identifier
    );
    if (!user) {
      console.log("\u274C User not found:", identifier);
      return res.status(401).json({
        message: "Invalid credentials",
        success: false
      });
    }
    if (!user.isActive) {
      console.log("\u274C User inactive:", identifier);
      return res.status(401).json({
        message: "Account is deactivated",
        success: false
      });
    }
    if (password !== user.password) {
      console.log("\u274C Invalid password for user:", identifier);
      return res.status(401).json({
        message: "Invalid credentials",
        success: false
      });
    }
    console.log("\u2705 Simple auth successful for user:", user.name);
    const { password: _, ...userWithoutPassword } = user;
    res.json({
      message: "Login successful",
      user: userWithoutPassword,
      success: true
    });
  } catch (error) {
    console.error("Simple auth error:", error);
    res.status(500).json({
      message: "Login failed",
      error: error?.message || "Unknown error",
      success: false
    });
  }
});
router23.post("/simple-auth/logout", (req, res) => {
  console.log("\u{1F6AA} Simple logout request");
  res.json({
    message: "Logout successful",
    success: true
  });
});
router23.get("/simple-auth/me", (req, res) => {
  console.log("\u{1F464} Simple me request (no session support)");
  res.status(401).json({
    message: "Not authenticated",
    success: false
  });
});
var simple_auth_default = router23;

// server/routes/test-accounts.ts
import { Router as Router23 } from "express";
var router24 = Router23();
var testUsers = [
  {
    id: "admin",
    username: "admin",
    email: "admin@company.com",
    password: "admin123",
    name: "\uAD00\uB9AC\uC790",
    role: "admin",
    description: "\uC2DC\uC2A4\uD15C \uAD00\uB9AC\uC790 - \uBAA8\uB4E0 \uAD8C\uD55C",
    features: ["\uC0AC\uC6A9\uC790 \uAD00\uB9AC", "\uC2DC\uC2A4\uD15C \uC124\uC815", "\uBAA8\uB4E0 \uB370\uC774\uD130 \uC811\uADFC"]
  },
  {
    id: "manager",
    username: "manager",
    email: "manager@company.com",
    password: "manager123",
    name: "\uAE40\uBD80\uC7A5",
    role: "project_manager",
    description: "\uD504\uB85C\uC81D\uD2B8 \uAD00\uB9AC\uC790 - \uBC1C\uC8FC \uC2B9\uC778 \uAD8C\uD55C",
    features: ["\uBC1C\uC8FC\uC11C \uC2B9\uC778", "\uD504\uB85C\uC81D\uD2B8 \uAD00\uB9AC", "\uB9AC\uD3EC\uD2B8 \uC870\uD68C"]
  },
  {
    id: "user",
    username: "user",
    email: "user@company.com",
    password: "user123",
    name: "\uC774\uAE30\uC0AC",
    role: "field_worker",
    description: "\uD604\uC7A5 \uC791\uC5C5\uC790 - \uBC1C\uC8FC\uC11C \uC791\uC131 \uAD8C\uD55C",
    features: ["\uBC1C\uC8FC\uC11C \uC791\uC131", "\uD504\uB85C\uC81D\uD2B8 \uC870\uD68C", "\uAE30\uBCF8 \uAE30\uB2A5"]
  }
];
router24.get("/test-accounts", (req, res) => {
  try {
    console.log("\u{1F4CB} Fetching available test accounts");
    const accountsInfo = testUsers.map((user) => ({
      id: user.id,
      username: user.username,
      email: user.email,
      name: user.name,
      role: user.role,
      description: user.description,
      features: user.features
    }));
    console.log(`\u2705 Returning ${accountsInfo.length} test accounts`);
    res.json({
      accounts: accountsInfo,
      instructions: {
        login: "Use POST /api/auth/login with username/email and password",
        forceLogout: "Use POST /api/auth/force-logout to clear all auth state",
        quickLogin: "Use POST /api/test-accounts/quick-login with just the account ID"
      }
    });
  } catch (error) {
    console.error("\u274C Error fetching test accounts:", error);
    res.status(500).json({
      message: "Failed to fetch test accounts",
      error: error?.message
    });
  }
});
router24.post("/test-accounts/quick-login", (req, res) => {
  try {
    const { accountId } = req.body;
    if (!accountId) {
      return res.status(400).json({
        message: "Account ID is required",
        availableAccounts: testUsers.map((u) => ({ id: u.id, name: u.name, role: u.role }))
      });
    }
    console.log("\u26A1 Quick login request for account:", accountId);
    const user = testUsers.find((u) => u.id === accountId);
    if (!user) {
      return res.status(404).json({
        message: "Test account not found",
        availableAccounts: testUsers.map((u) => ({ id: u.id, name: u.name, role: u.role }))
      });
    }
    console.log("\u2705 Quick login successful for:", user.name);
    const { password: _, ...userWithoutPassword } = user;
    res.json({
      message: `Quick login credentials for ${user.name}`,
      user: userWithoutPassword,
      loginCredentials: {
        username: user.username,
        email: user.email,
        password: user.password
      },
      instructions: "Use these credentials with POST /api/auth/login"
    });
  } catch (error) {
    console.error("\u274C Quick login error:", error);
    res.status(500).json({
      message: "Quick login failed",
      error: error?.message
    });
  }
});
router24.post("/test-accounts/switch-to", (req, res) => {
  try {
    const { accountId } = req.body;
    if (!accountId) {
      return res.status(400).json({
        message: "Account ID is required",
        availableAccounts: testUsers.map((u) => ({ id: u.id, name: u.name, role: u.role }))
      });
    }
    console.log("\u{1F504} Account switch request to:", accountId);
    const user = testUsers.find((u) => u.id === accountId);
    if (!user) {
      return res.status(404).json({
        message: "Test account not found",
        availableAccounts: testUsers.map((u) => ({ id: u.id, name: u.name, role: u.role }))
      });
    }
    console.log("\u2705 Account switch prepared for:", user.name);
    const { password: _, ...userWithoutPassword } = user;
    res.json({
      message: `Ready to switch to ${user.name}`,
      targetUser: userWithoutPassword,
      instructions: {
        step1: "Call POST /api/auth/force-logout first",
        step2: `Then call POST /api/auth/login with username: "${user.username}" and password: "${user.password}"`
      },
      autoLoginData: {
        username: user.username,
        password: user.password
      }
    });
  } catch (error) {
    console.error("\u274C Account switch error:", error);
    res.status(500).json({
      message: "Account switch failed",
      error: error?.message
    });
  }
});
var test_accounts_default = router24;

// server/routes/categories.ts
init_db();
init_schema();
import { Router as Router24 } from "express";
import { eq as eq25, and as and14 } from "drizzle-orm";

// server/utils/category-mapping-validator.ts
init_db();
init_schema();
import { eq as eq24 } from "drizzle-orm";
async function validateCategoryMapping(request) {
  console.log("\u{1F50D} \uBD84\uB958 \uB9E4\uD551 \uAC80\uC99D \uC2DC\uC791:", request);
  const result = {
    excel: {
      major: request.majorCategory?.trim(),
      middle: request.middleCategory?.trim(),
      minor: request.minorCategory?.trim()
    },
    db: {},
    status: "no_match",
    suggestions: [],
    confidence: 0
  };
  try {
    const allCategories = await db.select().from(itemCategories).where(eq24(itemCategories.isActive, true));
    const majorCategories = allCategories.filter((c) => c.categoryType === "major");
    const middleCategories = allCategories.filter((c) => c.categoryType === "middle");
    const minorCategories = allCategories.filter((c) => c.categoryType === "minor");
    let mappedMajor = null;
    if (result.excel.major) {
      mappedMajor = await findBestCategoryMatch(
        result.excel.major,
        majorCategories
      );
      if (mappedMajor.bestMatch) {
        result.db.majorId = mappedMajor.bestMatch.id;
        result.db.majorName = mappedMajor.bestMatch.categoryName;
      }
      result.suggestions.push(...mappedMajor.suggestions);
    }
    let mappedMiddle = null;
    if (result.excel.middle && mappedMajor?.bestMatch) {
      const filteredMiddle = middleCategories.filter(
        (c) => c.parentId === mappedMajor.bestMatch.id
      );
      mappedMiddle = await findBestCategoryMatch(
        result.excel.middle,
        filteredMiddle
      );
      if (mappedMiddle.bestMatch) {
        result.db.middleId = mappedMiddle.bestMatch.id;
        result.db.middleName = mappedMiddle.bestMatch.categoryName;
      }
      result.suggestions.push(...mappedMiddle.suggestions);
    } else if (result.excel.middle && !mappedMajor?.bestMatch) {
      mappedMiddle = await findBestCategoryMatch(
        result.excel.middle,
        middleCategories
      );
      result.suggestions.push(...mappedMiddle.suggestions);
    }
    let mappedMinor = null;
    if (result.excel.minor && mappedMiddle?.bestMatch) {
      const filteredMinor = minorCategories.filter(
        (c) => c.parentId === mappedMiddle.bestMatch.id
      );
      mappedMinor = await findBestCategoryMatch(
        result.excel.minor,
        filteredMinor
      );
      if (mappedMinor.bestMatch) {
        result.db.minorId = mappedMinor.bestMatch.id;
        result.db.minorName = mappedMinor.bestMatch.categoryName;
      }
      result.suggestions.push(...mappedMinor.suggestions);
    } else if (result.excel.minor && !mappedMiddle?.bestMatch) {
      mappedMinor = await findBestCategoryMatch(
        result.excel.minor,
        minorCategories
      );
      result.suggestions.push(...mappedMinor.suggestions);
    }
    result.status = calculateMappingStatus(result, mappedMajor, mappedMiddle, mappedMinor);
    result.confidence = calculateConfidence(result, mappedMajor, mappedMiddle, mappedMinor);
    console.log("\u2705 \uBD84\uB958 \uB9E4\uD551 \uAC80\uC99D \uC644\uB8CC:", {
      status: result.status,
      confidence: result.confidence,
      suggestions: result.suggestions.length
    });
    return result;
  } catch (error) {
    console.error("\u274C \uBD84\uB958 \uB9E4\uD551 \uAC80\uC99D \uC624\uB958:", error);
    throw new Error(`\uBD84\uB958 \uB9E4\uD551 \uAC80\uC99D \uC2E4\uD328: ${error.message}`);
  }
}
async function findBestCategoryMatch(excelCategory, dbCategories) {
  const suggestions = [];
  let bestMatch = null;
  let highestSimilarity = 0;
  for (const dbCategory of dbCategories) {
    const similarity = calculateStringSimilarity(
      excelCategory.toLowerCase(),
      dbCategory.categoryName.toLowerCase()
    );
    suggestions.push({
      id: dbCategory.id,
      name: dbCategory.categoryName,
      type: dbCategory.categoryType,
      similarity: Math.round(similarity * 100),
      parentId: dbCategory.parentId
    });
    if (similarity > 0.8 && similarity > highestSimilarity) {
      highestSimilarity = similarity;
      bestMatch = dbCategory;
    }
  }
  suggestions.sort((a, b) => b.similarity - a.similarity);
  const uniqueSuggestions = [];
  const seenNames = /* @__PURE__ */ new Set();
  for (const suggestion of suggestions) {
    if (!seenNames.has(suggestion.name)) {
      seenNames.add(suggestion.name);
      uniqueSuggestions.push(suggestion);
    }
  }
  return {
    bestMatch,
    suggestions: uniqueSuggestions.slice(0, 5)
  };
}
function calculateStringSimilarity(str1, str2) {
  const matrix = [];
  const n = str1.length;
  const m = str2.length;
  if (n === 0) return m === 0 ? 1 : 0;
  if (m === 0) return 0;
  for (let i = 0; i <= n; i++) {
    matrix[i] = [i];
  }
  for (let j = 0; j <= m; j++) {
    matrix[0][j] = j;
  }
  for (let i = 1; i <= n; i++) {
    for (let j = 1; j <= m; j++) {
      const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;
      matrix[i][j] = Math.min(
        matrix[i - 1][j] + 1,
        // 삭제
        matrix[i][j - 1] + 1,
        // 삽입
        matrix[i - 1][j - 1] + cost
        // 치환
      );
    }
  }
  const distance = matrix[n][m];
  const maxLength = Math.max(n, m);
  return maxLength === 0 ? 1 : (maxLength - distance) / maxLength;
}
function calculateMappingStatus(result, mappedMajor, mappedMiddle, mappedMinor) {
  const hasExcelMajor = !!result.excel.major;
  const hasExcelMiddle = !!result.excel.middle;
  const hasExcelMinor = !!result.excel.minor;
  const hasDbMajor = !!result.db.majorId;
  const hasDbMiddle = !!result.db.middleId;
  const hasDbMinor = !!result.db.minorId;
  if (hasExcelMajor && hasDbMajor && (!hasExcelMiddle || hasDbMiddle) && (!hasExcelMinor || hasDbMinor)) {
    return "exact_match";
  }
  if (hasDbMajor || hasDbMiddle || hasDbMinor) {
    return "partial_match";
  }
  return "no_match";
}
function calculateConfidence(result, mappedMajor, mappedMiddle, mappedMinor) {
  let totalWeight = 0;
  let matchedWeight = 0;
  if (result.excel.major) {
    totalWeight += 40;
    if (mappedMajor?.bestMatch) {
      const majorSimilarity = mappedMajor.suggestions?.[0]?.similarity || 0;
      matchedWeight += 40 * majorSimilarity / 100;
    }
  }
  if (result.excel.middle) {
    totalWeight += 35;
    if (mappedMiddle?.bestMatch) {
      const middleSimilarity = mappedMiddle.suggestions?.[0]?.similarity || 0;
      matchedWeight += 35 * middleSimilarity / 100;
    }
  }
  if (result.excel.minor) {
    totalWeight += 25;
    if (mappedMinor?.bestMatch) {
      const minorSimilarity = mappedMinor.suggestions?.[0]?.similarity || 0;
      matchedWeight += 25 * minorSimilarity / 100;
    }
  }
  return totalWeight === 0 ? 0 : Math.round(matchedWeight / totalWeight * 100);
}
async function validateCategoriesBatch(requests) {
  console.log(`\u{1F50D} \uBC30\uCE58 \uBD84\uB958 \uAC80\uC99D \uC2DC\uC791 (${requests.length}\uAC1C \uD488\uBAA9)`);
  const results = [];
  for (let i = 0; i < requests.length; i++) {
    try {
      const result = await validateCategoryMapping(requests[i]);
      results.push(result);
      if ((i + 1) % 10 === 0) {
        console.log(`\u{1F4CA} \uC9C4\uD589\uB960: ${i + 1}/${requests.length}`);
      }
    } catch (error) {
      console.error(`\u274C \uD488\uBAA9 ${i + 1} \uAC80\uC99D \uC2E4\uD328:`, error);
      results.push({
        excel: requests[i],
        db: {},
        status: "no_match",
        suggestions: [],
        confidence: 0
      });
    }
  }
  console.log("\u2705 \uBC30\uCE58 \uBD84\uB958 \uAC80\uC99D \uC644\uB8CC");
  return results;
}

// server/routes/categories.ts
var router25 = Router24();
router25.get("/hierarchy", async (req, res) => {
  try {
    const categoriesFromOrderItems = await db.select({
      majorCategory: purchaseOrderItems.majorCategory,
      middleCategory: purchaseOrderItems.middleCategory,
      minorCategory: purchaseOrderItems.minorCategory
    }).from(purchaseOrderItems).groupBy(
      purchaseOrderItems.majorCategory,
      purchaseOrderItems.middleCategory,
      purchaseOrderItems.minorCategory
    );
    const categoriesFromItems = await db.select({
      majorCategory: items.majorCategory,
      middleCategory: items.middleCategory,
      minorCategory: items.minorCategory
    }).from(items).groupBy(
      items.majorCategory,
      items.middleCategory,
      items.minorCategory
    );
    const allCategories = [...categoriesFromOrderItems, ...categoriesFromItems];
    const uniqueCategories = Array.from(
      new Map(
        allCategories.map((cat) => [
          `${cat.majorCategory}-${cat.middleCategory}-${cat.minorCategory}`,
          cat
        ])
      ).values()
    );
    const filteredCategories = uniqueCategories.filter((cat) => cat.majorCategory || cat.middleCategory || cat.minorCategory).sort((a, b) => {
      if (a.majorCategory !== b.majorCategory) {
        return (a.majorCategory || "").localeCompare(b.majorCategory || "");
      }
      if (a.middleCategory !== b.middleCategory) {
        return (a.middleCategory || "").localeCompare(b.middleCategory || "");
      }
      return (a.minorCategory || "").localeCompare(b.minorCategory || "");
    });
    res.json(filteredCategories);
  } catch (error) {
    console.error("Error fetching category hierarchy:", error);
    res.status(500).json({ error: "Failed to fetch category hierarchy" });
  }
});
router25.get("/", async (req, res) => {
  try {
    console.log("\u{1F4CB} Fetching all categories...");
    const categories = await db.select().from(itemCategories).where(eq25(itemCategories.isActive, true)).orderBy(itemCategories.displayOrder, itemCategories.categoryName);
    const majorCategories = categories.filter((c) => c.categoryType === "major");
    const middleCategories = categories.filter((c) => c.categoryType === "middle");
    const minorCategories = categories.filter((c) => c.categoryType === "minor");
    const hierarchicalData = majorCategories.map((major) => ({
      ...major,
      children: middleCategories.filter((middle) => middle.parentId === major.id).map((middle) => ({
        ...middle,
        children: minorCategories.filter((minor) => minor.parentId === middle.id)
      }))
    }));
    res.json({
      success: true,
      categories: hierarchicalData,
      flatCategories: categories
    });
  } catch (error) {
    console.error("\u274C Error fetching categories:", error);
    res.status(500).json({
      success: false,
      message: "\uCE74\uD14C\uACE0\uB9AC \uC870\uD68C \uC2E4\uD328",
      error: error.message
    });
  }
});
router25.get("/used-in-orders", async (req, res) => {
  try {
    console.log("\u{1F4CB} Fetching categories used in purchase orders...");
    const categoriesFromOrders = await db.select({
      majorCategory: purchaseOrderItems.majorCategory,
      middleCategory: purchaseOrderItems.middleCategory,
      minorCategory: purchaseOrderItems.minorCategory
    }).from(purchaseOrderItems).groupBy(
      purchaseOrderItems.majorCategory,
      purchaseOrderItems.middleCategory,
      purchaseOrderItems.minorCategory
    );
    console.log(`Raw categories from orders: ${JSON.stringify(categoriesFromOrders.slice(0, 5))}`);
    const filteredCategories = categoriesFromOrders.sort((a, b) => {
      const majorA = a.majorCategory || "zzz_null";
      const majorB = b.majorCategory || "zzz_null";
      if (majorA !== majorB) {
        return majorA.localeCompare(majorB);
      }
      const middleA = a.middleCategory || "zzz_null";
      const middleB = b.middleCategory || "zzz_null";
      if (middleA !== middleB) {
        return middleA.localeCompare(middleB);
      }
      const minorA = a.minorCategory || "zzz_null";
      const minorB = b.minorCategory || "zzz_null";
      return minorA.localeCompare(minorB);
    });
    console.log(`Found ${filteredCategories.length} categories used in orders`);
    res.json(filteredCategories);
  } catch (error) {
    console.error("Error fetching used categories:", error);
    res.status(500).json({ error: "Failed to fetch used categories" });
  }
});
router25.get("/:type", async (req, res) => {
  try {
    const { type } = req.params;
    const { parentId } = req.query;
    console.log(`\u{1F4CB} Fetching ${type} categories...`);
    let query = db.select().from(itemCategories).where(and14(
      eq25(itemCategories.categoryType, type),
      eq25(itemCategories.isActive, true)
    ));
    if (parentId) {
      query = query.where(eq25(itemCategories.parentId, parseInt(parentId)));
    }
    const categories = await query.orderBy(itemCategories.displayOrder, itemCategories.categoryName);
    res.json({
      success: true,
      categories
    });
  } catch (error) {
    console.error(`\u274C Error fetching ${req.params.type} categories:`, error);
    res.status(500).json({
      success: false,
      message: "\uCE74\uD14C\uACE0\uB9AC \uC870\uD68C \uC2E4\uD328",
      error: error.message
    });
  }
});
router25.post("/", async (req, res) => {
  try {
    const { categoryType, categoryName, parentId, displayOrder } = req.body;
    console.log("\u2795 Creating new category:", { categoryType, categoryName, parentId });
    const newCategory = await db.insert(itemCategories).values({
      categoryType,
      categoryName,
      parentId: parentId || null,
      displayOrder: displayOrder || 0,
      isActive: true
    }).returning();
    res.status(201).json({
      success: true,
      category: newCategory[0],
      message: "\uCE74\uD14C\uACE0\uB9AC\uAC00 \uC0DD\uC131\uB418\uC5C8\uC2B5\uB2C8\uB2E4."
    });
  } catch (error) {
    console.error("\u274C Error creating category:", error);
    res.status(500).json({
      success: false,
      message: "\uCE74\uD14C\uACE0\uB9AC \uC0DD\uC131 \uC2E4\uD328",
      error: error.message
    });
  }
});
router25.put("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { categoryName, displayOrder, isActive } = req.body;
    console.log(`\u{1F527} Updating category ${id}...`);
    const updatedCategory = await db.update(itemCategories).set({
      categoryName,
      displayOrder,
      isActive,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq25(itemCategories.id, parseInt(id))).returning();
    if (updatedCategory.length === 0) {
      return res.status(404).json({
        success: false,
        message: "\uCE74\uD14C\uACE0\uB9AC\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4."
      });
    }
    res.json({
      success: true,
      category: updatedCategory[0],
      message: "\uCE74\uD14C\uACE0\uB9AC\uAC00 \uC218\uC815\uB418\uC5C8\uC2B5\uB2C8\uB2E4."
    });
  } catch (error) {
    console.error("\u274C Error updating category:", error);
    res.status(500).json({
      success: false,
      message: "\uCE74\uD14C\uACE0\uB9AC \uC218\uC815 \uC2E4\uD328",
      error: error.message
    });
  }
});
router25.delete("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`\u{1F5D1}\uFE0F Deactivating category ${id}...`);
    const updatedCategory = await db.update(itemCategories).set({
      isActive: false,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq25(itemCategories.id, parseInt(id))).returning();
    if (updatedCategory.length === 0) {
      return res.status(404).json({
        success: false,
        message: "\uCE74\uD14C\uACE0\uB9AC\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4."
      });
    }
    res.json({
      success: true,
      message: "\uCE74\uD14C\uACE0\uB9AC\uAC00 \uC0AD\uC81C\uB418\uC5C8\uC2B5\uB2C8\uB2E4."
    });
  } catch (error) {
    console.error("\u274C Error deleting category:", error);
    res.status(500).json({
      success: false,
      message: "\uCE74\uD14C\uACE0\uB9AC \uC0AD\uC81C \uC2E4\uD328",
      error: error.message
    });
  }
});
router25.post("/validate-mapping", async (req, res) => {
  try {
    const { majorCategory, middleCategory, minorCategory } = req.body;
    console.log("\u{1F50D} \uBD84\uB958 \uB9E4\uD551 \uAC80\uC99D \uC694\uCCAD:", { majorCategory, middleCategory, minorCategory });
    const result = await validateCategoryMapping({
      majorCategory,
      middleCategory,
      minorCategory
    });
    res.json({
      success: true,
      result
    });
  } catch (error) {
    console.error("\u274C Error validating category mapping:", error);
    res.status(500).json({
      success: false,
      message: "\uBD84\uB958 \uB9E4\uD551 \uAC80\uC99D \uC2E4\uD328",
      error: error.message
    });
  }
});
router25.post("/validate-mapping-batch", async (req, res) => {
  try {
    const { categories } = req.body;
    if (!Array.isArray(categories)) {
      return res.status(400).json({
        success: false,
        message: "categories \uD544\uB4DC\uB294 \uBC30\uC5F4\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4."
      });
    }
    console.log(`\u{1F50D} \uBC30\uCE58 \uBD84\uB958 \uB9E4\uD551 \uAC80\uC99D \uC694\uCCAD (${categories.length}\uAC1C \uD56D\uBAA9)`);
    const results = await validateCategoriesBatch(categories);
    const stats = {
      total: results.length,
      exactMatch: results.filter((r) => r.status === "exact_match").length,
      partialMatch: results.filter((r) => r.status === "partial_match").length,
      noMatch: results.filter((r) => r.status === "no_match").length,
      invalidHierarchy: results.filter((r) => r.status === "invalid_hierarchy").length,
      averageConfidence: Math.round(
        results.reduce((sum2, r) => sum2 + r.confidence, 0) / results.length
      )
    };
    res.json({
      success: true,
      results,
      stats
    });
  } catch (error) {
    console.error("\u274C Error validating category mapping batch:", error);
    res.status(500).json({
      success: false,
      message: "\uBC30\uCE58 \uBD84\uB958 \uB9E4\uD551 \uAC80\uC99D \uC2E4\uD328",
      error: error.message
    });
  }
});
var categories_default = router25;

// server/routes/approval-settings.ts
init_db();
init_schema();
import { Router as Router25 } from "express";
import { eq as eq26, and as and15, desc as desc11, asc as asc5 } from "drizzle-orm";
import { z as z6 } from "zod";
var router26 = Router25();
router26.get("/workflow-settings/:companyId", requireAuth, async (req, res) => {
  try {
    const { companyId } = req.params;
    const settings = await db.select().from(approvalWorkflowSettings).where(
      and15(
        eq26(approvalWorkflowSettings.companyId, parseInt(companyId)),
        eq26(approvalWorkflowSettings.isActive, true)
      )
    ).orderBy(desc11(approvalWorkflowSettings.createdAt)).limit(1);
    return res.json({
      success: true,
      data: settings[0] || null
    });
  } catch (error) {
    console.error("\uC2B9\uC778 \uC6CC\uD06C\uD50C\uB85C \uC124\uC815 \uC870\uD68C \uC624\uB958:", error);
    return res.status(500).json({
      error: "\uC2B9\uC778 \uC6CC\uD06C\uD50C\uB85C \uC124\uC815\uC744 \uC870\uD68C\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
router26.post("/workflow-settings", requireAuth, requireAdmin, async (req, res) => {
  try {
    const validatedData = insertApprovalWorkflowSettingsSchema.parse({
      ...req.body,
      createdBy: req.user.id
    });
    const existingSettings = await db.select().from(approvalWorkflowSettings).where(
      and15(
        eq26(approvalWorkflowSettings.companyId, validatedData.companyId),
        eq26(approvalWorkflowSettings.isActive, true)
      )
    ).limit(1);
    let result;
    if (existingSettings.length > 0) {
      result = await db.update(approvalWorkflowSettings).set({
        ...validatedData,
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq26(approvalWorkflowSettings.id, existingSettings[0].id)).returning();
    } else {
      result = await db.insert(approvalWorkflowSettings).values(validatedData).returning();
    }
    return res.json({
      success: true,
      data: result[0]
    });
  } catch (error) {
    console.error("\uC2B9\uC778 \uC6CC\uD06C\uD50C\uB85C \uC124\uC815 \uC800\uC7A5 \uC624\uB958:", error);
    if (error instanceof z6.ZodError) {
      return res.status(400).json({
        error: "\uC785\uB825 \uB370\uC774\uD130\uAC00 \uC62C\uBC14\uB974\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4",
        details: error.errors
      });
    }
    return res.status(500).json({
      error: "\uC2B9\uC778 \uC6CC\uD06C\uD50C\uB85C \uC124\uC815\uC744 \uC800\uC7A5\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
router26.get("/step-templates/:companyId", requireAuth, async (req, res) => {
  try {
    const { companyId } = req.params;
    const { templateName } = req.query;
    let query = db.select().from(approvalStepTemplates).where(
      and15(
        eq26(approvalStepTemplates.companyId, parseInt(companyId)),
        eq26(approvalStepTemplates.isActive, true)
      )
    );
    if (templateName) {
      query = query.where(
        and15(
          eq26(approvalStepTemplates.companyId, parseInt(companyId)),
          eq26(approvalStepTemplates.isActive, true),
          eq26(approvalStepTemplates.templateName, templateName)
        )
      );
    }
    const templates = await query.orderBy(
      asc5(approvalStepTemplates.templateName),
      asc5(approvalStepTemplates.stepOrder)
    );
    return res.json({
      success: true,
      data: templates
    });
  } catch (error) {
    console.error("\uC2B9\uC778 \uB2E8\uACC4 \uD15C\uD50C\uB9BF \uC870\uD68C \uC624\uB958:", error);
    return res.status(500).json({
      error: "\uC2B9\uC778 \uB2E8\uACC4 \uD15C\uD50C\uB9BF\uC744 \uC870\uD68C\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
router26.post("/step-templates", requireAuth, requireAdmin, async (req, res) => {
  try {
    const validatedData = insertApprovalStepTemplateSchema.parse(req.body);
    const result = await db.insert(approvalStepTemplates).values(validatedData).returning();
    return res.json({
      success: true,
      data: result[0]
    });
  } catch (error) {
    console.error("\uC2B9\uC778 \uB2E8\uACC4 \uD15C\uD50C\uB9BF \uC0DD\uC131 \uC624\uB958:", error);
    if (error instanceof z6.ZodError) {
      return res.status(400).json({
        error: "\uC785\uB825 \uB370\uC774\uD130\uAC00 \uC62C\uBC14\uB974\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4",
        details: error.errors
      });
    }
    return res.status(500).json({
      error: "\uC2B9\uC778 \uB2E8\uACC4 \uD15C\uD50C\uB9BF\uC744 \uC0DD\uC131\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
router26.put("/step-templates/:id", requireAuth, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const validatedData = insertApprovalStepTemplateSchema.parse(req.body);
    const result = await db.update(approvalStepTemplates).set({
      ...validatedData,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq26(approvalStepTemplates.id, parseInt(id))).returning();
    if (result.length === 0) {
      return res.status(404).json({ error: "\uC2B9\uC778 \uB2E8\uACC4 \uD15C\uD50C\uB9BF\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4" });
    }
    return res.json({
      success: true,
      data: result[0]
    });
  } catch (error) {
    console.error("\uC2B9\uC778 \uB2E8\uACC4 \uD15C\uD50C\uB9BF \uC218\uC815 \uC624\uB958:", error);
    if (error instanceof z6.ZodError) {
      return res.status(400).json({
        error: "\uC785\uB825 \uB370\uC774\uD130\uAC00 \uC62C\uBC14\uB974\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4",
        details: error.errors
      });
    }
    return res.status(500).json({
      error: "\uC2B9\uC778 \uB2E8\uACC4 \uD15C\uD50C\uB9BF\uC744 \uC218\uC815\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
router26.delete("/step-templates/:id", requireAuth, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const result = await db.update(approvalStepTemplates).set({
      isActive: false,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq26(approvalStepTemplates.id, parseInt(id))).returning();
    if (result.length === 0) {
      return res.status(404).json({ error: "\uC2B9\uC778 \uB2E8\uACC4 \uD15C\uD50C\uB9BF\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4" });
    }
    return res.json({
      success: true,
      message: "\uC2B9\uC778 \uB2E8\uACC4 \uD15C\uD50C\uB9BF\uC774 \uC0AD\uC81C\uB418\uC5C8\uC2B5\uB2C8\uB2E4"
    });
  } catch (error) {
    console.error("\uC2B9\uC778 \uB2E8\uACC4 \uD15C\uD50C\uB9BF \uC0AD\uC81C \uC624\uB958:", error);
    return res.status(500).json({
      error: "\uC2B9\uC778 \uB2E8\uACC4 \uD15C\uD50C\uB9BF\uC744 \uC0AD\uC81C\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
router26.get("/step-instances/:orderId", requireAuth, async (req, res) => {
  try {
    const { orderId } = req.params;
    const instances = await db.select().from(approvalStepInstances2).where(
      and15(
        eq26(approvalStepInstances2.orderId, parseInt(orderId)),
        eq26(approvalStepInstances2.isActive, true)
      )
    ).orderBy(asc5(approvalStepInstances2.stepOrder));
    return res.json({
      success: true,
      data: instances
    });
  } catch (error) {
    console.error("\uC2B9\uC778 \uB2E8\uACC4 \uC778\uC2A4\uD134\uC2A4 \uC870\uD68C \uC624\uB958:", error);
    return res.status(500).json({
      error: "\uC2B9\uC778 \uB2E8\uACC4 \uC778\uC2A4\uD134\uC2A4\uB97C \uC870\uD68C\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
router26.post("/step-instances", requireAuth, async (req, res) => {
  try {
    const { orderId, templateName, companyId } = req.body;
    if (!orderId || !templateName || !companyId) {
      return res.status(400).json({
        error: "orderId, templateName, companyId\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4"
      });
    }
    const templates = await db.select().from(approvalStepTemplates).where(
      and15(
        eq26(approvalStepTemplates.companyId, companyId),
        eq26(approvalStepTemplates.templateName, templateName),
        eq26(approvalStepTemplates.isActive, true)
      )
    ).orderBy(asc5(approvalStepTemplates.stepOrder));
    if (templates.length === 0) {
      return res.status(404).json({
        error: "\uC2B9\uC778 \uB2E8\uACC4 \uD15C\uD50C\uB9BF\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4"
      });
    }
    const instancesData = templates.map((template) => ({
      orderId: parseInt(orderId),
      templateId: template.id,
      stepOrder: template.stepOrder,
      requiredRole: template.requiredRole,
      status: "pending"
    }));
    const result = await db.insert(approvalStepInstances2).values(instancesData).returning();
    return res.json({
      success: true,
      data: result
    });
  } catch (error) {
    console.error("\uC2B9\uC778 \uB2E8\uACC4 \uC778\uC2A4\uD134\uC2A4 \uC0DD\uC131 \uC624\uB958:", error);
    return res.status(500).json({
      error: "\uC2B9\uC778 \uB2E8\uACC4 \uC778\uC2A4\uD134\uC2A4\uB97C \uC0DD\uC131\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
router26.put("/step-instances/:id", requireAuth, async (req, res) => {
  try {
    const { id } = req.params;
    const { status, comments, rejectionReason } = req.body;
    if (!["approved", "rejected", "skipped"].includes(status)) {
      return res.status(400).json({
        error: "\uC720\uD6A8\uD558\uC9C0 \uC54A\uC740 \uC0C1\uD0DC\uC785\uB2C8\uB2E4"
      });
    }
    const updateData = {
      status,
      approvedBy: req.user.id,
      approvedAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    };
    if (comments) updateData.comments = comments;
    if (rejectionReason) updateData.rejectionReason = rejectionReason;
    const result = await db.update(approvalStepInstances2).set(updateData).where(eq26(approvalStepInstances2.id, parseInt(id))).returning();
    if (result.length === 0) {
      return res.status(404).json({ error: "\uC2B9\uC778 \uB2E8\uACC4 \uC778\uC2A4\uD134\uC2A4\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4" });
    }
    return res.json({
      success: true,
      data: result[0]
    });
  } catch (error) {
    console.error("\uC2B9\uC778 \uB2E8\uACC4 \uC778\uC2A4\uD134\uC2A4 \uC218\uC815 \uC624\uB958:", error);
    return res.status(500).json({
      error: "\uC2B9\uC778 \uB2E8\uACC4 \uC778\uC2A4\uD134\uC2A4\uB97C \uC218\uC815\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
var approval_settings_default = router26;

// server/routes/approval-authorities.ts
import { Router as Router26 } from "express";
init_db();
init_schema();
import { eq as eq27, and as and16, desc as desc12 } from "drizzle-orm";
import { z as z7 } from "zod";
var router27 = Router26();
router27.get("/approval-authorities", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    console.log("\u{1F4CB} Fetching approval authorities...");
    const authorities = await db.select({
      id: approvalAuthorities.id,
      role: approvalAuthorities.role,
      maxAmount: approvalAuthorities.maxAmount,
      description: approvalAuthorities.description,
      isActive: approvalAuthorities.isActive,
      createdAt: approvalAuthorities.createdAt,
      updatedAt: approvalAuthorities.updatedAt
    }).from(approvalAuthorities).orderBy(desc12(approvalAuthorities.maxAmount));
    const formattedAuthorities = authorities.map((auth) => ({
      ...auth,
      maxAmount: parseFloat(auth.maxAmount),
      createdAt: auth.createdAt?.toISOString(),
      updatedAt: auth.updatedAt?.toISOString()
    }));
    console.log(`\u2705 Successfully returning ${formattedAuthorities.length} approval authorities`);
    res.json(formattedAuthorities);
  } catch (error) {
    console.error("\u274C Error fetching approval authorities:", error);
    res.status(500).json({
      message: "Failed to fetch approval authorities",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router27.post("/approval-authorities", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    console.log("\u{1F4DD} Creating new approval authority:", req.body);
    const validatedData = insertApprovalAuthoritySchema.parse(req.body);
    const existingAuthority = await db.select().from(approvalAuthorities).where(
      and16(
        eq27(approvalAuthorities.role, validatedData.role),
        eq27(approvalAuthorities.isActive, true)
      )
    ).limit(1);
    if (existingAuthority.length > 0) {
      return res.status(400).json({
        message: "\uD574\uB2F9 \uC5ED\uD560\uC5D0 \uB300\uD55C \uC2B9\uC778 \uAD8C\uD55C\uC774 \uC774\uBBF8 \uC874\uC7AC\uD569\uB2C8\uB2E4"
      });
    }
    const result = await db.insert(approvalAuthorities).values(validatedData).returning();
    const newAuthority = {
      ...result[0],
      maxAmount: parseFloat(result[0].maxAmount),
      createdAt: result[0].createdAt?.toISOString(),
      updatedAt: result[0].updatedAt?.toISOString()
    };
    console.log("\u2705 Successfully created approval authority:", newAuthority.id);
    res.status(201).json(newAuthority);
  } catch (error) {
    console.error("\u274C Error creating approval authority:", error);
    if (error instanceof z7.ZodError) {
      return res.status(400).json({
        message: "\uC785\uB825 \uB370\uC774\uD130\uAC00 \uC62C\uBC14\uB974\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4",
        details: error.errors
      });
    }
    res.status(500).json({
      message: "Failed to create approval authority",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router27.put("/approval-authorities/:id", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    console.log(`\u{1F4DD} Updating approval authority ${id}:`, req.body);
    const validatedData = insertApprovalAuthoritySchema.parse(req.body);
    const result = await db.update(approvalAuthorities).set({
      ...validatedData,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq27(approvalAuthorities.id, id)).returning();
    if (result.length === 0) {
      return res.status(404).json({
        message: "\uC2B9\uC778 \uAD8C\uD55C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4"
      });
    }
    const updatedAuthority = {
      ...result[0],
      maxAmount: parseFloat(result[0].maxAmount),
      createdAt: result[0].createdAt?.toISOString(),
      updatedAt: result[0].updatedAt?.toISOString()
    };
    console.log("\u2705 Successfully updated approval authority:", id);
    res.json(updatedAuthority);
  } catch (error) {
    console.error("\u274C Error updating approval authority:", error);
    if (error instanceof z7.ZodError) {
      return res.status(400).json({
        message: "\uC785\uB825 \uB370\uC774\uD130\uAC00 \uC62C\uBC14\uB974\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4",
        details: error.errors
      });
    }
    res.status(500).json({
      message: "Failed to update approval authority",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router27.delete("/approval-authorities/:id", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    console.log(`\u{1F5D1}\uFE0F Deactivating approval authority ${id}`);
    const result = await db.update(approvalAuthorities).set({
      isActive: false,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq27(approvalAuthorities.id, id)).returning();
    if (result.length === 0) {
      return res.status(404).json({
        message: "\uC2B9\uC778 \uAD8C\uD55C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4"
      });
    }
    console.log("\u2705 Successfully deactivated approval authority:", id);
    res.json({
      message: "\uC2B9\uC778 \uAD8C\uD55C\uC774 \uBE44\uD65C\uC131\uD654\uB418\uC5C8\uC2B5\uB2C8\uB2E4"
    });
  } catch (error) {
    console.error("\u274C Error deactivating approval authority:", error);
    res.status(500).json({
      message: "Failed to deactivate approval authority",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router27.get("/approval-authorities/role/:role", requireAuth, requireRole(["admin", "executive", "hq_management", "project_manager"]), async (req, res) => {
  try {
    const { role } = req.params;
    console.log(`\u{1F4CB} Fetching approval authority for role: ${role}`);
    const authority = await db.select().from(approvalAuthorities).where(
      and16(
        eq27(approvalAuthorities.role, role),
        eq27(approvalAuthorities.isActive, true)
      )
    ).limit(1);
    if (authority.length === 0) {
      return res.json({
        role,
        maxAmount: 0,
        hasAuthority: false,
        message: "\uD574\uB2F9 \uC5ED\uD560\uC5D0 \uB300\uD55C \uC2B9\uC778 \uAD8C\uD55C\uC774 \uC124\uC815\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4"
      });
    }
    const result = {
      ...authority[0],
      maxAmount: parseFloat(authority[0].maxAmount),
      hasAuthority: true,
      createdAt: authority[0].createdAt?.toISOString(),
      updatedAt: authority[0].updatedAt?.toISOString()
    };
    console.log(`\u2705 Found approval authority for ${role}: max ${result.maxAmount}`);
    res.json(result);
  } catch (error) {
    console.error("\u274C Error fetching role approval authority:", error);
    res.status(500).json({
      message: "Failed to fetch role approval authority",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router27.post("/approval-authorities/check-permission", requireAuth, requireRole(["admin", "executive", "hq_management", "project_manager"]), async (req, res) => {
  try {
    const { role, amount, userId } = req.body;
    const checkRole = role || req.user?.role;
    const checkAmount = parseFloat(amount);
    console.log(`\u{1F50D} Checking approval permission - Role: ${checkRole}, Amount: ${checkAmount}`);
    if (!checkRole || isNaN(checkAmount)) {
      return res.status(400).json({
        message: "\uC5ED\uD560\uACFC \uAE08\uC561 \uC815\uBCF4\uAC00 \uD544\uC694\uD569\uB2C8\uB2E4"
      });
    }
    const authority = await db.select().from(approvalAuthorities).where(
      and16(
        eq27(approvalAuthorities.role, checkRole),
        eq27(approvalAuthorities.isActive, true)
      )
    ).limit(1);
    let canApprove = false;
    let maxAmount = 0;
    let message = "";
    if (authority.length === 0) {
      canApprove = checkRole === "admin";
      message = canApprove ? "\uAD00\uB9AC\uC790\uB294 \uBAA8\uB4E0 \uAE08\uC561\uC744 \uC2B9\uC778\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4" : "\uD574\uB2F9 \uC5ED\uD560\uC5D0 \uB300\uD55C \uC2B9\uC778 \uAD8C\uD55C\uC774 \uC124\uC815\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4";
    } else {
      maxAmount = parseFloat(authority[0].maxAmount);
      canApprove = checkAmount <= maxAmount;
      message = canApprove ? `\uC2B9\uC778 \uAC00\uB2A5 (\uD55C\uB3C4: ${maxAmount.toLocaleString()}\uC6D0)` : `\uC2B9\uC778 \uBD88\uAC00 (\uD55C\uB3C4 \uCD08\uACFC: ${maxAmount.toLocaleString()}\uC6D0)`;
    }
    const result = {
      canApprove,
      role: checkRole,
      amount: checkAmount,
      maxAmount,
      message,
      hasAuthority: authority.length > 0
    };
    console.log(`\u2705 Permission check result:`, result);
    res.json(result);
  } catch (error) {
    console.error("\u274C Error checking approval permission:", error);
    res.status(500).json({
      message: "Failed to check approval permission",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
var approval_authorities_default = router27;

// server/routes/notifications.ts
import { Router as Router27 } from "express";
var router28 = Router27();
router28.get("/notifications", requireAuth, async (req, res) => {
  try {
    const userId = req.user.id;
    const limit = parseInt(req.query.limit) || 20;
    console.log(`\u{1F4EC} Fetching notifications for user ${userId}`);
    const notifications2 = await NotificationService.getUserNotifications(userId, limit);
    res.json({
      success: true,
      data: notifications2
    });
  } catch (error) {
    console.error("\u274C Error fetching notifications:", error);
    res.status(500).json({
      success: false,
      message: "Failed to fetch notifications",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router28.get("/notifications/unread-count", async (req, res) => {
  try {
    const token = extractToken(req.headers.authorization, req.cookies);
    if (!token) {
      return res.json({
        success: true,
        count: 0,
        authenticated: false
      });
    }
    const payload = verifyToken(token);
    if (!payload) {
      return res.json({
        success: true,
        count: 0,
        authenticated: false
      });
    }
    const user = await storage.getUser(payload.userId);
    if (!user) {
      return res.json({
        success: true,
        count: 0,
        authenticated: false
      });
    }
    const count5 = await NotificationService.getUnreadNotificationCount(user.id);
    res.json({
      success: true,
      count: count5,
      authenticated: true
    });
  } catch (error) {
    console.error("\u274C Error getting unread count:", error);
    res.json({
      success: true,
      count: 0,
      authenticated: false
    });
  }
});
router28.put("/notifications/:id/read", requireAuth, async (req, res) => {
  try {
    const notificationId = parseInt(req.params.id);
    const userId = req.user.id;
    console.log(`\u{1F4D6} Marking notification ${notificationId} as read for user ${userId}`);
    const success = await NotificationService.markNotificationAsRead(notificationId, userId);
    if (success) {
      res.json({
        success: true,
        message: "Notification marked as read"
      });
    } else {
      res.status(404).json({
        success: false,
        message: "Notification not found or already read"
      });
    }
  } catch (error) {
    console.error("\u274C Error marking notification as read:", error);
    res.status(500).json({
      success: false,
      message: "Failed to mark notification as read",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
router28.put("/notifications/mark-all-read", requireAuth, async (req, res) => {
  try {
    const userId = req.user.id;
    console.log(`\u{1F4D6} Marking all notifications as read for user ${userId}`);
    const count5 = await NotificationService.markAllNotificationsAsRead(userId);
    res.json({
      success: true,
      message: `Marked ${count5} notifications as read`,
      markedCount: count5
    });
  } catch (error) {
    console.error("\u274C Error marking all notifications as read:", error);
    res.status(500).json({
      success: false,
      message: "Failed to mark all notifications as read",
      error: process.env.NODE_ENV === "development" ? error?.message : void 0
    });
  }
});
var notifications_default = router28;

// server/routes/orders-simple.ts
init_db();
init_schema();
import { Router as Router28 } from "express";
import { eq as eq28, and as and17, desc as desc13, count as count4 } from "drizzle-orm";
init_professional_pdf_generation_service();
import multer6 from "multer";
import path16 from "path";
import fs19 from "fs/promises";
import { readFileSync } from "fs";
import { z as z8 } from "zod";
var router29 = Router28();
var storage5 = multer6.diskStorage({
  destination: async (req, file, cb) => {
    const uploadDir2 = process.env.VERCEL ? path16.join("/tmp", "uploads", "excel-simple") : path16.join(process.cwd(), "uploads", "excel-simple");
    await fs19.mkdir(uploadDir2, { recursive: true });
    cb(null, uploadDir2);
  },
  filename: (req, file, cb) => {
    const timestamp2 = Date.now();
    const decodedName = decodeKoreanFilename(file.originalname);
    const ext = path16.extname(decodedName);
    const basename = path16.basename(decodedName, ext);
    cb(null, `${timestamp2}-${basename}${ext}`);
  }
});
var upload6 = multer6({
  storage: storage5,
  limits: {
    fileSize: 10 * 1024 * 1024
    // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    const decodedName = decodeKoreanFilename(file.originalname);
    file.originalname = decodedName;
    const ext = path16.extname(decodedName).toLowerCase();
    if ([".xlsx", ".xls", ".xlsm"].includes(ext)) {
      cb(null, true);
    } else {
      cb(new Error("Only Excel files are allowed"));
    }
  }
});
var OrderItemSchema = z8.object({
  itemName: z8.string().optional(),
  specification: z8.string().optional(),
  unit: z8.string().optional(),
  quantity: z8.number().default(0),
  unitPrice: z8.number().default(0),
  totalAmount: z8.number().default(0),
  remarks: z8.string().optional()
});
var OrderDataSchema = z8.object({
  rowIndex: z8.number(),
  orderDate: z8.string().optional(),
  deliveryDate: z8.string().optional(),
  vendorName: z8.string().optional(),
  vendorEmail: z8.string().optional(),
  deliveryPlace: z8.string().optional(),
  deliveryEmail: z8.string().optional(),
  projectName: z8.string().optional(),
  majorCategory: z8.string().optional(),
  middleCategory: z8.string().optional(),
  minorCategory: z8.string().optional(),
  items: z8.array(OrderItemSchema),
  notes: z8.string().optional(),
  isValid: z8.boolean().optional(),
  errors: z8.array(z8.string()).optional()
});
router29.post("/orders/bulk-create-simple", requireAuth, upload6.single("excelFile"), async (req, res) => {
  console.log("\u{1F680} /bulk-create-simple - REQUEST START");
  console.log("\u{1F4CB} Request headers:", {
    "content-type": req.headers["content-type"],
    "content-length": req.headers["content-length"],
    "user-agent": req.headers["user-agent"]
  });
  console.log("\u{1F4E5} Raw body keys:", Object.keys(req.body));
  console.log("\u{1F4E5} Raw body:", req.body);
  console.log("\u{1F4E5} Orders field exists:", "orders" in req.body);
  console.log("\u{1F4E5} Orders field type:", typeof req.body.orders);
  console.log("\u{1F4E5} Orders field value:", req.body.orders);
  console.log("\u{1F4C1} Received file:", req.file);
  console.log("\u{1F4C1} File details:", {
    originalname: req.file?.originalname,
    filename: req.file?.filename,
    mimetype: req.file?.mimetype,
    size: req.file?.size,
    path: req.file?.path
  });
  try {
    let ordersData;
    if (!req.body.orders) {
      return res.status(400).json({ error: "No orders data provided" });
    }
    try {
      ordersData = JSON.parse(req.body.orders);
    } catch (parseError) {
      console.error("\u274C JSON parse error:", parseError);
      console.error("\u274C Raw orders data:", req.body.orders);
      return res.status(400).json({
        error: "Invalid JSON format in orders data",
        details: parseError instanceof Error ? parseError.message : String(parseError)
      });
    }
    const validatedOrders = z8.array(OrderDataSchema).parse(ordersData);
    const sendEmail = req.body.sendEmail === "true";
    const isDraft = req.body.isDraft === "true";
    if (validatedOrders.length === 0) {
      return res.status(400).json({ error: "No orders to create" });
    }
    const savedOrders = [];
    const errors = [];
    const emailsToSend = [];
    let defaultProject;
    try {
      console.log("\u{1F50D} Fetching default project...");
      defaultProject = await db.select().from(projects).where(eq28(projects.projectName, "\uAE30\uBCF8 \uD504\uB85C\uC81D\uD2B8")).then((rows) => rows[0]);
      console.log("\u2705 Default project fetch successful");
    } catch (error) {
      console.error("\u274C Error fetching default project:", error);
      throw error;
    }
    if (!defaultProject) {
      try {
        console.log("\u{1F50D} Creating default project...");
        const [newProject] = await db.insert(projects).values({
          projectName: "\uAE30\uBCF8 \uD504\uB85C\uC81D\uD2B8",
          projectCode: "DEFAULT",
          status: "active",
          startDate: (/* @__PURE__ */ new Date()).toISOString().split("T")[0]
        }).returning();
        defaultProject = newProject;
        console.log("\u2705 Default project creation successful");
      } catch (error) {
        console.error("\u274C Error creating default project:", error);
        throw error;
      }
    }
    for (const orderData of validatedOrders) {
      try {
        let vendor = null;
        if (orderData.vendorName) {
          const existingVendor = await db.select().from(vendors).where(eq28(vendors.name, orderData.vendorName)).then((rows) => rows[0]);
          if (existingVendor) {
            vendor = existingVendor;
          } else {
            const [newVendor] = await db.insert(vendors).values({
              name: orderData.vendorName,
              contactPerson: "\uB2F4\uB2F9\uC790",
              // Required field
              email: orderData.vendorEmail || "unknown@example.com"
              // Required field
            }).returning();
            vendor = newVendor;
          }
        }
        let project = defaultProject;
        if (orderData.projectName) {
          const existingProject = await db.select().from(projects).where(eq28(projects.projectName, orderData.projectName)).then((rows) => rows[0]);
          if (existingProject) {
            project = existingProject;
          }
        }
        const now = /* @__PURE__ */ new Date();
        const year = now.getFullYear();
        const timestamp2 = now.getTime();
        let orderNumber;
        let attempts = 0;
        const maxAttempts = 10;
        do {
          const orderCount = await db.select().from(purchaseOrders).then((rows) => rows.length);
          const sequenceNumber = orderCount + 1 + attempts;
          orderNumber = `PO-${year}-${String(sequenceNumber).padStart(5, "0")}`;
          const existingOrder = await db.select().from(purchaseOrders).where(eq28(purchaseOrders.orderNumber, orderNumber)).then((rows) => rows[0]);
          if (!existingOrder) {
            break;
          }
          attempts++;
        } while (attempts < maxAttempts);
        if (attempts >= maxAttempts) {
          orderNumber = `PO-${year}-${String(timestamp2).slice(-5)}`;
        }
        const totalAmount = orderData.items.reduce((sum2, item) => {
          return sum2 + (item.quantity || 0) * (item.unitPrice || 0);
        }, 0);
        let orderStatus = "draft";
        let approvalStatus = "not_required";
        let approvalBypassReason = null;
        let legacyStatus = "pending";
        if (isDraft) {
          orderStatus = "draft";
          approvalStatus = "not_required";
          legacyStatus = "draft";
        } else {
          orderStatus = sendEmail ? "sent" : "created";
          approvalStatus = "not_required";
          approvalBypassReason = "direct_approval";
          legacyStatus = sendEmail ? "sent" : "approved";
        }
        const [newOrder] = await db.insert(purchaseOrders).values({
          orderNumber,
          projectId: project.id,
          vendorId: vendor?.id || null,
          userId: req.user.id,
          orderDate: orderData.orderDate || (/* @__PURE__ */ new Date()).toISOString().split("T")[0],
          // Required field
          status: legacyStatus,
          // Use correct legacy status values
          orderStatus,
          // New order status
          approvalStatus,
          // New approval status
          approvalBypassReason,
          // Reason for bypassing approval
          totalAmount,
          deliveryDate: orderData.deliveryDate || null,
          notes: [
            orderData.notes,
            orderData.majorCategory ? `\uB300\uBD84\uB958: ${orderData.majorCategory}` : null,
            orderData.middleCategory ? `\uC911\uBD84\uB958: ${orderData.middleCategory}` : null,
            orderData.minorCategory ? `\uC18C\uBD84\uB958: ${orderData.minorCategory}` : null,
            orderData.deliveryPlace ? `\uB0A9\uD488\uCC98: ${orderData.deliveryPlace}` : null,
            orderData.deliveryEmail ? `\uB0A9\uD488\uCC98 \uC774\uBA54\uC77C: ${orderData.deliveryEmail}` : null
          ].filter(Boolean).join("\n") || null,
          createdAt: /* @__PURE__ */ new Date(),
          updatedAt: /* @__PURE__ */ new Date()
        }).returning();
        if (orderData.items.length > 0) {
          const itemsToInsert = orderData.items.filter((item) => item.itemName).map((item) => {
            return {
              orderId: newOrder.id,
              itemName: item.itemName,
              specification: item.specification || null,
              unit: item.unit || null,
              quantity: item.quantity || 0,
              unitPrice: item.unitPrice || 0,
              totalAmount: (item.quantity || 0) * (item.unitPrice || 0),
              majorCategory: orderData.majorCategory || null,
              middleCategory: orderData.middleCategory || null,
              minorCategory: orderData.minorCategory || null,
              notes: item.remarks || null
              // Use 'notes' field instead of 'remarks'
            };
          });
          if (itemsToInsert.length > 0) {
            await db.insert(purchaseOrderItems).values(itemsToInsert);
          }
        }
        try {
          console.log(`\u{1F4C4} Generating Professional PDF for order ${newOrder.orderNumber}`);
          const pdfResult = await ProfessionalPDFGenerationService.generateProfessionalPurchaseOrderPDF(
            newOrder.id,
            req.user.id
          );
          if (pdfResult.success) {
            console.log(`\u2705 Professional PDF generated successfully for order ${newOrder.orderNumber}`);
            console.log(`\u{1F4C4} PDF Attachment ID: ${pdfResult.attachmentId}`);
          } else {
            console.error(`\u26A0\uFE0F Professional PDF generation failed for order ${newOrder.orderNumber}:`, pdfResult.error);
          }
        } catch (pdfError) {
          console.error(`\u274C Error generating Professional PDF for order ${newOrder.orderNumber}:`, pdfError);
        }
        if (req.file) {
          const decodedOriginalName = req.file.originalname;
          const { removeAllInputSheets: removeAllInputSheets2 } = (init_excel_input_sheet_remover(), __toCommonJS(excel_input_sheet_remover_exports));
          let fileToStore = req.file.path;
          let fileBuffer;
          let processedFileName = req.file.filename;
          if (req.file.mimetype === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" || req.file.originalname.toLowerCase().endsWith(".xlsx")) {
            console.log("\u{1F4CA} Excel \uD30C\uC77C \uAC10\uC9C0, Input \uC2DC\uD2B8 \uC81C\uAC70 \uCC98\uB9AC \uC2DC\uC791...");
            const processedPath = req.file.path.replace(/\.(xlsx?)$/i, "_processed.$1");
            const removeResult = await removeAllInputSheets2(req.file.path, processedPath);
            if (removeResult.success && existsSync(processedPath)) {
              console.log(`\u2705 Input \uC2DC\uD2B8 \uC81C\uAC70 \uC644\uB8CC: ${removeResult.removedSheets.join(", ")}`);
              fileToStore = processedPath;
              fileBuffer = readFileSync(processedPath);
              processedFileName = req.file.filename.replace(/\.(xlsx?)$/i, "_processed.$1");
              try {
                unlinkSync(req.file.path);
              } catch (e) {
                console.warn("\uC6D0\uBCF8 \uD30C\uC77C \uC0AD\uC81C \uC2E4\uD328:", e);
              }
            } else {
              console.warn("\u26A0\uFE0F Input \uC2DC\uD2B8 \uC81C\uAC70 \uC2E4\uD328, \uC6D0\uBCF8 \uD30C\uC77C \uC0AC\uC6A9:", removeResult.error);
              fileBuffer = readFileSync(req.file.path);
            }
          } else {
            fileBuffer = readFileSync(req.file.path);
          }
          console.log(`\u{1F4CE} Saving Excel file attachment for order ${newOrder.orderNumber}:`, {
            orderId: newOrder.id,
            originalName: decodedOriginalName,
            storedName: processedFileName,
            filePath: fileToStore,
            fileSize: fileBuffer.length,
            mimeType: req.file.mimetype,
            uploadedBy: req.user.id
          });
          try {
            const relativePath = process.env.VERCEL ? processedFileName : fileToStore;
            let fileData;
            if (process.env.VERCEL) {
              fileData = fileBuffer.toString("base64");
              console.log(`\u{1F4CE} File data encoded for Vercel: ${Math.round(fileBuffer.length / 1024)}KB -> ${Math.round(fileData.length / 1024)}KB base64`);
            }
            const [savedAttachment] = await db.insert(attachments).values({
              orderId: newOrder.id,
              originalName: decodedOriginalName,
              storedName: processedFileName,
              filePath: relativePath,
              fileSize: fileBuffer.length,
              mimeType: req.file.mimetype,
              uploadedBy: req.user.id,
              uploadedAt: /* @__PURE__ */ new Date(),
              ...fileData && { fileData }
              // Include fileData only if available
            }).returning();
            if (fileToStore !== req.file.path && existsSync(fileToStore)) {
              try {
                unlinkSync(fileToStore);
              } catch (e) {
                console.warn("\uCC98\uB9AC\uB41C \uC784\uC2DC \uD30C\uC77C \uC0AD\uC81C \uC2E4\uD328:", e);
              }
            }
            console.log(`\u2705 Excel file attachment saved with ID ${savedAttachment.id} for order ${newOrder.orderNumber}`);
          } catch (attachmentError) {
            console.error(`\u274C Failed to save Excel attachment for order ${newOrder.orderNumber}:`, attachmentError);
            console.log("\u26A0\uFE0F Continuing without attachment...");
          }
        }
        await db.insert(orderHistory).values({
          orderId: newOrder.id,
          userId: req.user.id,
          action: sendEmail ? "sent" : "created",
          changes: {
            source: "excel_simple_upload",
            rowIndex: orderData.rowIndex,
            sendEmail
          },
          createdAt: /* @__PURE__ */ new Date()
        });
        if (sendEmail && vendor && orderData.vendorEmail) {
          emailsToSend.push({
            orderId: newOrder.id,
            orderNumber: newOrder.orderNumber,
            vendorName: vendor.name,
            vendorEmail: orderData.vendorEmail,
            totalAmount
          });
        }
        savedOrders.push({
          orderId: newOrder.id,
          orderNumber: newOrder.orderNumber,
          rowIndex: orderData.rowIndex,
          emailSent: sendEmail && vendor && orderData.vendorEmail
        });
      } catch (error) {
        console.error(`Error creating order for row ${orderData.rowIndex}:`, error);
        errors.push({
          rowIndex: orderData.rowIndex,
          error: error instanceof Error ? error.message : "Unknown error"
        });
      }
    }
    if (emailsToSend.length > 0) {
      console.log(`\u{1F4E7} Preparing to send ${emailsToSend.length} emails...`);
      try {
        const { POEmailService: POEmailService3 } = await Promise.resolve().then(() => (init_po_email_service_enhanced(), po_email_service_enhanced_exports));
        const emailService4 = new POEmailService3();
        for (const emailInfo of emailsToSend) {
          try {
            let excelAttachment = null;
            if (req.file) {
              const attachment = await db.select().from(attachments).where(eq28(attachments.orderId, emailInfo.orderId)).then((rows) => rows[0]);
              if (attachment) {
                excelAttachment = process.env.VERCEL ? path16.join("/tmp", "uploads", "excel-simple", attachment.storedName) : attachment.filePath;
              }
            }
            if (excelAttachment && fs19.existsSync(excelAttachment)) {
              console.log(`\u{1F4CE} Sending email with attachment for order ${emailInfo.orderNumber}`);
              const result = await emailService4.sendPOWithOriginalFormat(
                excelAttachment,
                {
                  to: emailInfo.vendorEmail,
                  subject: `\uBC1C\uC8FC\uC11C \uC804\uC1A1 - ${emailInfo.orderNumber}`,
                  orderNumber: emailInfo.orderNumber,
                  vendorName: emailInfo.vendorName,
                  totalAmount: emailInfo.totalAmount,
                  orderDate: (/* @__PURE__ */ new Date()).toLocaleDateString("ko-KR"),
                  additionalMessage: `${emailInfo.vendorName} \uB2F4\uB2F9\uC790\uB2D8\uAED8 \uBC1C\uC8FC\uC11C\uB97C \uC804\uC1A1\uB4DC\uB9BD\uB2C8\uB2E4.`
                }
              );
              if (result.success) {
                console.log(`\u2705 Email sent successfully for order ${emailInfo.orderNumber}`);
                await db.update(purchaseOrders).set({ status: "sent" }).where(eq28(purchaseOrders.id, emailInfo.orderId));
                await db.insert(orderHistory).values({
                  orderId: emailInfo.orderId,
                  userId: req.user.id,
                  action: "email_sent",
                  changes: {
                    to: emailInfo.vendorEmail,
                    vendorName: emailInfo.vendorName,
                    messageId: result.messageId
                  },
                  createdAt: /* @__PURE__ */ new Date()
                });
              } else {
                console.error(`\u274C Failed to send email for order ${emailInfo.orderNumber}: ${result.error}`);
              }
            } else {
              console.warn(`\u26A0\uFE0F No attachment found for order ${emailInfo.orderNumber}, skipping email`);
            }
          } catch (emailError) {
            console.error(`\u274C Error sending email for order ${emailInfo.orderNumber}:`, emailError);
          }
        }
      } catch (serviceError) {
        console.error("\u274C Error initializing email service:", serviceError);
      }
    }
    const emailsSent = emailsToSend.length;
    res.json({
      success: true,
      message: `Successfully created ${savedOrders.length} orders` + (emailsSent > 0 ? ` and sent ${emailsSent} emails` : ""),
      savedCount: savedOrders.length,
      emailsSent,
      savedOrders,
      emailsToSend: emailsToSend.length > 0 ? emailsToSend : void 0,
      errors: errors.length > 0 ? errors : void 0
    });
  } catch (error) {
    console.error("Bulk order creation error:", error);
    res.status(500).json({
      error: "Failed to create orders",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router29.get("/orders/simple-upload-history", requireAuth, async (req, res) => {
  try {
    const history = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      createdAt: purchaseOrders.createdAt,
      totalAmount: purchaseOrders.totalAmount,
      status: purchaseOrders.status,
      projectName: projects.projectName,
      vendorName: vendors.name,
      itemCount: count4(purchaseOrderItems.id)
    }).from(purchaseOrders).leftJoin(projects, eq28(purchaseOrders.projectId, projects.id)).leftJoin(vendors, eq28(purchaseOrders.vendorId, vendors.id)).leftJoin(purchaseOrderItems, eq28(purchaseOrderItems.orderId, purchaseOrders.id)).leftJoin(orderHistory, eq28(orderHistory.orderId, purchaseOrders.id)).where(
      and17(
        eq28(purchaseOrders.userId, req.user.id),
        eq28(orderHistory.action, "created")
      )
    ).groupBy(
      purchaseOrders.id,
      purchaseOrders.orderNumber,
      purchaseOrders.createdAt,
      purchaseOrders.totalAmount,
      purchaseOrders.status,
      projects.projectName,
      vendors.name
    ).orderBy(desc13(purchaseOrders.createdAt)).limit(50);
    res.json(history);
  } catch (error) {
    console.error("Error fetching upload history:", error);
    res.status(500).json({ error: "Failed to fetch upload history" });
  }
});
router29.get("/orders/drafts", requireAuth, async (req, res) => {
  try {
    const drafts = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      createdAt: purchaseOrders.createdAt,
      updatedAt: purchaseOrders.updatedAt,
      totalAmount: purchaseOrders.totalAmount,
      status: purchaseOrders.status,
      approvalStatus: purchaseOrders.approvalStatus,
      orderDate: purchaseOrders.orderDate,
      deliveryDate: purchaseOrders.deliveryDate,
      projectId: purchaseOrders.projectId,
      projectName: projects.projectName,
      vendorId: purchaseOrders.vendorId,
      vendorName: vendors.name,
      userId: purchaseOrders.userId,
      userName: users.name,
      notes: purchaseOrders.notes
    }).from(purchaseOrders).leftJoin(projects, eq28(purchaseOrders.projectId, projects.id)).leftJoin(vendors, eq28(purchaseOrders.vendorId, vendors.id)).leftJoin(users, eq28(purchaseOrders.userId, users.id)).where(eq28(purchaseOrders.status, "draft")).orderBy(desc13(purchaseOrders.createdAt));
    console.log(`\u{1F4DD} Found ${drafts.length} draft orders`);
    res.json({
      success: true,
      orders: drafts,
      total: drafts.length,
      message: `Found ${drafts.length} draft orders`
    });
  } catch (error) {
    console.error("Error fetching draft orders:", error);
    res.status(500).json({
      error: "Failed to fetch draft orders",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
var orders_simple_default = router29;

// server/routes/positions.ts
import { Router as Router29 } from "express";
var router30 = Router29();
router30.get("/positions", async (req, res) => {
  try {
    res.json([]);
  } catch (error) {
    console.error("Error fetching positions:", error);
    res.status(500).json({ error: "Failed to fetch positions" });
  }
});
router30.get("/ui-terms", async (req, res) => {
  try {
    res.json([]);
  } catch (error) {
    console.error("Error fetching ui-terms:", error);
    res.status(500).json({ error: "Failed to fetch ui-terms" });
  }
});
var positions_default = router30;

// server/routes/audit.ts
import { Router as Router30 } from "express";

// server/services/audit-service.ts
init_db();
init_schema();
import { eq as eq29, and as and18, or as or5, gte as gte6, lte as lte6, desc as desc14, asc as asc7, sql as sql14, inArray as inArray6 } from "drizzle-orm";
var AuditService = class {
  /**
   * 감사 로그 조회
   */
  static async getAuditLogs(params) {
    const {
      userId,
      eventType,
      eventCategory,
      entityType,
      entityId,
      startDate,
      endDate,
      limit = 50,
      offset = 0,
      sortBy = "createdAt",
      sortOrder = "desc"
    } = params;
    const conditions = [];
    if (userId) conditions.push(eq29(systemAuditLogs.userId, userId));
    if (eventType) conditions.push(eq29(systemAuditLogs.eventType, eventType));
    if (eventCategory) conditions.push(eq29(systemAuditLogs.eventCategory, eventCategory));
    if (entityType) conditions.push(eq29(systemAuditLogs.entityType, entityType));
    if (entityId) conditions.push(eq29(systemAuditLogs.entityId, entityId));
    if (startDate) conditions.push(gte6(systemAuditLogs.createdAt, startDate));
    if (endDate) conditions.push(lte6(systemAuditLogs.createdAt, endDate));
    const orderByColumn = sortBy === "eventType" ? systemAuditLogs.eventType : sortBy === "userName" ? systemAuditLogs.userName : systemAuditLogs.createdAt;
    const orderByDirection = sortOrder === "asc" ? asc7 : desc14;
    const query = db.select().from(systemAuditLogs).where(conditions.length > 0 ? and18(...conditions) : void 0).orderBy(orderByDirection(orderByColumn)).limit(limit).offset(offset);
    const [logs, countResult] = await Promise.all([
      query,
      db.select({ count: sql14`count(*)` }).from(systemAuditLogs).where(conditions.length > 0 ? and18(...conditions) : void 0)
    ]);
    return {
      logs,
      total: countResult[0]?.count || 0,
      limit,
      offset
    };
  }
  /**
   * 사용자별 활동 요약
   */
  static async getUserActivitySummary(userId, days = 30) {
    const startDate = /* @__PURE__ */ new Date();
    startDate.setDate(startDate.getDate() - days);
    const activities = await db.select({
      eventType: systemAuditLogs.eventType,
      count: sql14`count(*)`
    }).from(systemAuditLogs).where(
      and18(
        eq29(systemAuditLogs.userId, userId),
        gte6(systemAuditLogs.createdAt, startDate)
      )
    ).groupBy(systemAuditLogs.eventType);
    const lastLogin = await db.select().from(systemAuditLogs).where(
      and18(
        eq29(systemAuditLogs.userId, userId),
        eq29(systemAuditLogs.eventType, "login")
      )
    ).orderBy(desc14(systemAuditLogs.createdAt)).limit(1);
    const failedLogins = await db.select({ count: sql14`count(*)` }).from(systemAuditLogs).where(
      and18(
        eq29(systemAuditLogs.userId, userId),
        eq29(systemAuditLogs.eventType, "login_failed"),
        gte6(systemAuditLogs.createdAt, startDate)
      )
    );
    return {
      activities,
      lastLogin: lastLogin[0],
      failedLoginCount: failedLogins[0]?.count || 0,
      period: `${days} days`
    };
  }
  /**
   * 시스템 활동 대시보드 통계
   */
  static async getDashboardStats(hours = 24) {
    const startDate = /* @__PURE__ */ new Date();
    startDate.setHours(startDate.getHours() - hours);
    const categoryStats = await db.select({
      category: systemAuditLogs.eventCategory,
      count: sql14`count(*)`
    }).from(systemAuditLogs).where(gte6(systemAuditLogs.createdAt, startDate)).groupBy(systemAuditLogs.eventCategory);
    const eventStats = await db.select({
      eventType: systemAuditLogs.eventType,
      count: sql14`count(*)`
    }).from(systemAuditLogs).where(gte6(systemAuditLogs.createdAt, startDate)).groupBy(systemAuditLogs.eventType);
    const hourlyActivity = await db.select({
      hour: sql14`date_trunc('hour', ${systemAuditLogs.createdAt})`,
      count: sql14`count(*)`
    }).from(systemAuditLogs).where(gte6(systemAuditLogs.createdAt, startDate)).groupBy(sql14`date_trunc('hour', ${systemAuditLogs.createdAt})`).orderBy(sql14`date_trunc('hour', ${systemAuditLogs.createdAt})`);
    const activeUsers = await db.select({
      count: sql14`count(distinct ${systemAuditLogs.userId})`
    }).from(systemAuditLogs).where(gte6(systemAuditLogs.createdAt, startDate));
    const errors = await db.select().from(systemAuditLogs).where(
      and18(
        or5(
          eq29(systemAuditLogs.eventType, "system_error"),
          eq29(systemAuditLogs.eventType, "security_alert"),
          eq29(systemAuditLogs.eventType, "login_failed")
        ),
        gte6(systemAuditLogs.createdAt, startDate)
      )
    ).orderBy(desc14(systemAuditLogs.createdAt)).limit(10);
    const securityEvents = await db.select().from(systemAuditLogs).where(
      and18(
        or5(
          eq29(systemAuditLogs.eventType, "login_failed"),
          eq29(systemAuditLogs.eventType, "security_alert"),
          eq29(systemAuditLogs.eventCategory, "security")
        ),
        gte6(systemAuditLogs.createdAt, startDate)
      )
    ).orderBy(desc14(systemAuditLogs.createdAt)).limit(10);
    return {
      categoryStats,
      eventStats,
      hourlyActivity,
      activeUserCount: activeUsers[0]?.count || 0,
      recentErrors: errors,
      securityEvents,
      period: `${hours} hours`
    };
  }
  /**
   * 감사 설정 조회
   */
  static async getSettings() {
    const settings = await db.select().from(auditSettings).limit(1);
    return settings[0] || null;
  }
  /**
   * 감사 설정 업데이트
   */
  static async updateSettings(settings, userId) {
    const existingSettings = await this.getSettings();
    if (existingSettings) {
      const updated = await db.update(auditSettings).set({
        ...settings,
        updatedBy: userId,
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq29(auditSettings.id, existingSettings.id)).returning();
      await logAuditEvent("settings_change", "system", {
        userId,
        entityType: "audit_settings",
        entityId: String(existingSettings.id),
        action: "Update audit settings",
        oldValue: existingSettings,
        newValue: updated[0]
      });
      return updated[0];
    } else {
      const created = await db.insert(auditSettings).values({
        ...settings,
        updatedBy: userId
      }).returning();
      await logAuditEvent("settings_change", "system", {
        userId,
        entityType: "audit_settings",
        entityId: String(created[0].id),
        action: "Create audit settings",
        newValue: created[0]
      });
      return created[0];
    }
  }
  /**
   * 로그 아카이빙
   */
  static async archiveLogs(beforeDate) {
    const logsToArchive = await db.select().from(systemAuditLogs).where(lte6(systemAuditLogs.createdAt, beforeDate)).limit(1e3);
    if (logsToArchive.length === 0) {
      return { archived: 0 };
    }
    const archiveData = logsToArchive.map((log) => ({
      originalId: log.id,
      userId: log.userId,
      userName: log.userName,
      userRole: log.userRole,
      eventType: log.eventType,
      eventCategory: log.eventCategory,
      entityType: log.entityType,
      entityId: log.entityId,
      action: log.action,
      details: log.additionalDetails,
      ipAddress: log.ipAddress,
      createdAt: log.createdAt
    }));
    await db.insert(archivedAuditLogs).values(archiveData);
    const logIds = logsToArchive.map((log) => log.id);
    await db.delete(systemAuditLogs).where(inArray6(systemAuditLogs.id, logIds));
    return { archived: logsToArchive.length };
  }
  /**
   * 아카이브된 로그 조회
   */
  static async getArchivedLogs(params) {
    const { userId, startDate, endDate, limit = 50, offset = 0 } = params;
    const conditions = [];
    if (userId) conditions.push(eq29(archivedAuditLogs.userId, userId));
    if (startDate) conditions.push(gte6(archivedAuditLogs.createdAt, startDate));
    if (endDate) conditions.push(lte6(archivedAuditLogs.createdAt, endDate));
    const logs = await db.select().from(archivedAuditLogs).where(conditions.length > 0 ? and18(...conditions) : void 0).orderBy(desc14(archivedAuditLogs.createdAt)).limit(limit).offset(offset);
    return logs;
  }
  /**
   * 로그인 기록 조회
   */
  static async getLoginHistory(params) {
    const { userId, days = 30, includeFailures = true } = params;
    const startDate = /* @__PURE__ */ new Date();
    startDate.setDate(startDate.getDate() - days);
    const eventTypes = includeFailures ? ["login", "logout", "login_failed", "session_expired"] : ["login", "logout"];
    const conditions = [
      inArray6(systemAuditLogs.eventType, eventTypes),
      gte6(systemAuditLogs.createdAt, startDate)
    ];
    if (userId) {
      conditions.push(eq29(systemAuditLogs.userId, userId));
    }
    const history = await db.select({
      id: systemAuditLogs.id,
      userId: systemAuditLogs.userId,
      userName: systemAuditLogs.userName,
      userRole: systemAuditLogs.userRole,
      eventType: systemAuditLogs.eventType,
      ipAddress: systemAuditLogs.ipAddress,
      userAgent: systemAuditLogs.userAgent,
      details: systemAuditLogs.additionalDetails,
      createdAt: systemAuditLogs.createdAt
    }).from(systemAuditLogs).where(and18(...conditions)).orderBy(desc14(systemAuditLogs.createdAt)).limit(100);
    const sessions2 = [];
    let currentSession = null;
    for (const event of history) {
      if (event.eventType === "login") {
        if (currentSession) {
          sessions2.push(currentSession);
        }
        currentSession = {
          loginTime: event.createdAt,
          loginIp: event.ipAddress,
          userAgent: event.userAgent,
          userId: event.userId,
          userName: event.userName,
          duration: null,
          logoutType: null
        };
      } else if (currentSession && (event.eventType === "logout" || event.eventType === "session_expired")) {
        currentSession.logoutTime = event.createdAt;
        currentSession.duration = Math.floor(
          (new Date(event.createdAt).getTime() - new Date(currentSession.loginTime).getTime()) / 1e3
        );
        currentSession.logoutType = event.eventType;
        sessions2.push(currentSession);
        currentSession = null;
      }
    }
    if (currentSession) {
      sessions2.push(currentSession);
    }
    return {
      history,
      sessions: sessions2,
      totalLogins: history.filter((h) => h.eventType === "login").length,
      failedLogins: history.filter((h) => h.eventType === "login_failed").length
    };
  }
  /**
   * 데이터 변경 기록 조회
   */
  static async getDataChangeLogs(params) {
    const { entityType, entityId, userId, days = 30 } = params;
    const startDate = /* @__PURE__ */ new Date();
    startDate.setDate(startDate.getDate() - days);
    const conditions = [
      inArray6(systemAuditLogs.eventType, ["data_create", "data_update", "data_delete"]),
      gte6(systemAuditLogs.createdAt, startDate)
    ];
    if (entityType) conditions.push(eq29(systemAuditLogs.entityType, entityType));
    if (entityId) conditions.push(eq29(systemAuditLogs.entityId, entityId));
    if (userId) conditions.push(eq29(systemAuditLogs.userId, userId));
    const changes = await db.select().from(systemAuditLogs).where(and18(...conditions)).orderBy(desc14(systemAuditLogs.createdAt)).limit(100);
    return changes;
  }
  /**
   * 삭제 기록 조회
   */
  static async getDeletedRecords(params) {
    const { entityType, days = 30, includeBackup = true } = params;
    const startDate = /* @__PURE__ */ new Date();
    startDate.setDate(startDate.getDate() - days);
    const conditions = [
      eq29(systemAuditLogs.eventType, "data_delete"),
      gte6(systemAuditLogs.createdAt, startDate)
    ];
    if (entityType) {
      conditions.push(eq29(systemAuditLogs.entityType, entityType));
    }
    const deletions = await db.select().from(systemAuditLogs).where(and18(...conditions)).orderBy(desc14(systemAuditLogs.createdAt));
    const records = deletions.map((deletion) => ({
      id: deletion.id,
      entityType: deletion.entityType,
      entityId: deletion.entityId,
      deletedBy: deletion.userName,
      deletedAt: deletion.createdAt,
      reason: deletion.additionalDetails?.reason,
      backup: includeBackup ? deletion.oldValue : void 0,
      restorable: !!deletion.oldValue
    }));
    return records;
  }
  /**
   * 보안 이벤트 조회
   */
  static async getSecurityEvents(params) {
    const { severity = "all", days = 7 } = params;
    const startDate = /* @__PURE__ */ new Date();
    startDate.setDate(startDate.getDate() - days);
    const securityEventTypes = [
      "login_failed",
      "permission_change",
      "security_alert",
      "password_change"
    ];
    const events = await db.select().from(systemAuditLogs).where(
      and18(
        or5(
          inArray6(systemAuditLogs.eventType, securityEventTypes),
          eq29(systemAuditLogs.eventCategory, "security")
        ),
        gte6(systemAuditLogs.createdAt, startDate)
      )
    ).orderBy(desc14(systemAuditLogs.createdAt));
    const categorizedEvents = events.map((event) => {
      let eventSeverity = "low";
      if (event.eventType === "security_alert" || event.eventType === "permission_change") {
        eventSeverity = "high";
      } else if (event.eventType === "login_failed") {
        eventSeverity = "medium";
      }
      return {
        ...event,
        severity: eventSeverity
      };
    });
    if (severity !== "all") {
      return categorizedEvents.filter((e) => e.severity === severity);
    }
    return categorizedEvents;
  }
  /**
   * 알림 규칙 조회
   */
  static async getAlertRules() {
    return await db.select().from(auditAlertRules).where(eq29(auditAlertRules.isActive, true)).orderBy(desc14(auditAlertRules.severity));
  }
  /**
   * 알림 규칙 생성/업데이트
   */
  static async upsertAlertRule(rule, userId) {
    if (rule.id) {
      return await db.update(auditAlertRules).set({
        ...rule,
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq29(auditAlertRules.id, rule.id)).returning();
    } else {
      return await db.insert(auditAlertRules).values({
        ...rule,
        createdBy: userId
      }).returning();
    }
  }
  /**
   * 자동 아카이빙 작업
   */
  static async performAutoArchive() {
    const settings = await this.getSettings();
    if (!settings?.archiveEnabled || !settings?.archiveAfterDays) {
      return { success: false, message: "Auto-archive is disabled" };
    }
    const archiveDate = /* @__PURE__ */ new Date();
    archiveDate.setDate(archiveDate.getDate() - settings.archiveAfterDays);
    const result = await this.archiveLogs(archiveDate);
    if (settings.retentionDays) {
      const deleteDate = /* @__PURE__ */ new Date();
      deleteDate.setDate(deleteDate.getDate() - settings.retentionDays);
      await db.delete(archivedAuditLogs).where(lte6(archivedAuditLogs.archivedAt, deleteDate));
    }
    return { success: true, ...result };
  }
};

// server/routes/audit.ts
import { z as z9 } from "zod";
var router31 = Router30();
var getAuditLogsSchema = z9.object({
  userId: z9.string().optional(),
  eventType: z9.string().optional(),
  eventCategory: z9.string().optional(),
  entityType: z9.string().optional(),
  entityId: z9.string().optional(),
  startDate: z9.string().optional(),
  endDate: z9.string().optional(),
  limit: z9.coerce.number().min(1).max(100).default(50),
  offset: z9.coerce.number().min(0).default(0),
  sortBy: z9.enum(["createdAt", "eventType", "userName"]).default("createdAt"),
  sortOrder: z9.enum(["asc", "desc"]).default("desc")
});
var updateSettingsSchema = z9.object({
  logLevel: z9.enum(["OFF", "ERROR", "WARNING", "INFO", "DEBUG"]).optional(),
  enabledCategories: z9.array(z9.string()).optional(),
  retentionDays: z9.number().min(1).max(365).optional(),
  archiveEnabled: z9.boolean().optional(),
  archiveAfterDays: z9.number().min(1).max(180).optional(),
  realTimeAlerts: z9.boolean().optional(),
  alertEmails: z9.array(z9.string().email()).optional(),
  excludedPaths: z9.array(z9.string()).optional(),
  excludedUsers: z9.array(z9.string()).optional(),
  sensitiveDataMasking: z9.boolean().optional(),
  performanceTracking: z9.boolean().optional(),
  apiAccessLogging: z9.boolean().optional()
});
var alertRuleSchema = z9.object({
  id: z9.number().optional(),
  ruleName: z9.string().min(1).max(100),
  description: z9.string().optional(),
  eventTypes: z9.array(z9.string()),
  condition: z9.any().optional(),
  severity: z9.enum(["low", "medium", "high", "critical"]),
  alertChannels: z9.array(z9.string()),
  recipients: z9.array(z9.string()),
  throttleMinutes: z9.number().min(0).max(1440).optional(),
  isActive: z9.boolean().optional()
});
router31.get("/logs", requireAuth, async (req, res) => {
  try {
    const user = req.user;
    const params = getAuditLogsSchema.parse(req.query);
    if (user.role !== "admin" && user.role !== "executive" && user.role !== "hq_management") {
      params.userId = user.id;
    }
    const result = await AuditService.getAuditLogs({
      ...params,
      startDate: params.startDate ? new Date(params.startDate) : void 0,
      endDate: params.endDate ? new Date(params.endDate) : void 0
    });
    res.json(result);
  } catch (error) {
    console.error("Failed to get audit logs:", error);
    res.status(500).json({
      message: "Failed to retrieve audit logs",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.get("/dashboard", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    const hours = parseInt(req.query.hours) || 24;
    const stats = await AuditService.getDashboardStats(hours);
    res.json(stats);
  } catch (error) {
    console.error("Failed to get dashboard stats:", error);
    res.status(500).json({
      message: "Failed to retrieve dashboard statistics",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.get("/user-activity/:userId", requireAuth, async (req, res) => {
  try {
    const user = req.user;
    const { userId } = req.params;
    const days = parseInt(req.query.days) || 30;
    if (user.role !== "admin" && user.id !== userId) {
      return res.status(403).json({ message: "Forbidden" });
    }
    const summary = await AuditService.getUserActivitySummary(userId, days);
    res.json(summary);
  } catch (error) {
    console.error("Failed to get user activity:", error);
    res.status(500).json({
      message: "Failed to retrieve user activity summary",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.get("/login-history", requireAuth, async (req, res) => {
  try {
    const user = req.user;
    const userId = req.query.userId;
    const days = parseInt(req.query.days) || 30;
    const includeFailures = req.query.includeFailures !== "false";
    const targetUserId = user.role === "admin" || user.role === "executive" ? userId : user.id;
    const history = await AuditService.getLoginHistory({
      userId: targetUserId,
      days,
      includeFailures
    });
    res.json(history);
  } catch (error) {
    console.error("Failed to get login history:", error);
    res.status(500).json({
      message: "Failed to retrieve login history",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.get("/data-changes", requireAuth, requireRole(["admin", "executive", "hq_management"]), async (req, res) => {
  try {
    const params = {
      entityType: req.query.entityType,
      entityId: req.query.entityId,
      userId: req.query.userId,
      days: parseInt(req.query.days) || 30
    };
    const changes = await AuditService.getDataChangeLogs(params);
    res.json(changes);
  } catch (error) {
    console.error("Failed to get data changes:", error);
    res.status(500).json({
      message: "Failed to retrieve data change logs",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.get("/deleted-records", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    const params = {
      entityType: req.query.entityType,
      days: parseInt(req.query.days) || 30,
      includeBackup: req.query.includeBackup !== "false"
    };
    const records = await AuditService.getDeletedRecords(params);
    res.json(records);
  } catch (error) {
    console.error("Failed to get deleted records:", error);
    res.status(500).json({
      message: "Failed to retrieve deleted records",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.get("/security-events", requireAuth, requireRole(["admin", "executive"]), async (req, res) => {
  try {
    const params = {
      severity: req.query.severity || "all",
      days: parseInt(req.query.days) || 7
    };
    const events = await AuditService.getSecurityEvents(params);
    res.json(events);
  } catch (error) {
    console.error("Failed to get security events:", error);
    res.status(500).json({
      message: "Failed to retrieve security events",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.get("/archived", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    const params = {
      userId: req.query.userId,
      startDate: req.query.startDate ? new Date(req.query.startDate) : void 0,
      endDate: req.query.endDate ? new Date(req.query.endDate) : void 0,
      limit: parseInt(req.query.limit) || 50,
      offset: parseInt(req.query.offset) || 0
    };
    const logs = await AuditService.getArchivedLogs(params);
    res.json(logs);
  } catch (error) {
    console.error("Failed to get archived logs:", error);
    res.status(500).json({
      message: "Failed to retrieve archived logs",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.get("/settings", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    const settings = await AuditService.getSettings();
    res.json(settings || {
      logLevel: "INFO",
      enabledCategories: ["auth", "data", "security"],
      retentionDays: 90,
      archiveEnabled: true,
      archiveAfterDays: 30,
      realTimeAlerts: false,
      alertEmails: [],
      excludedPaths: [],
      excludedUsers: [],
      sensitiveDataMasking: true,
      performanceTracking: false,
      apiAccessLogging: false
    });
  } catch (error) {
    console.error("Failed to get audit settings:", error);
    res.status(500).json({
      message: "Failed to retrieve audit settings",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.put("/settings", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    const user = req.user;
    const settings = updateSettingsSchema.parse(req.body);
    const updated = await AuditService.updateSettings(settings, user.id);
    res.json(updated);
  } catch (error) {
    if (error instanceof z9.ZodError) {
      return res.status(400).json({
        message: "Invalid settings data",
        errors: error.errors
      });
    }
    console.error("Failed to update audit settings:", error);
    res.status(500).json({
      message: "Failed to update audit settings",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.get("/alert-rules", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    const rules = await AuditService.getAlertRules();
    res.json(rules);
  } catch (error) {
    console.error("Failed to get alert rules:", error);
    res.status(500).json({
      message: "Failed to retrieve alert rules",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.post("/alert-rules", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    const user = req.user;
    const rule = alertRuleSchema.parse(req.body);
    const result = await AuditService.upsertAlertRule(rule, user.id);
    res.json(result[0]);
  } catch (error) {
    if (error instanceof z9.ZodError) {
      return res.status(400).json({
        message: "Invalid alert rule data",
        errors: error.errors
      });
    }
    console.error("Failed to save alert rule:", error);
    res.status(500).json({
      message: "Failed to save alert rule",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.post("/archive", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    const beforeDate = req.body.beforeDate ? new Date(req.body.beforeDate) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1e3);
    const result = await AuditService.archiveLogs(beforeDate);
    res.json(result);
  } catch (error) {
    console.error("Failed to archive logs:", error);
    res.status(500).json({
      message: "Failed to archive logs",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
router31.post("/auto-archive", requireAuth, requireRole(["admin"]), async (req, res) => {
  try {
    const result = await AuditService.performAutoArchive();
    res.json(result);
  } catch (error) {
    console.error("Failed to perform auto-archive:", error);
    res.status(500).json({
      message: "Failed to perform auto-archive",
      error: process.env.NODE_ENV === "development" ? error : void 0
    });
  }
});
var audit_default = router31;

// server/routes/email-test.ts
import express2 from "express";
import path18 from "path";

// server/services/email-service.ts
init_db();
init_schema();
import nodemailer6 from "nodemailer";
import path17 from "path";
import fs20 from "fs/promises";
var transporter = nodemailer6.createTransport({
  host: process.env.SMTP_HOST || "smtp.naver.com",
  port: parseInt(process.env.SMTP_PORT || "587"),
  secure: false,
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS
  },
  tls: {
    rejectUnauthorized: false
  }
});
var emailTemplates = {
  purchaseOrder: {
    subject: (orderNumber, projectName) => `[\uBC1C\uC8FC\uC11C] ${orderNumber} - ${projectName}`,
    html: (data) => `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <style>
          body { font-family: 'Malgun Gothic', sans-serif; line-height: 1.6; }
          .header { background-color: #f8f9fa; padding: 20px; border-bottom: 3px solid #0066cc; }
          .content { padding: 20px; }
          .info-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
          .info-table th { background-color: #e9ecef; padding: 10px; text-align: left; width: 150px; }
          .info-table td { padding: 10px; border-bottom: 1px solid #dee2e6; }
          .footer { background-color: #f8f9fa; padding: 20px; margin-top: 30px; font-size: 12px; color: #6c757d; }
          .warning { color: #dc3545; font-weight: bold; }
        </style>
      </head>
      <body>
        <div class="header">
          <h2>(\uC8FC)\uC775\uC9C4\uC5D4\uC9C0\uB2C8\uC5B4\uB9C1 \uBC1C\uC8FC\uC11C</h2>
        </div>
        
        <div class="content">
          <p>\uC548\uB155\uD558\uC138\uC694, ${data.vendorName} \uB2F4\uB2F9\uC790\uB2D8</p>
          
          <p>\uC544\uB798\uC640 \uAC19\uC774 \uBC1C\uC8FC\uC11C\uB97C \uC1A1\uBD80\uB4DC\uB9AC\uC624\uB2C8 \uD655\uC778 \uBD80\uD0C1\uB4DC\uB9BD\uB2C8\uB2E4.</p>
          
          <table class="info-table">
            <tr>
              <th>\uBC1C\uC8FC\uBC88\uD638</th>
              <td>${data.orderNumber}</td>
            </tr>
            <tr>
              <th>\uD504\uB85C\uC81D\uD2B8\uBA85</th>
              <td>${data.projectName}</td>
            </tr>
            <tr>
              <th>\uD604\uC7A5\uBA85</th>
              <td>${data.location}</td>
            </tr>
            <tr>
              <th>\uBC1C\uC8FC\uC77C\uC790</th>
              <td>${data.orderDate}</td>
            </tr>
            <tr>
              <th>\uB0A9\uD488\uC694\uCCAD\uC77C</th>
              <td>${data.deliveryDate}</td>
            </tr>
            <tr>
              <th>\uBC1C\uC8FC\uAE08\uC561</th>
              <td>${data.totalAmount}\uC6D0</td>
            </tr>
            <tr>
              <th>\uB2F4\uB2F9\uC790</th>
              <td>${data.userName} (${data.userPhone})</td>
            </tr>
          </table>
          
          <p>\uC0C1\uC138 \uB0B4\uC5ED\uC740 \uCCA8\uBD80\uB41C \uC5D1\uC140 \uD30C\uC77C\uC744 \uD655\uC778\uD574 \uC8FC\uC2DC\uAE30 \uBC14\uB78D\uB2C8\uB2E4.</p>
          
          <p class="warning">\u203B \uBCF8 \uBA54\uC77C\uC740 \uC790\uB3D9 \uBC1C\uC1A1\uB41C \uBA54\uC77C\uC785\uB2C8\uB2E4. \uBB38\uC758\uC0AC\uD56D\uC740 \uB2F4\uB2F9\uC790\uC5D0\uAC8C \uC5F0\uB77D \uBD80\uD0C1\uB4DC\uB9BD\uB2C8\uB2E4.</p>
        </div>
        
        <div class="footer">
          <p>
            (\uC8FC)\uC775\uC9C4\uC5D4\uC9C0\uB2C8\uC5B4\uB9C1<br>
            \uC11C\uC6B8\uD2B9\uBCC4\uC2DC \uAC15\uB0A8\uAD6C \uD14C\uD5E4\uB780\uB85C 123<br>
            \uB300\uD45C\uC804\uD654: 02-1234-5678 | \uD329\uC2A4: 02-1234-5679<br>
            \uD648\uD398\uC774\uC9C0: https://ikjin.co.kr
          </p>
        </div>
      </body>
      </html>
    `
  }
};
async function sendPurchaseOrderEmail(params) {
  const { orderData, excelFilePath, recipients, cc = [], userId, orderId } = params;
  try {
    await fs20.access(excelFilePath);
    const mailOptions = {
      from: `"(\uC8FC)\uC775\uC9C4\uC5D4\uC9C0\uB2C8\uC5B4\uB9C1" <${process.env.SMTP_USER}>`,
      to: recipients.join(", "),
      cc: cc.join(", "),
      subject: emailTemplates.purchaseOrder.subject(
        orderData.orderNumber,
        orderData.projectName
      ),
      html: emailTemplates.purchaseOrder.html(orderData),
      attachments: [
        {
          filename: path17.basename(excelFilePath),
          path: excelFilePath,
          contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        }
      ]
    };
    const info = await transporter.sendMail(mailOptions);
    console.log("\u2705 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC131\uACF5:", info.messageId);
    if (orderId && userId) {
      try {
        const trackingId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        const fileStats = await fs20.stat(excelFilePath);
        await db.insert(emailSendHistory).values({
          orderId,
          sentBy: userId,
          recipientEmail: recipients.join(", "),
          recipientName: orderData.vendorName,
          ccEmails: cc.length > 0 ? cc.join(", ") : null,
          subject: mailOptions.subject,
          body: mailOptions.html,
          attachments: [{
            filename: path17.basename(excelFilePath),
            path: excelFilePath,
            size: fileStats.size
          }],
          status: "sent",
          emailProvider: "naver",
          messageId: info.messageId,
          trackingId
        });
      } catch (historyError) {
        console.error("\u26A0\uFE0F \uC774\uBA54\uC77C \uC774\uB825 \uC800\uC7A5 \uC2E4\uD328:", historyError);
      }
    }
    return {
      success: true,
      messageId: info.messageId,
      acceptedRecipients: info.accepted,
      rejectedRecipients: info.rejected
    };
  } catch (error) {
    console.error("\u274C \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328:", error);
    if (orderId && userId) {
      try {
        const trackingId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        await db.insert(emailSendHistory).values({
          orderId,
          sentBy: userId,
          recipientEmail: recipients.join(", "),
          recipientName: orderData.vendorName,
          ccEmails: cc.length > 0 ? cc.join(", ") : null,
          subject: emailTemplates.purchaseOrder.subject(
            orderData.orderNumber,
            orderData.projectName
          ),
          body: emailTemplates.purchaseOrder.html(orderData),
          attachments: null,
          status: "failed",
          errorMessage: error.message,
          emailProvider: "naver",
          trackingId
        });
      } catch (historyError) {
        console.error("\u26A0\uFE0F \uC774\uBA54\uC77C \uC2E4\uD328 \uC774\uB825 \uC800\uC7A5 \uC2E4\uD328:", historyError);
      }
    }
    throw new Error(`\uC774\uBA54\uC77C \uBC1C\uC1A1 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4: ${error.message}`);
  }
}
async function sendBulkPurchaseOrderEmails(orders) {
  const results = [];
  for (const order of orders) {
    try {
      const result = await sendPurchaseOrderEmail(order);
      results.push({
        orderNumber: order.orderData.orderNumber,
        ...result
      });
      await new Promise((resolve) => setTimeout(resolve, 1e3));
    } catch (error) {
      results.push({
        orderNumber: order.orderData.orderNumber,
        success: false,
        error: error.message
      });
    }
  }
  return results;
}
async function testEmailConnection() {
  try {
    await transporter.verify();
    console.log("\u2705 Naver \uBA54\uC77C \uC11C\uBC84 \uC5F0\uACB0 \uC131\uACF5");
    return true;
  } catch (error) {
    console.error("\u274C Naver \uBA54\uC77C \uC11C\uBC84 \uC5F0\uACB0 \uC2E4\uD328:", error);
    return false;
  }
}
var emailService2 = {
  sendPurchaseOrderEmail,
  sendBulkPurchaseOrderEmails,
  testEmailConnection
};

// server/routes/email-test.ts
init_po_email_service_enhanced();
var router32 = express2.Router();
router32.get("/test-connection", async (req, res) => {
  try {
    console.log("\u{1F50D} \uC774\uBA54\uC77C \uC11C\uBE44\uC2A4 \uC5F0\uACB0 \uD14C\uC2A4\uD2B8 \uC2DC\uC791...");
    const isConnected = await emailService2.testEmailConnection();
    if (isConnected) {
      console.log("\u2705 \uC774\uBA54\uC77C \uC11C\uBC84 \uC5F0\uACB0 \uC131\uACF5");
      res.json({
        success: true,
        message: "\uC774\uBA54\uC77C \uC11C\uBC84 \uC5F0\uACB0 \uC131\uACF5",
        smtp: {
          host: process.env.SMTP_HOST,
          port: process.env.SMTP_PORT,
          user: process.env.SMTP_USER
        }
      });
    } else {
      console.error("\u274C \uC774\uBA54\uC77C \uC11C\uBC84 \uC5F0\uACB0 \uC2E4\uD328");
      res.status(500).json({
        success: false,
        message: "\uC774\uBA54\uC77C \uC11C\uBC84 \uC5F0\uACB0 \uC2E4\uD328",
        smtp: {
          host: process.env.SMTP_HOST,
          port: process.env.SMTP_PORT,
          user: process.env.SMTP_USER
        }
      });
    }
  } catch (error) {
    console.error("\u274C \uC774\uBA54\uC77C \uC5F0\uACB0 \uD14C\uC2A4\uD2B8 \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      message: error instanceof Error ? error.message : "\uC774\uBA54\uC77C \uC5F0\uACB0 \uD14C\uC2A4\uD2B8 \uC2E4\uD328",
      error
    });
  }
});
router32.post("/send-test", async (req, res) => {
  try {
    const { to } = req.body;
    if (!to) {
      return res.status(400).json({
        success: false,
        message: "\uC218\uC2E0\uC790 \uC774\uBA54\uC77C\uC774 \uD544\uC694\uD569\uB2C8\uB2E4."
      });
    }
    console.log(`\u{1F4E7} \uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2DC\uC791: ${to}`);
    const testOrderData = {
      orderNumber: "TEST-001",
      projectName: "\uD14C\uC2A4\uD2B8 \uD504\uB85C\uC81D\uD2B8",
      vendorName: "\uD14C\uC2A4\uD2B8 \uAC70\uB798\uCC98",
      location: "\uD14C\uC2A4\uD2B8 \uD604\uC7A5",
      orderDate: (/* @__PURE__ */ new Date()).toLocaleDateString("ko-KR"),
      deliveryDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1e3).toLocaleDateString("ko-KR"),
      totalAmount: 1e6,
      userName: "Test User",
      userPhone: "010-1234-5678"
    };
    const dummyFilePath = path18.join(process.cwd(), "uploads", "test-email.xlsx");
    const fs22 = __require("fs");
    const uploadsDir = path18.join(process.cwd(), "uploads");
    if (!fs22.existsSync(uploadsDir)) {
      fs22.mkdirSync(uploadsDir, { recursive: true });
    }
    if (!fs22.existsSync(dummyFilePath)) {
      fs22.writeFileSync(dummyFilePath, "test content");
    }
    const result = await emailService2.sendPurchaseOrderEmail({
      orderData: testOrderData,
      excelFilePath: dummyFilePath,
      recipients: [to],
      cc: [],
      userId: "test-user",
      orderId: 999
    });
    if (result.success) {
      console.log("\u2705 \uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC131\uACF5");
      res.json({
        success: true,
        message: "\uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC131\uACF5",
        messageId: result.messageId,
        recipients: result.acceptedRecipients
      });
    } else {
      console.error("\u274C \uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328");
      res.status(500).json({
        success: false,
        message: "\uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328"
      });
    }
  } catch (error) {
    console.error("\u274C \uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      message: error instanceof Error ? error.message : "\uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328",
      error
    });
  }
});
router32.get("/config", async (req, res) => {
  try {
    const config = {
      host: process.env.SMTP_HOST,
      port: process.env.SMTP_PORT,
      user: process.env.SMTP_USER,
      hasPassword: !!process.env.SMTP_PASS,
      passwordLength: process.env.SMTP_PASS?.length || 0
    };
    res.json({
      success: true,
      config
    });
  } catch (error) {
    console.error("Config check error:", error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router32.post("/simple", async (req, res) => {
  try {
    const { to } = req.body;
    if (!to) {
      return res.status(400).json({
        success: false,
        message: "\uC218\uC2E0\uC790 \uC774\uBA54\uC77C \uC8FC\uC18C\uB97C \uC785\uB825\uD574\uC8FC\uC138\uC694."
      });
    }
    console.log("\u{1F4E7} Simple email test started to:", to);
    const poEmailService = new POEmailService2();
    const result = await poEmailService.sendEmail({
      to,
      subject: `[\uD14C\uC2A4\uD2B8] \uBC1C\uC8FC \uC2DC\uC2A4\uD15C \uC774\uBA54\uC77C \uD14C\uC2A4\uD2B8 - ${(/* @__PURE__ */ new Date()).toLocaleString("ko-KR")}`,
      text: "\uC774\uAC83\uC740 \uBC1C\uC8FC \uC2DC\uC2A4\uD15C\uC758 \uC774\uBA54\uC77C \uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0\uC785\uB2C8\uB2E4.\n\n\uC774\uBA54\uC77C\uC774 \uC815\uC0C1\uC801\uC73C\uB85C \uC218\uC2E0\uB418\uC5C8\uB2E4\uBA74 \uC2DC\uC2A4\uD15C\uC774 \uC62C\uBC14\uB974\uAC8C \uC124\uC815\uB41C \uAC83\uC785\uB2C8\uB2E4.",
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px;">
          <h2>\uBC1C\uC8FC \uC2DC\uC2A4\uD15C \uC774\uBA54\uC77C \uD14C\uC2A4\uD2B8</h2>
          <p>\uC774\uAC83\uC740 \uBC1C\uC8FC \uC2DC\uC2A4\uD15C\uC758 \uC774\uBA54\uC77C \uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0\uC785\uB2C8\uB2E4.</p>
          <p>\uC774\uBA54\uC77C\uC774 \uC815\uC0C1\uC801\uC73C\uB85C \uC218\uC2E0\uB418\uC5C8\uB2E4\uBA74 \uC2DC\uC2A4\uD15C\uC774 \uC62C\uBC14\uB974\uAC8C \uC124\uC815\uB41C \uAC83\uC785\uB2C8\uB2E4.</p>
          <hr>
          <p style="color: #666; font-size: 12px;">
            \uBC1C\uC1A1 \uC2DC\uAC04: ${(/* @__PURE__ */ new Date()).toLocaleString("ko-KR")}<br>
            \uBC1C\uC1A1 \uC11C\uBC84: ${process.env.SMTP_HOST || "unknown"}<br>
            \uBC1C\uC1A1\uC790: ${process.env.SMTP_USER || "unknown"}
          </p>
        </div>
      `
    });
    console.log("\u{1F4E7} Simple email test result:", result);
    if (result.success) {
      res.json({
        success: true,
        message: "\uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC131\uACF5",
        messageId: result.messageId,
        to
      });
    } else {
      res.status(500).json({
        success: false,
        message: "\uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C \uBC1C\uC1A1 \uC2E4\uD328",
        error: result.error,
        to
      });
    }
  } catch (error) {
    console.error("\u274C Simple email test error:", error);
    res.status(500).json({
      success: false,
      message: "\uC774\uBA54\uC77C \uD14C\uC2A4\uD2B8 \uC911 \uC624\uB958 \uBC1C\uC0DD",
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
var email_test_default = router32;

// server/routes/email-settings.ts
init_email_settings_service();
import express3 from "express";
import { z as z10 } from "zod";
var router33 = express3.Router();
var EmailSettingsSchema = z10.object({
  smtpHost: z10.string().min(1, "SMTP \uD638\uC2A4\uD2B8\uB294 \uD544\uC218\uC785\uB2C8\uB2E4"),
  smtpPort: z10.string().regex(/^\d+$/, "\uD3EC\uD2B8\uB294 \uC22B\uC790\uC5EC\uC57C \uD569\uB2C8\uB2E4"),
  smtpUser: z10.string().email("\uC62C\uBC14\uB978 \uC774\uBA54\uC77C \uD615\uC2DD\uC774 \uC544\uB2D9\uB2C8\uB2E4"),
  smtpPass: z10.string().min(1, "\uBE44\uBC00\uBC88\uD638\uB294 \uD544\uC218\uC785\uB2C8\uB2E4")
});
var emailService3 = new EmailSettingsService();
router33.get("/", async (req, res) => {
  try {
    if (!req.isAuthenticated() || req.user?.role !== "admin") {
      return res.status(403).json({
        success: false,
        message: "\uAD00\uB9AC\uC790 \uAD8C\uD55C\uC774 \uD544\uC694\uD569\uB2C8\uB2E4"
      });
    }
    const emailService4 = new EmailSettingsService();
    const dbSettings = await emailService4.getDefaultSettings();
    let settings;
    if (dbSettings) {
      settings = emailService4.getMaskedSettings(dbSettings);
    } else {
      const envSettings = emailService4.getSettingsFromEnv();
      settings = {
        smtpHost: envSettings.smtpHost || "",
        smtpPort: envSettings.smtpPort?.toString() || "",
        smtpUser: envSettings.smtpUser || "",
        smtpPass: process.env.SMTP_PASS ? "********" : ""
      };
    }
    res.json({
      success: true,
      data: settings
    });
  } catch (error) {
    console.error("\uC774\uBA54\uC77C \uC124\uC815 \uC870\uD68C \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      message: "\uC774\uBA54\uC77C \uC124\uC815\uC744 \uC870\uD68C\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
    });
  }
});
router33.put("/", async (req, res) => {
  try {
    if (!req.isAuthenticated() || req.user?.role !== "admin") {
      return res.status(403).json({
        success: false,
        message: "\uAD00\uB9AC\uC790 \uAD8C\uD55C\uC774 \uD544\uC694\uD569\uB2C8\uB2E4"
      });
    }
    const validationResult = EmailSettingsSchema.safeParse(req.body);
    if (!validationResult.success) {
      return res.status(400).json({
        success: false,
        message: "\uC785\uB825\uAC12\uC774 \uC720\uD6A8\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4",
        errors: validationResult.error.flatten().fieldErrors
      });
    }
    const { smtpHost, smtpPort, smtpUser, smtpPass } = validationResult.data;
    const userId = req.user?.id || "system";
    const existingSettings = await emailService3.getDefaultSettings();
    let updatedSettings;
    if (existingSettings) {
      updatedSettings = await emailService3.updateSettings(existingSettings.id, {
        smtpHost,
        smtpPort: parseInt(smtpPort),
        smtpUser,
        smtpPass: smtpPass !== "********" ? smtpPass : void 0,
        // 마스킹된 값이면 변경하지 않음
        isDefault: true,
        isActive: true
      }, userId);
    } else {
      updatedSettings = await emailService3.createSettings({
        smtpHost,
        smtpPort: parseInt(smtpPort),
        smtpUser,
        smtpPass,
        fromName: "IKJIN \uAD6C\uB9E4 \uBC1C\uC8FC \uC2DC\uC2A4\uD15C",
        description: "\uC6F9 UI\uC5D0\uC11C \uC124\uC815\uB41C SMTP \uAD6C\uC131",
        isActive: true,
        isDefault: true
      }, userId);
    }
    process.env.SMTP_HOST = smtpHost;
    process.env.SMTP_PORT = smtpPort;
    process.env.SMTP_USER = smtpUser;
    if (smtpPass !== "********") {
      process.env.SMTP_PASS = smtpPass;
    }
    res.json({
      success: true,
      message: "\uC774\uBA54\uC77C \uC124\uC815\uC774 \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uC5D0 \uC800\uC7A5\uB418\uACE0 \uC989\uC2DC \uC801\uC6A9\uB418\uC5C8\uC2B5\uB2C8\uB2E4.",
      data: emailService3.getMaskedSettings(updatedSettings)
    });
  } catch (error) {
    console.error("\uC774\uBA54\uC77C \uC124\uC815 \uC5C5\uB370\uC774\uD2B8 \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      message: "\uC774\uBA54\uC77C \uC124\uC815\uC744 \uC5C5\uB370\uC774\uD2B8\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4",
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router33.post("/test", async (req, res) => {
  try {
    if (!req.isAuthenticated() || req.user?.role !== "admin") {
      return res.status(403).json({
        success: false,
        message: "\uAD00\uB9AC\uC790 \uAD8C\uD55C\uC774 \uD544\uC694\uD569\uB2C8\uB2E4"
      });
    }
    const { testEmail } = req.body;
    if (!testEmail || !z10.string().email().safeParse(testEmail).success) {
      return res.status(400).json({
        success: false,
        message: "\uC720\uD6A8\uD55C \uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C \uC8FC\uC18C\uB97C \uC785\uB825\uD574\uC8FC\uC138\uC694"
      });
    }
    const currentSettings = await emailService3.getDefaultSettings();
    if (!currentSettings) {
      return res.status(404).json({
        success: false,
        message: "\uD65C\uC131\uD654\uB41C \uC774\uBA54\uC77C \uC124\uC815\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4. \uBA3C\uC800 \uC124\uC815\uC744 \uC800\uC7A5\uD574\uC8FC\uC138\uC694."
      });
    }
    const testResult = await emailService3.testSMTPConnection(currentSettings, testEmail);
    if (testResult.success) {
      res.json({
        success: true,
        message: "\uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C\uC774 \uC131\uACF5\uC801\uC73C\uB85C \uBC1C\uC1A1\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
        data: {
          messageId: testResult.messageId,
          testEmail,
          testedAt: (/* @__PURE__ */ new Date()).toISOString()
        }
      });
    } else {
      res.status(500).json({
        success: false,
        message: "\uD14C\uC2A4\uD2B8 \uC774\uBA54\uC77C \uBC1C\uC1A1\uC5D0 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4",
        error: testResult.error
      });
    }
  } catch (error) {
    console.error("\uC774\uBA54\uC77C \uD14C\uC2A4\uD2B8 \uC624\uB958:", error);
    res.status(500).json({
      success: false,
      message: "\uC774\uBA54\uC77C \uD14C\uC2A4\uD2B8 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4",
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
var email_settings_default = router33;

// server/routes/workflow.ts
import { Router as Router31 } from "express";

// server/services/approval-authority-service.ts
init_db();
init_schema();
import { eq as eq30, and as and19, gte as gte7 } from "drizzle-orm";
var ApprovalAuthorityService = class {
  /**
   * Check user's approval authority for a given amount
   */
  async checkAuthority(user, orderAmount) {
    const authority = await db.select().from(approvalAuthorities).where(and19(
      eq30(approvalAuthorities.role, user.role),
      eq30(approvalAuthorities.isActive, true)
    )).limit(1);
    if (!authority || authority.length === 0) {
      return {
        canDirectApprove: false,
        requiresApproval: true,
        nextApprover: await this.findNextApprover(orderAmount)
      };
    }
    const auth = authority[0];
    if (auth.canDirectApprove && auth.directApproveLimit) {
      const directLimit = parseFloat(auth.directApproveLimit.toString());
      if (orderAmount <= directLimit) {
        return {
          canDirectApprove: true,
          directApproveLimit: directLimit,
          requiresApproval: false,
          bypassReason: "direct_approval" /* DIRECT_APPROVAL */
        };
      }
    }
    const maxAmount = parseFloat(auth.maxAmount.toString());
    if (orderAmount <= maxAmount) {
      return {
        canDirectApprove: false,
        requiresApproval: true,
        nextApprover: user.id
      };
    }
    return {
      canDirectApprove: false,
      requiresApproval: true,
      nextApprover: await this.findNextApprover(orderAmount)
    };
  }
  /**
   * Check if user can directly approve without workflow
   */
  async canDirectApprove(user, orderAmount) {
    const check = await this.checkAuthority(user, orderAmount);
    return check.canDirectApprove;
  }
  /**
   * Find the appropriate approver for a given amount
   */
  async findNextApprover(orderAmount) {
    const authorities = await db.select().from(approvalAuthorities).where(and19(
      gte7(approvalAuthorities.maxAmount, orderAmount.toString()),
      eq30(approvalAuthorities.isActive, true)
    )).orderBy(approvalAuthorities.maxAmount);
    if (authorities.length === 0) {
      const executive = await db.select().from(users).where(eq30(users.role, "executive")).limit(1);
      return executive[0]?.id;
    }
    const lowestAuthority = authorities[0];
    const approver = await db.select().from(users).where(and19(
      eq30(users.role, lowestAuthority.role),
      eq30(users.isActive, true)
    )).limit(1);
    return approver[0]?.id;
  }
  /**
   * Get list of required approvers for an order amount
   */
  async getRequiredApprovers(orderAmount, companyId) {
    const approvers = [];
    const authorities = await db.select({
      role: approvalAuthorities.role,
      maxAmount: approvalAuthorities.maxAmount,
      canDirectApprove: approvalAuthorities.canDirectApprove,
      directApproveLimit: approvalAuthorities.directApproveLimit
    }).from(approvalAuthorities).where(and19(
      eq30(approvalAuthorities.isActive, true),
      gte7(approvalAuthorities.maxAmount, orderAmount.toString())
    )).orderBy(approvalAuthorities.maxAmount);
    for (const auth of authorities) {
      const usersInRole = await db.select({
        id: users.id,
        name: users.name,
        email: users.email,
        role: users.role
      }).from(users).where(and19(
        eq30(users.role, auth.role),
        eq30(users.isActive, true),
        companyId ? eq30(users.companyId, companyId) : void 0
      ));
      if (usersInRole.length > 0) {
        approvers.push({
          userId: usersInRole[0].id,
          name: usersInRole[0].name,
          email: usersInRole[0].email,
          role: usersInRole[0].role,
          level: approvers.length + 1,
          canDirectApprove: auth.canDirectApprove || false,
          approvalLimit: parseFloat(auth.maxAmount.toString())
        });
        if (auth.canDirectApprove && auth.directApproveLimit) {
          const directLimit = parseFloat(auth.directApproveLimit.toString());
          if (orderAmount <= directLimit) {
            break;
          }
        }
      }
    }
    return approvers;
  }
  /**
   * Check if order meets auto-approval criteria
   */
  async checkAutoApproval(order) {
    const SMALL_AMOUNT_THRESHOLD = 1e5;
    if (order.totalAmount && parseFloat(order.totalAmount.toString()) < SMALL_AMOUNT_THRESHOLD) {
      return {
        shouldAutoApprove: true,
        reason: "amount_threshold" /* AMOUNT_THRESHOLD */
      };
    }
    if (order.notes && order.notes.toLowerCase().includes("\uAE34\uAE09") || order.notes?.toLowerCase().includes("emergency")) {
      return {
        shouldAutoApprove: true,
        reason: "emergency" /* EMERGENCY */
      };
    }
    if (order.approvalBypassReason === "excel_automation" /* EXCEL_AUTOMATION */) {
      return {
        shouldAutoApprove: true,
        reason: "excel_automation" /* EXCEL_AUTOMATION */
      };
    }
    if (order.vendorId) {
      const recentOrders = await db.select().from(purchaseOrders).where(and19(
        eq30(purchaseOrders.vendorId, order.vendorId),
        eq30(purchaseOrders.orderStatus, "delivered")
        // Check orders from last 30 days
      )).limit(1);
      if (recentOrders.length > 0) {
        return {
          shouldAutoApprove: true,
          reason: "repeat_order" /* REPEAT_ORDER */
        };
      }
    }
    return {
      shouldAutoApprove: false
    };
  }
  /**
   * Update order with approval decision
   */
  async processApproval(orderId, approverId, decision, comments) {
    try {
      const updateData = {
        approvalStatus: decision,
        updatedAt: /* @__PURE__ */ new Date()
      };
      if (decision === "approved") {
        updateData.approvedBy = approverId;
        updateData.approvedAt = /* @__PURE__ */ new Date();
        updateData.orderStatus = "created";
      } else if (decision === "rejected") {
        updateData.rejectedBy = approverId;
        updateData.rejectedAt = /* @__PURE__ */ new Date();
        updateData.rejectionReason = comments;
        updateData.orderStatus = "draft";
      }
      await db.update(purchaseOrders).set(updateData).where(eq30(purchaseOrders.id, orderId));
      return true;
    } catch (error) {
      console.error("Error processing approval:", error);
      return false;
    }
  }
};
var approvalAuthorityService = new ApprovalAuthorityService();

// server/services/workflow-engine.ts
init_db();
init_schema();
import { eq as eq32 } from "drizzle-orm";

// server/services/websocket-service.ts
init_db();
init_schema();
import { Server as SocketIOServer } from "socket.io";
import { eq as eq31 } from "drizzle-orm";
var WebSocketService = class _WebSocketService {
  constructor() {
    this.io = null;
    this.connectedUsers = /* @__PURE__ */ new Map();
    this.userSockets = /* @__PURE__ */ new Map();
    this.socketUsers = /* @__PURE__ */ new Map();
  }
  initialize(server) {
    this.io = new SocketIOServer(server, {
      cors: {
        origin: [
          "http://localhost:3000",
          "http://localhost:5000",
          "https://ikjin-po-mgmt-20250813-dno9.vercel.app",
          "https://ikjin-po-mgmt-20250813-dn.vercel.app",
          /^https:\/\/ikjin-po-mgmt-20250813-[a-z0-9]+-davidswyang-3963s-projects\.vercel\.app$/
        ],
        methods: ["GET", "POST"],
        credentials: true
      }
    });
    this.io.on("connection", (socket) => {
      console.log("\u{1F50C} WebSocket connection established:", socket.id);
      socket.on("authenticate", async (data) => {
        try {
          const user = await db.select().from(users).where(eq31(users.id, data.userId)).then((rows) => rows[0]);
          if (user) {
            const webSocketUser = {
              id: user.id,
              name: user.name,
              role: user.role,
              companyId: user.companyId || void 0
            };
            this.connectedUsers.set(socket.id, {
              socketId: socket.id,
              user: webSocketUser
            });
            socket.join(`user_${user.id}`);
            socket.join(`company_${user.companyId}`);
            socket.join(`role_${user.role}`);
            socket.emit("authenticated", {
              success: true,
              user: webSocketUser
            });
            console.log(`\u2705 User authenticated: ${user.name} (${user.role})`);
          } else {
            socket.emit("authentication_error", {
              error: "User not found"
            });
          }
        } catch (error) {
          console.error("Authentication error:", error);
          socket.emit("authentication_error", {
            error: "Authentication failed"
          });
        }
      });
      socket.on("disconnect", () => {
        const userInfo = this.connectedUsers.get(socket.id);
        if (userInfo) {
          console.log(`\u{1F50C} User disconnected: ${userInfo.user.name}`);
          this.connectedUsers.delete(socket.id);
        }
      });
      socket.on("subscribe_order", (orderId) => {
        socket.join(`order_${orderId}`);
        console.log(`\u{1F4CB} Subscribed to order ${orderId}`);
      });
      socket.on("unsubscribe_order", (orderId) => {
        socket.leave(`order_${orderId}`);
        console.log(`\u{1F4CB} Unsubscribed from order ${orderId}`);
      });
    });
    console.log("\u{1F680} WebSocket service initialized");
  }
  // Broadcast order update to relevant users
  broadcastOrderUpdate(event) {
    if (!this.io) return;
    this.io.to(`order_${event.orderId}`).emit("workflow_event", {
      type: "order_updated",
      data: event
    });
    if (event.updatedBy.companyId) {
      this.io.to(`company_${event.updatedBy.companyId}`).emit("workflow_event", {
        type: "order_updated",
        data: event
      });
    }
    console.log(`\u{1F4E2} Broadcasted order update: ${event.orderNumber} \u2192 ${event.orderStatus}/${event.approvalStatus}`);
  }
  // Send approval request notification
  notifyApprovalRequest(event) {
    if (!this.io) return;
    this.io.to(`user_${event.requiredApprover.id}`).emit("workflow_event", {
      type: "approval_requested",
      data: event
    });
    this.io.to(`order_${event.orderId}`).emit("workflow_event", {
      type: "approval_requested",
      data: event
    });
    console.log(`\u{1F514} Sent approval request to ${event.requiredApprover.name} for order ${event.orderNumber}`);
  }
  // Broadcast approval decision
  broadcastApprovalDecision(event, decision) {
    if (!this.io) return;
    const eventType = decision === "approved" ? "order_approved" : "order_rejected";
    this.io.to(`order_${event.orderId}`).emit("workflow_event", {
      type: eventType,
      data: event
    });
    if (event.updatedBy.companyId) {
      this.io.to(`company_${event.updatedBy.companyId}`).emit("workflow_event", {
        type: eventType,
        data: event
      });
    }
    console.log(`\u{1F4E2} Broadcasted approval decision: ${event.orderNumber} \u2192 ${decision}`);
  }
  // Notify delivery confirmation
  notifyDeliveryConfirmation(event) {
    if (!this.io) return;
    this.io.to(`order_${event.orderId}`).emit("workflow_event", {
      type: "delivery_confirmed",
      data: event
    });
    if (event.confirmedBy.companyId) {
      this.io.to(`company_${event.confirmedBy.companyId}`).emit("workflow_event", {
        type: "delivery_confirmed",
        data: event
      });
    }
    console.log(`\u{1F4E6} Notified delivery confirmation: ${event.orderNumber}`);
  }
  // Send notification to specific user
  notifyUser(userId, notification) {
    if (!this.io) return;
    this.io.to(`user_${userId}`).emit("notification", notification);
    console.log(`\u{1F514} Sent notification to user ${userId}: ${notification.title}`);
  }
  // Get connected users count
  getConnectedUsersCount() {
    return this.connectedUsers.size;
  }
  // Get connected users for a company
  getCompanyUsers(companyId) {
    return Array.from(this.connectedUsers.values()).filter((userInfo) => userInfo.user.companyId === companyId).map((userInfo) => userInfo.user);
  }
  // Check if user is online
  isUserOnline(userId) {
    return Array.from(this.connectedUsers.values()).some((userInfo) => userInfo.user.id === userId);
  }
  // Get singleton instance
  static getInstance() {
    if (!_WebSocketService.instance) {
      _WebSocketService.instance = new _WebSocketService();
    }
    return _WebSocketService.instance;
  }
  // Emit event to specific user
  emitToUser(userId, event, data) {
    if (!this.io) return;
    this.io.to(`user_${userId}`).emit(event, data);
  }
  // Emit event to session subscribers  
  emitToSession(sessionId, event, data) {
    if (!this.io) return;
    this.io.to(`session_${sessionId}`).emit(event, data);
  }
};
var webSocketService = WebSocketService.getInstance();

// server/services/workflow-engine.ts
var WorkflowEngine = class {
  /**
   * Process the next step in the workflow automatically
   */
  async processNextStep(orderId, userId) {
    const order = await db.select().from(purchaseOrders).where(eq32(purchaseOrders.id, orderId)).limit(1);
    if (!order || order.length === 0) {
      throw new Error(`Order ${orderId} not found`);
    }
    const currentOrder = order[0];
    const user = await this.getUser(userId);
    if (currentOrder.orderStatus === "draft") {
      const authorityCheck = await approvalAuthorityService.checkAuthority(
        user,
        parseFloat(currentOrder.totalAmount?.toString() || "0")
      );
      if (authorityCheck.canDirectApprove) {
        await this.updateOrderStatus(orderId, "created", "not_required", {
          approvalBypassReason: "direct_approval" /* DIRECT_APPROVAL */,
          approvedBy: userId,
          approvedAt: /* @__PURE__ */ new Date()
        });
        await this.sendOrderIfReady(orderId);
      } else if (authorityCheck.requiresApproval) {
        await this.updateOrderStatus(orderId, "created", "pending", {
          nextApproverId: authorityCheck.nextApprover,
          approvalRequestedAt: /* @__PURE__ */ new Date()
        });
        await this.notifyApprover(authorityCheck.nextApprover, orderId);
      } else {
        const autoApproval = await approvalAuthorityService.checkAutoApproval(currentOrder);
        if (autoApproval.shouldAutoApprove) {
          await this.updateOrderStatus(orderId, "created", "not_required", {
            approvalBypassReason: autoApproval.reason
          });
          await this.sendOrderIfReady(orderId);
        }
      }
    } else if (currentOrder.orderStatus === "created" && currentOrder.approvalStatus === "approved") {
      await this.sendOrderIfReady(orderId);
    } else if (currentOrder.orderStatus === "sent") {
      console.log(`Order ${orderId} is sent, awaiting delivery confirmation`);
    }
    await this.logWorkflowEvent(orderId, "workflow_processed", userId, {
      fromStatus: currentOrder.orderStatus,
      fromApproval: currentOrder.approvalStatus
    });
  }
  /**
   * Track workflow progress for an order
   */
  async trackWorkflowProgress(orderId) {
    const order = await db.select().from(purchaseOrders).where(eq32(purchaseOrders.id, orderId)).limit(1);
    if (!order || order.length === 0) {
      throw new Error(`Order ${orderId} not found`);
    }
    const currentOrder = order[0];
    const history = await db.select({
      timestamp: orderHistory.changedAt,
      event: orderHistory.changeType,
      actor: orderHistory.userId,
      details: orderHistory.changedData
    }).from(orderHistory).where(eq32(orderHistory.orderId, orderId)).orderBy(orderHistory.changedAt);
    const { currentStep, nextStep, estimatedCompletion } = this.determineWorkflowSteps(
      currentOrder.orderStatus,
      currentOrder.approvalStatus
    );
    return {
      orderId: orderId.toString(),
      orderStatus: currentOrder.orderStatus,
      approvalStatus: currentOrder.approvalStatus,
      currentStep,
      nextStep,
      estimatedCompletion,
      history: history.map((h) => ({
        timestamp: h.timestamp || /* @__PURE__ */ new Date(),
        event: h.event,
        actor: h.actor || "system",
        details: h.details
      }))
    };
  }
  /**
   * Send notifications based on workflow events
   */
  async sendNotifications(orderId, event) {
    const order = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      nextApproverId: purchaseOrders.nextApproverId,
      createdBy: purchaseOrders.createdBy,
      vendorId: purchaseOrders.vendorId
    }).from(purchaseOrders).where(eq32(purchaseOrders.id, orderId)).limit(1);
    if (!order || order.length === 0) return;
    const currentOrder = order[0];
    switch (event) {
      case "approval_requested":
        if (currentOrder.nextApproverId) {
          await this.notifyApprover(currentOrder.nextApproverId, orderId);
        }
        break;
      case "order_approved":
        await this.notifyCreator(currentOrder.createdBy, orderId, "approved");
        break;
      case "order_rejected":
        await this.notifyCreator(currentOrder.createdBy, orderId, "rejected");
        break;
      case "order_sent":
        await this.notifyCreator(currentOrder.createdBy, orderId, "sent");
        break;
      case "delivery_completed":
        await this.notifyCreator(currentOrder.createdBy, orderId, "delivered");
        break;
    }
  }
  /**
   * Update order status with validation and WebSocket broadcast
   */
  async updateOrderStatus(orderId, orderStatus, approvalStatus, additionalData) {
    const beforeOrder = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      orderStatus: purchaseOrders.orderStatus,
      approvalStatus: purchaseOrders.approvalStatus,
      userId: purchaseOrders.userId
    }).from(purchaseOrders).where(eq32(purchaseOrders.id, orderId)).limit(1);
    if (!beforeOrder || beforeOrder.length === 0) return;
    await db.update(purchaseOrders).set({
      orderStatus,
      approvalStatus,
      ...additionalData,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq32(purchaseOrders.id, orderId));
    const updatedBy = await this.getUserAsWebSocketUser(beforeOrder[0].userId);
    if (updatedBy) {
      const event = {
        orderId,
        orderNumber: beforeOrder[0].orderNumber || `PO-${orderId}`,
        orderStatus,
        approvalStatus,
        updatedBy,
        timestamp: /* @__PURE__ */ new Date(),
        changes: {
          from: {
            orderStatus: beforeOrder[0].orderStatus,
            approvalStatus: beforeOrder[0].approvalStatus
          },
          to: {
            orderStatus,
            approvalStatus
          },
          ...additionalData
        }
      };
      webSocketService.broadcastOrderUpdate(event);
    }
  }
  /**
   * Send order email if ready
   */
  async sendOrderIfReady(orderId) {
    const order = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      vendorId: purchaseOrders.vendorId
    }).from(purchaseOrders).where(eq32(purchaseOrders.id, orderId)).limit(1);
    if (!order || order.length === 0) return;
    const vendor = await db.select().from(vendors).where(eq32(vendors.id, order[0].vendorId)).limit(1);
    if (vendor[0]?.email) {
      try {
        console.log(`Email would be sent to ${vendor[0].email} for order ${order[0].orderNumber}`);
        await this.updateOrderStatus(orderId, "sent", "not_required", {
          sentAt: /* @__PURE__ */ new Date()
        });
      } catch (error) {
        console.error(`Failed to update order status for ${orderId}:`, error);
      }
    }
  }
  /**
   * Determine workflow steps based on status
   */
  determineWorkflowSteps(orderStatus, approvalStatus) {
    if (orderStatus === "draft") {
      return {
        currentStep: "\uBC1C\uC8FC\uC11C \uC791\uC131 \uC911",
        nextStep: approvalStatus === "not_required" ? "\uBC1C\uC8FC\uC11C \uBC1C\uC1A1" : "\uC2B9\uC778 \uC694\uCCAD",
        estimatedCompletion: new Date(Date.now() + 2 * 60 * 60 * 1e3)
        // 2 hours
      };
    }
    if (orderStatus === "created" && approvalStatus === "pending") {
      return {
        currentStep: "\uC2B9\uC778 \uB300\uAE30 \uC911",
        nextStep: "\uC2B9\uC778 \uC644\uB8CC \uD6C4 \uBC1C\uC1A1",
        estimatedCompletion: new Date(Date.now() + 24 * 60 * 60 * 1e3)
        // 24 hours
      };
    }
    if (orderStatus === "created" && approvalStatus === "approved") {
      return {
        currentStep: "\uC2B9\uC778 \uC644\uB8CC",
        nextStep: "\uBC1C\uC8FC\uC11C \uBC1C\uC1A1",
        estimatedCompletion: new Date(Date.now() + 1 * 60 * 60 * 1e3)
        // 1 hour
      };
    }
    if (orderStatus === "sent") {
      return {
        currentStep: "\uBC1C\uC1A1 \uC644\uB8CC",
        nextStep: "\uB0A9\uD488 \uB300\uAE30",
        estimatedCompletion: new Date(Date.now() + 7 * 24 * 60 * 60 * 1e3)
        // 7 days
      };
    }
    if (orderStatus === "delivered") {
      return {
        currentStep: "\uB0A9\uD488 \uC644\uB8CC",
        nextStep: void 0,
        estimatedCompletion: void 0
      };
    }
    return {
      currentStep: "\uC0C1\uD0DC \uD655\uC778 \uC911",
      nextStep: void 0,
      estimatedCompletion: void 0
    };
  }
  /**
   * Log workflow event to history
   */
  async logWorkflowEvent(orderId, event, userId, details) {
    await db.insert(orderHistory).values({
      orderId,
      userId,
      changeType: event,
      changedData: details || {},
      changedAt: /* @__PURE__ */ new Date()
    });
  }
  /**
   * Get user details
   */
  async getUser(userId) {
    const user = await db.select().from(users).where(eq32(users.id, userId)).limit(1);
    if (!user || user.length === 0) {
      throw new Error(`User ${userId} not found`);
    }
    return user[0];
  }
  /**
   * Notify approver about pending approval
   */
  async notifyApprover(approverId, orderId) {
    const approver = await this.getUserAsWebSocketUser(approverId);
    const order = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      totalAmount: purchaseOrders.totalAmount,
      userId: purchaseOrders.userId
    }).from(purchaseOrders).where(eq32(purchaseOrders.id, orderId)).limit(1);
    if (order[0] && approver) {
      const requestedBy = await this.getUserAsWebSocketUser(order[0].userId);
      if (requestedBy) {
        const event = {
          orderId,
          orderNumber: order[0].orderNumber || `PO-${orderId}`,
          requestedBy,
          requiredApprover: approver,
          orderAmount: parseFloat(order[0].totalAmount?.toString() || "0"),
          timestamp: /* @__PURE__ */ new Date()
        };
        webSocketService.notifyApprovalRequest(event);
      }
    }
    console.log(`\u{1F4E7} Notification sent to approver ${approverId} for order ${orderId}`);
  }
  /**
   * Notify order creator about status change
   */
  async notifyCreator(creatorId, orderId, status) {
    const creator = await this.getUserAsWebSocketUser(creatorId);
    if (creator) {
      webSocketService.notifyUser(creatorId, {
        title: "\uBC1C\uC8FC\uC11C \uC0C1\uD0DC \uBCC0\uACBD",
        message: `\uBC1C\uC8FC\uC11C ${orderId}\uC758 \uC0C1\uD0DC\uAC00 ${this.getStatusDisplayName(status)}\uB85C \uBCC0\uACBD\uB418\uC5C8\uC2B5\uB2C8\uB2E4.`,
        type: status === "rejected" ? "error" : "success",
        data: { orderId, status }
      });
    }
    console.log(`\u{1F4E7} Notification sent to creator ${creatorId}: Order ${orderId} is ${status}`);
  }
  /**
   * Convert database user to WebSocket user format
   */
  async getUserAsWebSocketUser(userId) {
    try {
      const user = await this.getUser(userId);
      return {
        id: user.id,
        name: user.name,
        role: user.role,
        companyId: user.companyId || void 0
      };
    } catch (error) {
      console.error(`Failed to get user ${userId}:`, error);
      return null;
    }
  }
  /**
   * Get display name for status
   */
  getStatusDisplayName(status) {
    const statusMap = {
      "approved": "\uC2B9\uC778\uB428",
      "rejected": "\uBC18\uB824\uB428",
      "sent": "\uBC1C\uC1A1\uB428",
      "delivered": "\uB0A9\uD488\uB428"
    };
    return statusMap[status] || status;
  }
};
var workflowEngine = new WorkflowEngine();

// server/routes/workflow.ts
init_db();
init_schema();
import { eq as eq33 } from "drizzle-orm";
var router34 = Router31();
router34.post("/api/orders/check-approval-authority", async (req, res) => {
  try {
    const { amount } = req.body;
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    if (!amount || amount <= 0) {
      return res.status(400).json({ message: "Invalid amount" });
    }
    const user = await db.select().from(users).where(eq33(users.id, userId)).limit(1);
    if (!user || user.length === 0) {
      return res.status(404).json({ message: "User not found" });
    }
    const authorityCheck = await approvalAuthorityService.checkAuthority(
      user[0],
      amount
    );
    let approvers = [];
    if (authorityCheck.requiresApproval) {
      approvers = await approvalAuthorityService.getRequiredApprovers(
        amount,
        user[0].companyId
      );
    }
    res.json({
      ...authorityCheck,
      approvers,
      estimatedApprovalTime: authorityCheck.requiresApproval ? "2-4 hours" : "Immediate"
    });
  } catch (error) {
    console.error("Error checking approval authority:", error);
    res.status(500).json({
      message: "Failed to check approval authority",
      error: process.env.NODE_ENV === "development" ? error.message : void 0
    });
  }
});
router34.post("/api/orders/create-with-workflow", async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    const orderData = req.body;
    const user = await db.select().from(users).where(eq33(users.id, userId)).limit(1);
    if (!user || user.length === 0) {
      return res.status(404).json({ message: "User not found" });
    }
    const authorityCheck = await approvalAuthorityService.checkAuthority(
      user[0],
      orderData.totalAmount
    );
    let orderStatus = "draft";
    let approvalStatus = "not_required";
    let approvalBypassReason = void 0;
    let nextApproverId = void 0;
    if (authorityCheck.canDirectApprove) {
      orderStatus = "created";
      approvalStatus = "not_required";
      approvalBypassReason = authorityCheck.bypassReason;
    } else if (authorityCheck.requiresApproval) {
      orderStatus = "created";
      approvalStatus = "pending";
      nextApproverId = authorityCheck.nextApprover;
    } else {
      const autoApproval = await approvalAuthorityService.checkAutoApproval(orderData);
      if (autoApproval.shouldAutoApprove) {
        orderStatus = "created";
        approvalStatus = "not_required";
        approvalBypassReason = autoApproval.reason;
      }
    }
    const newOrder = await db.insert(purchaseOrders).values({
      ...orderData,
      orderStatus,
      approvalStatus,
      approvalBypassReason,
      nextApproverId,
      approvalRequestedAt: approvalStatus === "pending" ? /* @__PURE__ */ new Date() : void 0,
      createdBy: userId,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    }).returning();
    if (orderStatus !== "draft") {
      await workflowEngine.processNextStep(newOrder[0].id, userId);
    }
    if (approvalStatus === "pending") {
      await workflowEngine.sendNotifications(newOrder[0].id, "approval_requested");
    }
    res.json({
      order: newOrder[0],
      workflow: {
        requiresApproval: authorityCheck.requiresApproval,
        canDirectApprove: authorityCheck.canDirectApprove,
        nextApprover: authorityCheck.nextApprover,
        estimatedCompletion: authorityCheck.requiresApproval ? "2-4 hours" : "Immediate"
      }
    });
  } catch (error) {
    console.error("Error creating order with workflow:", error);
    res.status(500).json({
      message: "Failed to create order",
      error: process.env.NODE_ENV === "development" ? error.message : void 0
    });
  }
});
router34.get("/api/orders/workflow-status/:id", async (req, res) => {
  try {
    const orderId = parseInt(req.params.id, 10);
    if (isNaN(orderId)) {
      return res.status(400).json({ message: "Invalid order ID" });
    }
    const workflowStatus = await workflowEngine.trackWorkflowProgress(orderId);
    res.json(workflowStatus);
  } catch (error) {
    console.error("Error getting workflow status:", error);
    res.status(500).json({
      message: "Failed to get workflow status",
      error: process.env.NODE_ENV === "development" ? error.message : void 0
    });
  }
});
router34.post("/api/orders/:id/approve", async (req, res) => {
  try {
    const orderId = parseInt(req.params.id, 10);
    const userId = req.user?.id;
    const { decision, comments } = req.body;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    if (isNaN(orderId)) {
      return res.status(400).json({ message: "Invalid order ID" });
    }
    if (!["approved", "rejected"].includes(decision)) {
      return res.status(400).json({ message: "Invalid decision" });
    }
    const success = await approvalAuthorityService.processApproval(
      orderId,
      userId,
      decision,
      comments
    );
    if (success) {
      await workflowEngine.processNextStep(orderId, userId);
      const eventType = decision === "approved" ? "order_approved" : "order_rejected";
      await workflowEngine.sendNotifications(orderId, eventType);
      res.json({
        message: `Order ${decision}`,
        success: true
      });
    } else {
      res.status(500).json({
        message: "Failed to process approval",
        success: false
      });
    }
  } catch (error) {
    console.error("Error processing approval:", error);
    res.status(500).json({
      message: "Failed to process approval",
      error: process.env.NODE_ENV === "development" ? error.message : void 0
    });
  }
});
router34.post("/api/orders/:id/confirm-delivery", async (req, res) => {
  try {
    const orderId = parseInt(req.params.id, 10);
    const userId = req.user?.id;
    const { notes, receivedItems } = req.body;
    if (!userId) {
      return res.status(401).json({ message: "User not authenticated" });
    }
    if (isNaN(orderId)) {
      return res.status(400).json({ message: "Invalid order ID" });
    }
    await db.update(purchaseOrders).set({
      orderStatus: "delivered",
      deliveredAt: /* @__PURE__ */ new Date(),
      deliveredBy: userId,
      notes: notes || void 0,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq33(purchaseOrders.id, orderId));
    await workflowEngine.sendNotifications(orderId, "delivery_completed");
    res.json({
      message: "Delivery confirmed",
      success: true
    });
  } catch (error) {
    console.error("Error confirming delivery:", error);
    res.status(500).json({
      message: "Failed to confirm delivery",
      error: process.env.NODE_ENV === "development" ? error.message : void 0
    });
  }
});
router34.get("/api/orders/required-approvers", async (req, res) => {
  try {
    const amount = parseFloat(req.query.amount);
    const companyId = req.query.companyId ? parseInt(req.query.companyId, 10) : void 0;
    if (isNaN(amount) || amount <= 0) {
      return res.status(400).json({ message: "Invalid amount" });
    }
    const approvers = await approvalAuthorityService.getRequiredApprovers(amount, companyId);
    res.json({
      approvers,
      totalLevels: approvers.length,
      estimatedTime: `${approvers.length * 2}-${approvers.length * 4} hours`
    });
  } catch (error) {
    console.error("Error getting required approvers:", error);
    res.status(500).json({
      message: "Failed to get required approvers",
      error: process.env.NODE_ENV === "development" ? error.message : void 0
    });
  }
});
var workflow_default = router34;

// server/routes/excel-smart-upload-simple.ts
import { Router as Router32 } from "express";
import multer7 from "multer";
import xlsx from "xlsx";
import crypto3 from "crypto";
var router35 = Router32();
var storage6 = multer7.memoryStorage();
var upload7 = multer7({
  storage: storage6,
  limits: {
    fileSize: 10 * 1024 * 1024
    // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    console.log("=== File Upload Debug ===");
    console.log("File name:", file.originalname);
    console.log("File MIME type:", file.mimetype);
    const validMimeTypes = [
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      "application/vnd.ms-excel",
      "application/vnd.ms-excel.sheet.macroEnabled.12",
      "application/octet-stream"
      // Sometimes Excel files are uploaded as octet-stream
    ];
    const fileName = file.originalname.toLowerCase();
    const hasValidExtension = fileName.endsWith(".xlsx") || fileName.endsWith(".xls") || fileName.endsWith(".xlsm");
    const hasValidMimeType = validMimeTypes.includes(file.mimetype);
    console.log("Valid MIME type:", hasValidMimeType);
    console.log("Valid extension:", hasValidExtension);
    if (hasValidMimeType && hasValidExtension) {
      console.log("File accepted:", file.originalname);
      cb(null, true);
    } else {
      console.log("File rejected:", file.originalname, "MIME type:", file.mimetype, "Extension valid:", hasValidExtension);
      cb(new Error("Only Excel files are allowed"));
    }
  }
});
var standardFieldMappings = {
  // Standard template fields only
  "\uBC1C\uC8FC\uC77C\uC790": "orderDate",
  "\uB0A9\uAE30\uC77C\uC790": "deliveryDate",
  "\uAC70\uB798\uCC98\uBA85": "vendorName",
  "\uAC70\uB798\uCC98 \uC774\uBA54\uC77C": "vendorEmail",
  "\uB0A9\uD488\uCC98\uBA85": "deliveryLocation",
  "\uB0A9\uD488\uCC98 \uC774\uBA54\uC77C": "deliveryEmail",
  "\uD504\uB85C\uC81D\uD2B8\uBA85": "projectName",
  "\uD488\uBAA9\uBA85": "itemName",
  "\uADDC\uACA9": "specification",
  "\uC218\uB7C9": "quantity",
  "\uB2E8\uAC00": "unitPrice",
  "\uCD1D\uAE08\uC561": "totalAmount",
  "\uB300\uBD84\uB958": "majorCategory",
  "\uC911\uBD84\uB958": "middleCategory",
  "\uC18C\uBD84\uB958": "minorCategory",
  "\uBE44\uACE0": "notes"
};
var requiredStandardFields = ["\uAC70\uB798\uCC98\uBA85", "\uD504\uB85C\uC81D\uD2B8\uBA85", "\uD488\uBAA9\uBA85"];
var emailFields = ["\uAC70\uB798\uCC98 \uC774\uBA54\uC77C", "\uB0A9\uD488\uCC98 \uC774\uBA54\uC77C"];
var numberFields = ["\uC218\uB7C9", "\uB2E8\uAC00", "\uCD1D\uAE08\uC561"];
router35.post("/process", upload7.single("file"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: "No file uploaded"
      });
    }
    console.log("=== Excel Smart Upload Processing Started ===");
    console.log("File received:", req.file.originalname);
    console.log("File size:", req.file.size, "bytes");
    const workbook = xlsx.read(req.file.buffer, { type: "buffer" });
    let sheetName = workbook.SheetNames.find(
      (name) => name === "Input" || name.toLowerCase().includes("input")
    ) || workbook.SheetNames[0];
    console.log("Available sheets:", workbook.SheetNames);
    console.log("Processing sheet:", sheetName);
    const worksheet = workbook.Sheets[sheetName];
    const rawData = xlsx.utils.sheet_to_json(worksheet, { header: 1 });
    if (!rawData || rawData.length === 0) {
      return res.status(400).json({
        success: false,
        error: "\uBE48 Excel \uD30C\uC77C",
        message: "Excel \uD30C\uC77C\uC5D0 \uB370\uC774\uD130\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4."
      });
    }
    const headers = rawData[0] || [];
    console.log("Headers found:", headers);
    console.log("First data row:", rawData[1]);
    const missingFields = [];
    const incorrectFields = [];
    console.log("Checking required fields:", requiredStandardFields);
    requiredStandardFields.forEach((field) => {
      if (!headers.includes(field)) {
        missingFields.push(field);
        console.log(`Missing required field: ${field}`);
      }
    });
    headers.forEach((header) => {
      if (header && typeof header === "string" && header.trim()) {
        if (!standardFieldMappings[header]) {
          if (header === "\uBC1C\uC8FC\uC77C" || header === "\uB0A9\uAE30\uC77C") {
            incorrectFields.push(`${header} \u2192 \uC815\uD655\uD55C \uD544\uB4DC\uBA85: ${header}\uC790`);
          } else if (header === "\uD604\uC7A5\uBA85") {
            incorrectFields.push(`${header} \u2192 \uC815\uD655\uD55C \uD544\uB4DC\uBA85: \uD504\uB85C\uC81D\uD2B8\uBA85`);
          } else if (header === "\uD488\uBAA9") {
            incorrectFields.push(`${header} \u2192 \uC815\uD655\uD55C \uD544\uB4DC\uBA85: \uD488\uBAA9\uBA85`);
          } else if (header === "\uAC70\uB798\uCC98") {
            incorrectFields.push(`${header} \u2192 \uC815\uD655\uD55C \uD544\uB4DC\uBA85: \uAC70\uB798\uCC98\uBA85`);
          } else if (header === "\uD569\uACC4") {
            incorrectFields.push(`${header} \u2192 \uC815\uD655\uD55C \uD544\uB4DC\uBA85: \uCD1D\uAE08\uC561`);
          } else if (header === "\uACF5\uAE09\uAC00\uC561" || header === "\uBD80\uAC00\uC138") {
            incorrectFields.push(`${header} \u2192 \uC774 \uD544\uB4DC\uB294 \uC81C\uAC70\uD558\uACE0 '\uCD1D\uAE08\uC561'\uB9CC \uC0AC\uC6A9\uD558\uC138\uC694`);
          } else if (header === "\uBC1C\uC8FC\uBC88\uD638" || header === "\uB2E8\uC704") {
            incorrectFields.push(`${header} \u2192 \uD45C\uC900 \uD15C\uD50C\uB9BF\uC5D0 \uC5C6\uB294 \uD544\uB4DC\uC785\uB2C8\uB2E4`);
          }
        }
      }
    });
    console.log("Missing fields:", missingFields);
    console.log("Incorrect fields:", incorrectFields);
    if (missingFields.length > 0 || incorrectFields.length > 0) {
      const errorResponse = {
        success: false,
        error: "Excel \uD544\uB4DC\uBA85 \uC624\uB958",
        fieldErrors: {
          missing: missingFields,
          incorrect: incorrectFields
        },
        message: `Excel \uD30C\uC77C\uC758 \uD544\uB4DC\uBA85\uC774 \uD45C\uC900 \uD615\uC2DD\uACFC \uC77C\uCE58\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.

` + (missingFields.length > 0 ? `\u274C \uD544\uC218 \uD544\uB4DC \uB204\uB77D:
${missingFields.map((f) => `  \u2022 ${f}`).join("\n")}

` : "") + (incorrectFields.length > 0 ? `\u26A0\uFE0F \uC798\uBABB\uB41C \uD544\uB4DC\uBA85:
${incorrectFields.map((f) => `  \u2022 ${f}`).join("\n")}

` : "") + `\u{1F4E5} \uD45C\uC900 \uD15C\uD50C\uB9BF\uC744 \uB2E4\uC6B4\uB85C\uB4DC\uD558\uC5EC \uC815\uD655\uD55C \uD544\uB4DC\uBA85\uC744 \uC0AC\uC6A9\uD574\uC8FC\uC138\uC694.`,
        templateUrl: "/api/excel-template/download"
      };
      console.log("Returning field validation error:", errorResponse);
      return res.status(400).json(errorResponse);
    }
    console.log("Field validation passed! Continuing with data processing...");
    const data = xlsx.utils.sheet_to_json(worksheet);
    console.log("Total data rows:", data.length);
    console.log("First parsed row:", data[0]);
    const hashes = /* @__PURE__ */ new Set();
    const duplicates = [];
    const validationResults2 = [];
    const processedData = [];
    data.forEach((row, index2) => {
      const rowNumber = index2 + 1;
      const errors = [];
      const warnings = [];
      let status = "valid";
      const rowString = JSON.stringify(row);
      const hash = crypto3.createHash("sha256").update(rowString).digest("hex");
      if (hashes.has(hash)) {
        warnings.push(`\uC911\uBCF5\uB41C \uB370\uC774\uD130 (\uB3D9\uC77C\uD55C \uB0B4\uC6A9\uC774 \uC774\uBBF8 \uC874\uC7AC)`);
        duplicates.push({ row: rowNumber, data: row });
        status = "warning";
      } else {
        hashes.add(hash);
      }
      requiredStandardFields.forEach((field) => {
        if (!row[field] || !row[field].toString().trim()) {
          errors.push(`${field}\uC774(\uAC00) \uD544\uC694\uD569\uB2C8\uB2E4`);
          status = "error";
        }
      });
      emailFields.forEach((field) => {
        if (row[field]) {
          const email = row[field].toString().trim();
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(email)) {
            errors.push(`${field}: \uC720\uD6A8\uD558\uC9C0 \uC54A\uC740 \uC774\uBA54\uC77C \uD615\uC2DD`);
            status = "error";
          }
        }
      });
      numberFields.forEach((field) => {
        if (row[field]) {
          const value = row[field];
          if (isNaN(Number(value))) {
            errors.push(`${field}: \uC22B\uC790\uAC00 \uC544\uB2CC \uAC12`);
            status = "error";
          }
        }
      });
      if (row["\uAC70\uB798\uCC98\uBA85"]) {
        const vendor = row["\uAC70\uB798\uCC98\uBA85"];
        if (vendor && vendor.toString().includes("\uD14C\uC2A4\uD2B8")) {
          warnings.push("\uD14C\uC2A4\uD2B8 \uAC70\uB798\uCC98\uC785\uB2C8\uB2E4");
          if (status === "valid") status = "warning";
        }
      }
      const mappedRow = {};
      Object.keys(row).forEach((key) => {
        const mappedKey = standardFieldMappings[key];
        if (mappedKey) {
          mappedRow[mappedKey] = row[key];
        }
        mappedRow[key] = row[key];
      });
      const processedRow = {
        id: `row_${rowNumber}`,
        rowNumber,
        status,
        errors,
        warnings,
        ...mappedRow
      };
      processedData.push(processedRow);
      if (errors.length > 0) {
        validationResults2.push({
          row: rowNumber,
          type: "error",
          messages: errors
        });
      }
      if (warnings.length > 0) {
        validationResults2.push({
          row: rowNumber,
          type: "warning",
          messages: warnings
        });
      }
    });
    const validCount = processedData.filter((r) => r.status === "valid").length;
    const warningCount = processedData.filter((r) => r.status === "warning").length;
    const errorCount = processedData.filter((r) => r.status === "error").length;
    console.log("Processing complete!");
    console.log(`Valid: ${validCount}, Warning: ${warningCount}, Error: ${errorCount}`);
    res.json({
      success: true,
      itemCount: data.length,
      duplicates: duplicates.length,
      validationErrors: errorCount,
      summary: {
        totalRows: data.length,
        uniqueRows: hashes.size,
        duplicateRows: duplicates.length,
        errorRows: errorCount,
        warningRows: warningCount,
        validRows: validCount
      },
      statusCounts: {
        valid: validCount,
        warning: warningCount,
        error: errorCount
      },
      details: {
        processedData: processedData.slice(0, 100),
        // Limit to first 100 rows for performance
        validationResults: validationResults2,
        duplicates,
        columns: Object.keys(data[0] || {}).map((key) => {
          const mappedKey = standardFieldMappings[key] || key;
          return {
            key: mappedKey,
            label: key,
            // Keep original Korean label for display
            type: numberFields.includes(key) ? "number" : emailFields.includes(key) ? "email" : "text",
            editable: true
          };
        })
      }
    });
  } catch (error) {
    console.error("Excel processing error:", error);
    res.status(500).json({
      success: false,
      error: "Failed to process Excel file",
      message: error.message || "\uD30C\uC77C \uCC98\uB9AC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
      fieldErrors: null
    });
  }
});
router35.get("/health", (req, res) => {
  res.json({
    status: "ok",
    service: "excel-smart-upload-simple",
    fieldValidation: "enabled",
    requiredFields: requiredStandardFields
  });
});
var excel_smart_upload_simple_default = router35;

// server/routes/orders-workflow.ts
init_db();
init_schema();
import { Router as Router33 } from "express";
import { eq as eq34 } from "drizzle-orm";
import { z as z11 } from "zod";
var router36 = Router33();
router36.post("/orders/check-approval-authority", requireAuth, async (req, res) => {
  try {
    const schema = z11.object({
      orderAmount: z11.number().positive()
    });
    const { orderAmount } = schema.parse(req.body);
    const user = await db.select().from(users).where(eq34(users.id, req.user.id)).then((rows) => rows[0]);
    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }
    const authorityCheck = await approvalAuthorityService.checkAuthority(user, orderAmount);
    let requiredApprovers = [];
    if (authorityCheck.requiresApproval && !authorityCheck.canDirectApprove) {
      requiredApprovers = await approvalAuthorityService.getRequiredApprovers(orderAmount, user.companyId);
    }
    res.json({
      ...authorityCheck,
      requiredApprovers,
      user: {
        id: user.id,
        name: user.name,
        role: user.role,
        email: user.email
      }
    });
  } catch (error) {
    console.error("Error checking approval authority:", error);
    res.status(500).json({
      error: "Failed to check approval authority",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router36.post("/orders/create-with-workflow", requireAuth, async (req, res) => {
  try {
    const schema = z11.object({
      orderData: z11.object({
        projectId: z11.number(),
        vendorId: z11.number(),
        orderDate: z11.string(),
        deliveryDate: z11.string().optional(),
        totalAmount: z11.number(),
        notes: z11.string().optional(),
        items: z11.array(z11.object({
          itemId: z11.number(),
          quantity: z11.number(),
          unitPrice: z11.number(),
          totalAmount: z11.number(),
          notes: z11.string().optional()
        }))
      }),
      sendEmail: z11.boolean().optional()
    });
    const { orderData, sendEmail } = schema.parse(req.body);
    const user = await db.select().from(users).where(eq34(users.id, req.user.id)).then((rows) => rows[0]);
    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }
    const authorityCheck = await approvalAuthorityService.checkAuthority(user, orderData.totalAmount);
    let orderStatus = "draft";
    let approvalStatus = "not_required";
    let approvalBypassReason = null;
    let nextApproverId = null;
    if (authorityCheck.canDirectApprove) {
      orderStatus = "created";
      approvalStatus = "not_required";
      approvalBypassReason = authorityCheck.bypassReason || "direct_approval";
    } else if (authorityCheck.requiresApproval) {
      orderStatus = "created";
      approvalStatus = "pending";
      nextApproverId = authorityCheck.nextApprover;
    } else {
      const autoApproval = await approvalAuthorityService.checkAutoApproval(orderData);
      if (autoApproval.shouldAutoApprove) {
        orderStatus = "created";
        approvalStatus = "not_required";
        approvalBypassReason = autoApproval.reason;
      }
    }
    const orderCount = await db.select().from(purchaseOrders).then((rows) => rows.length);
    const orderNumber = `PO-${(/* @__PURE__ */ new Date()).getFullYear()}-${String(orderCount + 1).padStart(5, "0")}`;
    const [newOrder] = await db.insert(purchaseOrders).values({
      ...orderData,
      orderNumber,
      userId: req.user.id,
      status: orderStatus === "draft" ? "draft" : approvalStatus === "pending" ? "pending" : "approved",
      orderStatus,
      approvalStatus,
      approvalBypassReason,
      nextApproverId,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    }).returning();
    await db.insert(orderHistory).values({
      orderId: newOrder.id,
      userId: req.user.id,
      action: "created",
      changes: {
        orderStatus,
        approvalStatus,
        approvalBypassReason,
        authorityCheck
      },
      createdAt: /* @__PURE__ */ new Date()
    });
    await workflowEngine.processNextStep(newOrder.id, req.user.id);
    if (approvalStatus === "pending") {
      await workflowEngine.sendNotifications(newOrder.id, "approval_requested");
    } else if (sendEmail && orderStatus === "created") {
      await workflowEngine.sendNotifications(newOrder.id, "order_created");
    }
    res.json({
      order: newOrder,
      workflowStatus: await workflowEngine.trackWorkflowProgress(newOrder.id)
    });
  } catch (error) {
    console.error("Error creating order with workflow:", error);
    res.status(500).json({
      error: "Failed to create order",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router36.get("/orders/workflow-status/:id", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.id, 10);
    if (isNaN(orderId)) {
      return res.status(400).json({ error: "Invalid order ID" });
    }
    const order = await db.select().from(purchaseOrders).where(eq34(purchaseOrders.id, orderId)).then((rows) => rows[0]);
    if (!order) {
      return res.status(404).json({ error: "Order not found" });
    }
    const workflowStatus = await workflowEngine.trackWorkflowProgress(orderId);
    res.json(workflowStatus);
  } catch (error) {
    console.error("Error getting workflow status:", error);
    res.status(500).json({
      error: "Failed to get workflow status",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router36.post("/orders/:id/confirm-delivery", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.id, 10);
    if (isNaN(orderId)) {
      return res.status(400).json({ error: "Invalid order ID" });
    }
    const schema = z11.object({
      deliveryNotes: z11.string().optional(),
      actualDeliveryDate: z11.string().optional(),
      receivedBy: z11.string().optional()
    });
    const { deliveryNotes, actualDeliveryDate, receivedBy } = schema.parse(req.body);
    const order = await db.select().from(purchaseOrders).where(eq34(purchaseOrders.id, orderId)).then((rows) => rows[0]);
    if (!order) {
      return res.status(404).json({ error: "Order not found" });
    }
    if (order.orderStatus !== "sent") {
      return res.status(400).json({
        error: "Invalid order status",
        message: "Only sent orders can be marked as delivered"
      });
    }
    const [updatedOrder] = await db.update(purchaseOrders).set({
      orderStatus: "delivered",
      status: "completed",
      // Legacy status
      deliveredAt: actualDeliveryDate ? new Date(actualDeliveryDate) : /* @__PURE__ */ new Date(),
      deliveredBy: receivedBy || req.user.id,
      notes: deliveryNotes ? order.notes ? `${order.notes}

\uBC30\uC1A1 \uBA54\uBAA8: ${deliveryNotes}` : deliveryNotes : order.notes,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq34(purchaseOrders.id, orderId)).returning();
    await db.insert(orderHistory).values({
      orderId,
      userId: req.user.id,
      action: "delivery_confirmed",
      changes: {
        previousStatus: order.orderStatus,
        newStatus: "delivered",
        deliveryNotes,
        actualDeliveryDate,
        receivedBy: receivedBy || req.user.id
      },
      createdAt: /* @__PURE__ */ new Date()
    });
    const confirmedBy = {
      id: req.user.id,
      name: req.user.name,
      role: req.user.role,
      companyId: req.user.companyId || void 0
    };
    const deliveryEvent = {
      orderId,
      orderNumber: order.orderNumber || `PO-${orderId}`,
      confirmedBy,
      deliveredAt: actualDeliveryDate ? new Date(actualDeliveryDate) : /* @__PURE__ */ new Date(),
      timestamp: /* @__PURE__ */ new Date()
    };
    webSocketService.notifyDeliveryConfirmation(deliveryEvent);
    await workflowEngine.sendNotifications(orderId, "delivery_completed");
    res.json({
      success: true,
      order: updatedOrder,
      message: "Delivery confirmed successfully"
    });
  } catch (error) {
    console.error("Error confirming delivery:", error);
    res.status(500).json({
      error: "Failed to confirm delivery",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router36.post("/orders/:id/approve", requireAuth, async (req, res) => {
  try {
    const orderId = parseInt(req.params.id, 10);
    if (isNaN(orderId)) {
      return res.status(400).json({ error: "Invalid order ID" });
    }
    const schema = z11.object({
      decision: z11.enum(["approved", "rejected"]),
      comments: z11.string().optional()
    });
    const { decision, comments } = schema.parse(req.body);
    const success = await approvalAuthorityService.processApproval(
      orderId,
      req.user.id,
      decision,
      comments
    );
    if (!success) {
      return res.status(500).json({ error: "Failed to process approval" });
    }
    await db.insert(orderHistory).values({
      orderId,
      userId: req.user.id,
      action: decision === "approved" ? "approved" : "rejected",
      changes: {
        decision,
        comments
      },
      createdAt: /* @__PURE__ */ new Date()
    });
    await workflowEngine.processNextStep(orderId, req.user.id);
    await workflowEngine.sendNotifications(
      orderId,
      decision === "approved" ? "order_approved" : "order_rejected"
    );
    res.json({
      success: true,
      message: `Order ${decision === "approved" ? "approved" : "rejected"} successfully`
    });
  } catch (error) {
    console.error("Error processing approval:", error);
    res.status(500).json({
      error: "Failed to process approval",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
var orders_workflow_default = router36;

// server/routes/orders-create.ts
init_db();
init_schema();
import { Router as Router34 } from "express";
import { eq as eq35 } from "drizzle-orm";
init_professional_pdf_generation_service();
var router37 = Router34();
router37.post("/orders/:id/create-order", requireAuth, async (req, res) => {
  const orderId = parseInt(req.params.id);
  const userId = req.user?.id;
  if (!userId) {
    return res.status(401).json({ error: "\uC778\uC99D\uC774 \uD544\uC694\uD569\uB2C8\uB2E4." });
  }
  try {
    const [order] = await db.select().from(purchaseOrders).where(eq35(purchaseOrders.id, orderId));
    if (!order) {
      return res.status(404).json({
        error: "\uBC1C\uC8FC\uC11C\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
        orderId
      });
    }
    if (order.orderStatus !== "draft" && order.status !== "draft") {
      return res.status(400).json({
        error: "\uC784\uC2DC\uC800\uC7A5 \uC0C1\uD0DC\uC758 \uBC1C\uC8FC\uC11C\uB9CC \uC0DD\uC131\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.",
        currentStatus: order.orderStatus || order.status
      });
    }
    const fullOrderData = await db.query.purchaseOrders.findFirst({
      where: eq35(purchaseOrders.id, orderId),
      with: {
        vendor: true,
        project: true,
        items: true,
        user: true
      }
    });
    if (!fullOrderData) {
      return res.status(404).json({ error: "\uBC1C\uC8FC\uC11C \uC815\uBCF4\uB97C \uBD88\uB7EC\uC62C \uC218 \uC5C6\uC2B5\uB2C8\uB2E4." });
    }
    console.log(`\u{1F4C4} Creating professional order PDF for order ${order.orderNumber}...`);
    const pdfResult = await ProfessionalPDFGenerationService.generateProfessionalPurchaseOrderPDF(
      orderId,
      userId
    );
    if (!pdfResult.success) {
      console.error("\u274C PDF generation failed:", pdfResult.error);
      return res.status(500).json({
        error: "PDF \uC0DD\uC131\uC5D0 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4.",
        details: pdfResult.error
      });
    }
    console.log(`\u2705 PDF generated successfully: ${pdfResult.pdfPath}`);
    const [updatedOrder] = await db.update(purchaseOrders).set({
      orderStatus: "created",
      status: "approved",
      // 레거시 호환성
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq35(purchaseOrders.id, orderId)).returning();
    await db.insert(orderHistory).values({
      orderId,
      userId,
      action: "order_created",
      changes: {
        from: "draft",
        to: "created",
        pdfGenerated: true,
        pdfPath: pdfResult.pdfPath,
        attachmentId: pdfResult.attachmentId
      },
      createdAt: /* @__PURE__ */ new Date()
    });
    console.log(`\u2705 Order ${order.orderNumber} successfully created with PDF`);
    res.json({
      success: true,
      orderId,
      orderNumber: order.orderNumber,
      status: "created",
      orderStatus: "created",
      pdfUrl: `/api/attachments/${pdfResult.attachmentId}/download`,
      attachmentId: pdfResult.attachmentId,
      message: "\uBC1C\uC8FC\uC11C\uAC00 \uC131\uACF5\uC801\uC73C\uB85C \uC0DD\uC131\uB418\uC5C8\uC2B5\uB2C8\uB2E4."
    });
  } catch (error) {
    console.error("\u274C Error creating order:", error);
    res.status(500).json({
      error: "\uBC1C\uC8FC\uC11C \uC0DD\uC131 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router37.get("/orders/:id/permissions", requireAuth, async (req, res) => {
  const orderId = parseInt(req.params.id);
  const userId = req.user?.id;
  const userRole = req.user?.role;
  try {
    const [order] = await db.select({
      id: purchaseOrders.id,
      status: purchaseOrders.status,
      orderStatus: purchaseOrders.orderStatus,
      approvalStatus: purchaseOrders.approvalStatus,
      userId: purchaseOrders.userId
    }).from(purchaseOrders).where(eq35(purchaseOrders.id, orderId));
    if (!order) {
      return res.status(404).json({ error: "\uBC1C\uC8FC\uC11C\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4." });
    }
    const isOwner = order.userId === userId;
    const isAdmin = userRole === "admin";
    const orderStatus = order.orderStatus || order.status;
    const permissions = {
      canEdit: (isOwner || isAdmin) && ["draft", "created"].includes(orderStatus),
      canDelete: (isOwner || isAdmin) && orderStatus === "draft",
      canCreateOrder: (isOwner || isAdmin) && orderStatus === "draft",
      canGeneratePDF: ["created", "sent", "delivered"].includes(orderStatus),
      canSendEmail: (isOwner || isAdmin) && orderStatus === "created",
      canApprove: isAdmin && order.approvalStatus === "pending",
      canViewHistory: isOwner || isAdmin,
      canDownloadAttachments: true
    };
    res.json({ permissions });
  } catch (error) {
    console.error("Error fetching permissions:", error);
    res.status(500).json({ error: "\uAD8C\uD55C \uC870\uD68C \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4." });
  }
});
var orders_create_default = router37;

// server/routes/health.ts
init_db();
import { Router as Router35 } from "express";
import { sql as sql15 } from "drizzle-orm";
var router38 = Router35();
router38.get("/health", (req, res) => {
  res.json({
    status: "healthy",
    timestamp: (/* @__PURE__ */ new Date()).toISOString(),
    environment: process.env.NODE_ENV || "unknown",
    vercel: process.env.VERCEL ? "true" : "false"
  });
});
router38.get("/health/database", async (req, res) => {
  const status = {
    database: {
      configured: false,
      connected: false,
      error: null,
      fallbackActive: false
    },
    environment: {
      NODE_ENV: process.env.NODE_ENV || "unknown",
      VERCEL: process.env.VERCEL ? "true" : "false",
      DATABASE_URL_SET: !!process.env.DATABASE_URL,
      JWT_SECRET_SET: !!process.env.JWT_SECRET,
      SESSION_SECRET_SET: !!process.env.SESSION_SECRET
    },
    timestamp: (/* @__PURE__ */ new Date()).toISOString()
  };
  status.database.configured = !!process.env.DATABASE_URL;
  status.database.fallbackActive = shouldUseFallback();
  if (!status.database.configured) {
    status.database.error = "DATABASE_URL environment variable not set";
    return res.status(503).json({
      ...status,
      message: "Database not configured. Using fallback authentication.",
      instructions: "Add DATABASE_URL to Vercel environment variables"
    });
  }
  try {
    if (!db) {
      throw new Error("Database instance not initialized");
    }
    const result = await db.execute(sql15`SELECT 1 as test`);
    if (result) {
      status.database.connected = true;
    }
  } catch (error) {
    status.database.connected = false;
    status.database.error = error instanceof Error ? error.message : String(error);
    return res.status(503).json({
      ...status,
      message: "Database connection failed. Using fallback authentication.",
      recommendation: "Check DATABASE_URL configuration and database server status"
    });
  }
  res.json({
    ...status,
    message: "All systems operational"
  });
});
router38.get("/health/auth", (req, res) => {
  const status = {
    authentication: {
      jwtConfigured: !!process.env.JWT_SECRET,
      sessionConfigured: !!process.env.SESSION_SECRET,
      databaseAuthAvailable: !!process.env.DATABASE_URL && !!db,
      fallbackAuthActive: shouldUseFallback(),
      fallbackReason: null
    },
    timestamp: (/* @__PURE__ */ new Date()).toISOString()
  };
  if (status.authentication.fallbackAuthActive) {
    if (!process.env.DATABASE_URL) {
      status.authentication.fallbackReason = "DATABASE_URL not configured";
    } else if (!db) {
      status.authentication.fallbackReason = "Database connection failed";
    }
  }
  const isHealthy = status.authentication.jwtConfigured && (status.authentication.databaseAuthAvailable || status.authentication.fallbackAuthActive);
  if (!isHealthy) {
    return res.status(503).json({
      ...status,
      message: "Authentication system not fully configured",
      recommendations: [
        !status.authentication.jwtConfigured ? "Set JWT_SECRET environment variable" : null,
        !status.authentication.databaseAuthAvailable && !status.authentication.fallbackAuthActive ? "Configure DATABASE_URL or ensure fallback auth is working" : null
      ].filter(Boolean)
    });
  }
  res.json({
    ...status,
    message: status.authentication.fallbackAuthActive ? "Authentication operational (using fallback)" : "Authentication fully operational"
  });
});
router38.get("/health/system", async (req, res) => {
  const results = {
    server: true,
    database: false,
    authentication: false,
    environment: {
      NODE_ENV: process.env.NODE_ENV || "unknown",
      VERCEL: process.env.VERCEL ? "true" : "false",
      isProduction: process.env.NODE_ENV === "production",
      isVercel: !!process.env.VERCEL
    },
    timestamp: (/* @__PURE__ */ new Date()).toISOString()
  };
  if (process.env.DATABASE_URL && db) {
    try {
      await db.execute(sql15`SELECT 1`);
      results.database = true;
    } catch (error) {
      console.error("Database health check failed:", error);
    }
  }
  results.authentication = !!process.env.JWT_SECRET && (results.database || shouldUseFallback());
  const isHealthy = results.server && results.authentication;
  const statusCode = isHealthy ? 200 : 503;
  const overallStatus = isHealthy ? "operational" : "degraded";
  res.status(statusCode).json({
    status: overallStatus,
    components: results,
    fallbackActive: shouldUseFallback(),
    message: shouldUseFallback() ? "System operational with fallback authentication (DATABASE_URL not configured)" : isHealthy ? "All systems operational" : "System degraded - some components not functional"
  });
});
var health_default = router38;

// server/routes/debug.ts
init_db();
init_schema();
import { Router as Router36 } from "express";
import { eq as eq36, sql as sql16, desc as desc16 } from "drizzle-orm";
var router39 = Router36();
router39.get("/debug/recent-drafts", async (req, res) => {
  try {
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1e3);
    const recentDrafts = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      status: purchaseOrders.status,
      createdAt: purchaseOrders.createdAt,
      userId: purchaseOrders.userId,
      vendorId: purchaseOrders.vendorId,
      totalAmount: purchaseOrders.totalAmount,
      vendorName: vendors.name
    }).from(purchaseOrders).leftJoin(vendors, eq36(purchaseOrders.vendorId, vendors.id)).where(eq36(purchaseOrders.status, "draft")).orderBy(desc16(purchaseOrders.createdAt)).limit(20);
    const allRecentOrders = await db.select({
      id: purchaseOrders.id,
      orderNumber: purchaseOrders.orderNumber,
      status: purchaseOrders.status,
      createdAt: purchaseOrders.createdAt,
      userId: purchaseOrders.userId,
      vendorId: purchaseOrders.vendorId,
      totalAmount: purchaseOrders.totalAmount,
      vendorName: vendors.name
    }).from(purchaseOrders).leftJoin(vendors, eq36(purchaseOrders.vendorId, vendors.id)).where(sql16`${purchaseOrders.createdAt} > ${oneHourAgo}`).orderBy(desc16(purchaseOrders.createdAt)).limit(50);
    const jbVendor = await db.select().from(vendors).where(sql16`${vendors.name} LIKE '%제이비엔지니어링%'`).limit(5);
    res.json({
      recentDrafts,
      recentDraftsCount: recentDrafts.length,
      allRecentOrders,
      allRecentCount: allRecentOrders.length,
      jbVendors: jbVendor,
      currentTime: (/* @__PURE__ */ new Date()).toISOString(),
      oneHourAgo: oneHourAgo.toISOString()
    });
  } catch (error) {
    console.error("Debug endpoint error:", error);
    res.status(500).json({ error: "Debug endpoint failed" });
  }
});
var debug_default = router39;

// server/routes/attachments.ts
init_db();
init_schema();
import { Router as Router37 } from "express";
import { eq as eq37 } from "drizzle-orm";
import path19 from "path";
import fs21 from "fs";
import jwt2 from "jsonwebtoken";
var router40 = Router37();
router40.get("/attachments/:id/download", async (req, res) => {
  const attachmentId = parseInt(req.params.id);
  const forceDownload = req.query.download === "true";
  console.log(`\u{1F4E5} Attachment download request: ID=${attachmentId}, forceDownload=${forceDownload}, query=${JSON.stringify(req.query)}`);
  try {
    let authenticated = false;
    let token = req.cookies?.auth_token;
    if (!token && req.query.token) {
      token = req.query.token;
      console.log("\u{1F4DD} Using token from query parameter");
    }
    if (!token) {
      const authHeader = req.headers.authorization;
      if (authHeader && authHeader.startsWith("Bearer ")) {
        token = authHeader.substring(7);
        console.log("\u{1F4DD} Using token from Authorization header");
      }
    }
    if (token) {
      try {
        const decoded = jwt2.verify(token, process.env.JWT_SECRET || "your-secret-key");
        authenticated = true;
        console.log("\u2705 Attachment download authenticated via JWT token");
      } catch (err) {
        console.log("\u274C Invalid JWT token for attachment download:", err.message);
      }
    }
    if (!authenticated && req.isAuthenticated && req.isAuthenticated()) {
      authenticated = true;
      console.log("\u2705 Attachment download authenticated via session");
    }
    if (!authenticated) {
      return res.status(401).json({
        error: "\uC778\uC99D\uC774 \uD544\uC694\uD569\uB2C8\uB2E4.",
        message: "Authentication required"
      });
    }
    const [attachment] = await db.select({
      id: attachments.id,
      orderId: attachments.orderId,
      originalName: attachments.originalName,
      storedName: attachments.storedName,
      filePath: attachments.filePath,
      fileSize: attachments.fileSize,
      mimeType: attachments.mimeType,
      uploadedBy: attachments.uploadedBy,
      uploadedAt: attachments.uploadedAt,
      fileData: attachments.fileData
    }).from(attachments).where(eq37(attachments.id, attachmentId));
    if (!attachment) {
      return res.status(404).json({
        error: "\uCCA8\uBD80\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
        attachmentId
      });
    }
    if (attachment.fileData) {
      console.log("\u{1F4C4} Serving file from Base64 data in database");
      const mimeType = attachment.mimeType || "application/pdf";
      const displayName = attachment.originalName || "file";
      try {
        const buffer = Buffer.from(attachment.fileData, "base64");
        res.setHeader("Content-Type", mimeType);
        res.setHeader("Content-Length", buffer.length);
        const disposition = forceDownload || !mimeType.includes("pdf") ? "attachment" : "inline";
        const contentDisposition = `${disposition}; filename*=UTF-8''${encodeURIComponent(displayName)}`;
        console.log(`\u{1F4C4} Setting Content-Disposition: ${contentDisposition} (mimeType: ${mimeType}, forceDownload: ${forceDownload})`);
        res.setHeader("Content-Disposition", contentDisposition);
        return res.send(buffer);
      } catch (error) {
        console.error("Error decoding Base64 data:", error);
      }
    }
    console.log("\u{1F4C4} Looking for file in filesystem...");
    let fileName = attachment.filePath;
    if (fileName?.startsWith("db://")) {
      console.log("\u{1F4C4} PDF has db:// prefix, converting to filesystem path...");
      fileName = fileName.replace("db://", "");
    }
    const possiblePaths = [];
    if (path19.isAbsolute(fileName)) {
      console.log("\u{1F4C4} Using absolute path directly:", fileName);
      possiblePaths.push(fileName);
    } else {
      possiblePaths.push(
        path19.join(process.cwd(), "attached_assets", fileName),
        path19.join(process.cwd(), "uploads", fileName),
        path19.join(process.cwd(), "uploads", "temp-pdf", fileName),
        path19.join(process.cwd(), fileName)
      );
    }
    let foundPath = null;
    for (const testPath of possiblePaths) {
      if (fs21.existsSync(testPath)) {
        foundPath = testPath;
        console.log(`\u2705 Found PDF file at: ${testPath}`);
        break;
      }
    }
    if (foundPath) {
      const mimeType = attachment.mimeType || "application/pdf";
      const displayName = attachment.originalName || fileName;
      res.setHeader("Content-Type", mimeType);
      const disposition = forceDownload || !mimeType.includes("pdf") ? "attachment" : "inline";
      const contentDisposition = `${disposition}; filename*=UTF-8''${encodeURIComponent(displayName)}`;
      console.log(`\u{1F4C4} Setting Content-Disposition: ${contentDisposition} (mimeType: ${mimeType}, forceDownload: ${forceDownload})`);
      res.setHeader("Content-Disposition", contentDisposition);
      const fileStream = fs21.createReadStream(foundPath);
      fileStream.pipe(res);
    } else {
      console.error(`File not found in any expected location for attachment ${attachmentId}`);
      return res.status(404).json({
        error: "\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
        fileName: attachment.originalName || "Unknown file",
        attachmentId
      });
    }
  } catch (error) {
    console.error("Attachment download error:", error);
    res.status(500).json({
      error: "\uD30C\uC77C \uB2E4\uC6B4\uB85C\uB4DC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
      message: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
router40.delete("/attachments/:id", requireAuth, async (req, res) => {
  const attachmentId = parseInt(req.params.id);
  try {
    const { user } = req;
    console.log("\u{1F5D1}\uFE0F Attachment delete request received");
    console.log("\u{1F464} User info:", { id: user?.id, role: user?.role, name: user?.name });
    if (!user || user.role !== "admin") {
      return res.status(403).json({
        error: "Admin access required",
        message: "Only administrators can delete attachments"
      });
    }
    console.log(`\u{1F5D1}\uFE0F Admin ${user.name} (ID: ${user.id}) requesting deletion of attachment ${attachmentId}`);
    const [attachment] = await db.select({
      id: attachments.id,
      orderId: attachments.orderId,
      originalName: attachments.originalName,
      storedName: attachments.storedName,
      filePath: attachments.filePath,
      fileSize: attachments.fileSize,
      mimeType: attachments.mimeType,
      uploadedBy: attachments.uploadedBy,
      uploadedAt: attachments.uploadedAt,
      fileData: attachments.fileData
    }).from(attachments).where(eq37(attachments.id, attachmentId));
    if (!attachment) {
      return res.status(404).json({
        error: "\uCCA8\uBD80\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
        attachmentId
      });
    }
    console.log(`\u{1F4C4} Found attachment: ${attachment.originalName} (Order: ${attachment.orderId})`);
    if (attachment.filePath && !attachment.filePath.startsWith("db://")) {
      let fileName = attachment.filePath;
      const possiblePaths = [];
      if (path19.isAbsolute(fileName)) {
        possiblePaths.push(fileName);
      } else {
        possiblePaths.push(
          path19.join(process.cwd(), "attached_assets", fileName),
          path19.join(process.cwd(), "uploads", fileName),
          path19.join(process.cwd(), "uploads", "temp-pdf", fileName),
          path19.join(process.cwd(), fileName)
        );
      }
      for (const testPath of possiblePaths) {
        if (fs21.existsSync(testPath)) {
          try {
            fs21.unlinkSync(testPath);
            console.log(`\u{1F5D1}\uFE0F Deleted physical file at: ${testPath}`);
            break;
          } catch (fileError) {
            console.warn(`\u26A0\uFE0F Failed to delete physical file at ${testPath}:`, fileError.message);
          }
        }
      }
    }
    const deletedRows = await db.delete(attachments).where(eq37(attachments.id, attachmentId));
    console.log(`\u2705 Deleted attachment record from database (affected rows: ${deletedRows})`);
    return res.json({
      success: true,
      message: "\uCCA8\uBD80\uD30C\uC77C\uC774 \uC131\uACF5\uC801\uC73C\uB85C \uC0AD\uC81C\uB418\uC5C8\uC2B5\uB2C8\uB2E4.",
      deletedAttachment: {
        id: attachment.id,
        originalName: attachment.originalName,
        orderId: attachment.orderId
      }
    });
  } catch (error) {
    console.error("Attachment deletion error:", error);
    res.status(500).json({
      error: "\uCCA8\uBD80\uD30C\uC77C \uC0AD\uC81C \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
      message: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
var attachments_default = router40;

// server/routes/index.ts
var router41 = Router38();
router41.use("/api", auth_default);
router41.use("/api", projects_default);
router41.use("/api", orders_default);
router41.use("/api", vendors_default);
router41.use("/api", items_default);
router41.use("/api", dashboard_default);
router41.use("/api", companies_default);
router41.use("/api/admin", admin_default);
router41.use("/api/excel-automation", excel_automation_default);
router41.use("/api/po-template", po_template_real_default);
router41.use("/api/reports", reports_default);
router41.use("/api", import_export_default);
router41.use("/api", email_history_default);
router41.use("/api/excel-template", excel_template_default);
router41.use("/api", orders_optimized_default);
router41.use("/api", orders_create_default);
router41.use("/api", order_statuses_default);
router41.use("/api", invoices_default);
router41.use("/api", verification_logs_default);
router41.use("/api", item_receipts_default);
router41.use("/api", approvals_default);
router41.use("/api", project_members_default);
router41.use("/api", project_types_default);
router41.use("/api", simple_auth_default);
router41.use("/api", test_accounts_default);
router41.use("/api/categories", categories_default);
router41.use("/api/approval-settings", approval_settings_default);
router41.use("/api", approval_authorities_default);
router41.use("/api", notifications_default);
router41.use("/api", orders_simple_default);
router41.use("/api", positions_default);
router41.use("/api/audit", audit_default);
router41.use("/api/email-test", email_test_default);
router41.use("/api/email-settings", email_settings_default);
router41.use(workflow_default);
router41.use("/api", orders_workflow_default);
router41.use("/api/excel-smart-upload", excel_smart_upload_simple_default);
router41.use("/api", attachments_default);
router41.use("/api", health_default);
router41.use("/api", debug_default);
var routes_default = router41;

// server/production.ts
dotenv2.config();
var originalDatabaseUrl = process.env.DATABASE_URL;
console.log("\u{1F50D} Original DATABASE_URL:", originalDatabaseUrl ? originalDatabaseUrl.split("@")[0] + "@[HIDDEN]" : "not set");
var correctPoolerUrl = "postgresql://postgres.tbvugytmskxxyqfvqmup:gps110601ysw@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres";
if (originalDatabaseUrl && (originalDatabaseUrl.includes("db.tbvugytmskxxyqfvqmup.supabase.co") || originalDatabaseUrl.includes("tbvugytmskxxyqfvqmup.supabase.co:5432"))) {
  console.log("\u{1F527} Using corrected Supabase pooler URL for serverless");
  process.env.DATABASE_URL = correctPoolerUrl;
  console.log("\u{1F527} Set DATABASE_URL to pooler:", process.env.DATABASE_URL.split("@")[0] + "@[HIDDEN]");
} else if (!originalDatabaseUrl) {
  console.log("\u{1F527} No DATABASE_URL set, using default Supabase pooler");
  process.env.DATABASE_URL = correctPoolerUrl;
  console.log("\u{1F527} Set DATABASE_URL to pooler:", process.env.DATABASE_URL.split("@")[0] + "@[HIDDEN]");
} else {
  console.log("\u{1F527} Using existing DATABASE_URL:", originalDatabaseUrl.split("@")[0] + "@[HIDDEN]");
}
console.log("\u2728 Production server starting without static file serving");
var sessionErrorHandler = (err, req, res, next) => {
  if (err && err.code === "ECONNREFUSED") {
    console.error("\u{1F534} Database connection failed for sessions, falling back to memory store");
    next();
  } else if (err) {
    console.error("\u{1F534} Session error:", err);
    next();
  } else {
    next();
  }
};
var app = express4();
app.use(express4.json());
app.use(express4.urlencoded({ extended: false }));
app.use(cookieParser());
app.use("/attached_assets", express4.static("attached_assets"));
console.log("\u{1F527} Setting up session middleware...");
var SESSION_SECRET = process.env.SESSION_SECRET || "ikjin-po-mgmt-prod-secret-2025-secure-key";
app.use(session({
  secret: SESSION_SECRET,
  resave: true,
  // Force save to ensure persistence in serverless
  saveUninitialized: true,
  // Required for serverless to create sessions
  name: "connect.sid",
  cookie: {
    secure: true,
    // Always HTTPS in Vercel production
    httpOnly: true,
    maxAge: 1e3 * 60 * 60 * 24 * 7,
    // 7 days
    sameSite: "none",
    // Required for cross-origin in production
    path: "/"
  },
  // Force session regeneration to ensure data persistence
  genid: () => {
    return crypto4.randomUUID();
  }
}));
console.log("\u2705 Session middleware configured globally");
app.use((req, res, next) => {
  const start = Date.now();
  const path20 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path20.startsWith("/api")) {
      let logLine = `${req.method} ${path20} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      console.log(logLine);
    }
  });
  next();
});
var isInitialized = false;
if (process.env.VERCEL) {
  console.log("\u{1F680} Vercel environment detected - initializing production app");
  app.use(sessionErrorHandler);
  app.get("/api/debug/session-store", (req, res) => {
    const sessionData = {
      hasSession: !!req.session,
      sessionID: req.sessionID,
      sessionKeys: req.session ? Object.keys(req.session) : [],
      sessionData: req.session || null,
      isAuthenticated: req.isAuthenticated ? req.isAuthenticated() : false,
      storeType: "Global Memory Store",
      cookieSettings: req.session?.cookie,
      cookieHeader: req.headers.cookie,
      vercelInit: true,
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      sessionStore: {
        ready: typeof req.sessionStore !== "undefined",
        type: req.sessionStore ? req.sessionStore.constructor.name : "unknown"
      },
      environment: {
        NODE_ENV: process.env.NODE_ENV,
        VERCEL: process.env.VERCEL,
        SESSION_SECRET_SET: !!process.env.SESSION_SECRET
      },
      middlewareOrder: "session -> error-handler -> debug-endpoint -> routes"
    };
    console.log("\u{1F50D} Session debug info:", sessionData);
    res.json(sessionData);
  });
  app.use(routes_default);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    console.error("Express error:", err);
    res.status(status).json({ message });
  });
  console.log("\u26A0\uFE0F Skipping static file serving in Vercel environment");
  isInitialized = true;
  console.log("\u2705 Production app initialized for Vercel");
} else {
  console.log("\u{1F527} Non-Vercel environment detected - initializing production app");
  app.use(sessionErrorHandler);
  app.get("/api/debug/session-store", (req, res) => {
    const sessionData = {
      hasSession: !!req.session,
      sessionID: req.sessionID,
      sessionKeys: req.session ? Object.keys(req.session) : [],
      sessionData: req.session || null,
      isAuthenticated: req.isAuthenticated ? req.isAuthenticated() : false,
      storeType: "Non-Vercel Memory Store",
      cookieSettings: req.session?.cookie,
      cookieHeader: req.headers.cookie,
      nonVercelInit: true,
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      sessionStore: {
        ready: typeof req.sessionStore !== "undefined",
        type: req.sessionStore ? req.sessionStore.constructor.name : "unknown"
      },
      environment: {
        NODE_ENV: process.env.NODE_ENV,
        VERCEL: process.env.VERCEL,
        SESSION_SECRET_SET: !!process.env.SESSION_SECRET
      },
      middlewareOrder: "session -> error-handler -> debug-endpoint -> routes"
    };
    console.log("\u{1F50D} Session debug info:", sessionData);
    res.json(sessionData);
  });
  app.use(routes_default);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    console.error("Express error:", err);
    res.status(status).json({ message });
  });
  console.log("\u2705 Non-Vercel production app initialized");
}
if (!process.env.VERCEL) {
  const port = process.env.PORT || 3e3;
  app.listen(port, () => {
    console.log(`\u{1F680} Production server running on port ${port}`);
  });
}
var production_default = app;
export {
  production_default as default
};
